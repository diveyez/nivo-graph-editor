{"version":3,"sources":["components/PortWidget.tsx","state/generateElementId.ts","state/types.ts","state/store.ts","state/linking.ts","state/nodes.ts","components/PropertyWidget.tsx","components/PropertiesWidget.tsx","property_services/AnglePropertyService.tsx","property_services/ArrayStringPropertyService/index.ts","property_services/ArrayXYPropertyService.tsx","property_services/BlendModePropertyService.tsx","property_services/CustomPropertyService.tsx","property_services/MatrixPropertyService/index.ts","property_services/NumberPropertyService/index.ts","property_services/RefPropertyService.tsx","property_services/TextPropertyService.tsx","property_services/ArrayStringPropertyService/ArrayStringPropertyControl.tsx","property_services/ArrayStringPropertyService/ArrayStringPropertyService.tsx","property_services/MatrixPropertyService/MatrixPropertyControl.tsx","property_services/MatrixPropertyService/MatrixPropertyService.tsx","property_services/NumberPropertyService/NumberPropertyService.tsx","property_services/NumberPropertyService/NumberPropertyControl.tsx","services_registry.ts","node_services/AreaBumpNodeService.tsx","node_services/AxisNodeService.ts","node_services/BlendModeNodeService.ts","node_services/CanvasNodeService.tsx","node_services/ChordNodeService.tsx","node_services/ColorSchemeNodeService.ts","node_services/LineNodeService.tsx","node_services/MarginNodeService.tsx","node_services/ScatterPlotNodeService.tsx","node_services/SeriesXYNodeService.tsx","node_services/SerieXYNodeService.ts","registry.ts","node_services/MatrixNodeService.tsx","node_services/NivoThemeNodeService.tsx","components/ui/Input.tsx","theming/GlobalStyle.tsx","theming/themes/index.ts","theming/themes/darkTheme.ts","theming/themes/lightTheme.ts","components/AppFooter.tsx","components/AppHeader.tsx","components/LinkingLayer.tsx","components/LinkWidget.tsx","components/LinksLayer.tsx","components/NodeInfoPanel/NodeName.tsx","utils/useDocumentEventListener.ts","components/NodeInfoPanel/PropertyItem.tsx","components/NodeInfoPanel/NodeInfoPanel.tsx","components/NodeWidget.tsx","components/NodesLayer.tsx","components/Modal.tsx","components/SidebarButton.tsx","components/NodeSelector.tsx","components/AddNodeButton.tsx","components/NewGraph.tsx","fs.ts","components/SaveGraph.tsx","components/OpenGraph.tsx","components/Settings.tsx","components/Sidebar.tsx","examples/index.ts","components/ExampleLoader.tsx","components/Welcome.tsx","App.tsx","theming/hooks.ts","reportWebVitals.js","index.tsx","property_services/index.ts","property_services/ChoicesPropertyService.tsx"],"names":["PortWidget","memo","type","elementId","x","y","useLinking","linkingType","isLinking","potentialId","useLinkingActions","startLinking","setLinkingPotentialPort","resetLinkingPotentialPort","handleLinking","useCallback","event","stopPropagation","anchor","initial","clientX","clientY","handleMouseEnter","handleMouseLeave","Container","onMouseDown","onMouseEnter","onMouseLeave","isHighlighted","style","left","Port","styled","div","PORT_SIZE","props","theme","colors","background","accentColor","CONTAINER_SIZE","undefined","css","generateElementId","uuidV4","isProperty","element","elementType","isNode","isLink","updateNodePosition","elements","nodeId","offset","node","find","id","map","properties","includes","useStore","create","set","settings","themeId","setSettings","partialSettings","state","selectedNodeIds","setSelectedNodeIds","createNode","nodeService","registry","getNodeService","newNode","name","replace","width","height","data","factory","newProperties","forEach","property","propertyService","getPropertyService","newProperty","accepts","length","hasOutput","push","hydrate","removeNode","filter","updateNode","patch","updateProperty","propertyId","loadGraph","graph","nodes","propertyIds","links","link","sourceId","targetId","drag","isDragging","dragging","startDrag","updateDrag","position","stopDrag","linking","previous","updateLinking","currentElement","potentialElement","source","target","findLinkingPotentialPort","stopLinking","unlink","settingsSelector","useSettings","loadGraphSelector","useLoadGraph","createNodeSelector","useCreateNode","updateNodeSelector","useUpdateNode","setSelectedNodeIdsSelector","useSetSelectedNodeIds","linkingSelector","shallow","unlinkSelector","useUnlink","serializeProperties","serialize","serializeElements","useGraph","useMemo","resolvedNodes","propertiesByNodeId","resolvedProperties","resolvedLinks","isSelected","propertyNode","Error","dependencies","Object","values","input","resolveGraph","useSelectedNodes","PropertyWidget","PropertyContainer","PropertyName","transparentize","nodeBackground","span","PropertiesWidget","propertyServices","createElement","widget","AnglePropertyService","defaultValue","value","getValue","control","onChange","console","log","ControlContainer","ControlAddItemButton","ArrayXYPropertyService","handleChange","itemIndex","key","item","index","Number","size","onClick","blendModeChoices","label","BlendModePropertyService","ChoicesPropertyService","choices","ChoicesPropertyControl","CustomPropertyService","renderer","RefPropertyService","resolvePropertyValue","TextPropertyService","Grid","RemoveButton","AddItemButton","ArrayStringPropertyService","setValue","_","i","handleRemove","SizeContainer","MatrixWrapper","MatrixContainer","columns","rows","MatrixPropertyService","xSize","ySize","Array","isArray","valueUpdate","handleSizeChange","newXSize","newYSize","newValue","slice","newRowIndex","from","fill","row","newRow","newColumnIndex","rowIndex","cell","columnIndex","targetRowIndex","targetColumnIndex","handleValueChange","NumberPropertyService","options","partialOptions","controlType","min","max","step","ServiceRegistry","nodeServices","this","indexOf","nodeType","grouped","entries","groupBy","sortBy","group","category","types","propertyType","ownValue","AreaBumpNodeService","description","spacing","xPadding","isInteractive","AxisNodeService","tickSize","tickPadding","tickRotation","legend","legendOffset","propertyValues","keyBy","nodeValue","BlendModeNodeService","blendMode","CanvasNodeService","content","backgroundColor","overflow","ChordNodeService","keys","innerRadiusRatio","innerRadiusOffset","matrix","ColorSchemeNodeService","scheme","LineNodeService","MarginNodeService","top","right","bottom","ScatterPlotNodeService","SeriesXYNodeService","SerieXYNodeService","servicesRegistry","registerNodeService","fontFamily","fontSize","textColor","grid","line","stroke","tooltip","container","color","borderRadius","boxShadow","padding","registerPropertyService","Input","inputBackground","inputText","GlobalStyle","createGlobalStyle","text","themes","mediumDepthBackground","topDepthBackground","badgeBackground","border","lightBorder","nodeBorder","success","overlay","AppFooter","join","footer","AppHeader","Header","header","ICON_SIZE","LinkingLayer","iconPosition","icon","pointerEvents","Line","strokeLinecap","x1","x2","y1","y2","Circle","cx","cy","r","Icon","isValid","circle","lineGenerator","d3Line","curve","curveBasis","UNLINK_BUTTON_SIZE","LinkWidget","sourceElementType","sourceX","sourceY","sourceWidth","sourceHeight","targetX","targetY","targetHeight","sourcePosition","targetPosition","xDistance","center","xOffset","Math","abs","points","path","useState","isHover","setIsHover","handleHover","handleOut","handleUnlink","Path","d","CapturePath","UnlinkButton","LinksLayer","NodeName","currentName","isEditing","setIsEditing","setName","inputRef","useRef","useEffect","current","focus","eventType","listener","handleEscape","document","addEventListener","removeEventListener","Name","ref","onKeyPress","Relation","ownId","parentName","goToRelation","RelationContainer","RelationName","UnlinkIcon","PropertyItem","hasInput","PropertyHeader","h4","NodeInfoPanel","handleClose","Id","Close","Properties","NodeValueTitle","$$typeof","NodeValue","JSON","stringify","pre","NodeWidget","hasCustomWidget","handleStartDrag","NodeContainer","NodeHeader","NodesLayer","Layer","Modal","children","maxWidth","onCloseRequest","createPortal","role","aria-modal","onKeyDown","Background","Content","body","ModalTitle","h2","Button","SidebarButton","NodeType","onCreate","NodeTypeItem","NodeTypeDescription","Category","CategoryTitle","NodeSelector","categories","getNodeServiceCategories","h3","AddNodeButton","isOpen","setIsOpen","NewGraph","handleNewGraph","ConfirmContainer","saveAsJSON","a","serialized","stringified","version","blob","Blob","fileSave","fileName","extensions","fileHandle","parseFileContent","Promise","resolve","reader","FileReader","readAsText","onloadend","readyState","DONE","result","parse","loadFromJSON","fileOpen","mimeTypes","SaveGraph","OpenGraph","handleOpen","then","Settings","Sidebar","examples","ExampleItem","example","onLoad","handleLoad","ExampleItemContainer","ExampleLoader","Welcome","Message","display","justifyContent","margin","cursor","App","store","useCurrentTheme","selectedNodes","handleMouseMove","handleMouseOut","Canvas","onMouseMove","onMouseUp","InfoPanel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","choice"],"mappings":"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","file":"static/js/main.0a5bf049.chunk.js","sourcesContent":["import { useCallback, MouseEvent, memo } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ElementId, useLinkingActions, useLinking } from '../state'\n\nconst CONTAINER_SIZE = 20\nconst PORT_SIZE = 10\n\nexport const PortWidget = memo(\n    ({\n        type,\n        elementId,\n        x,\n        y,\n    }: {\n        type: 'source' | 'target'\n        elementId: ElementId\n        x: number\n        y: number\n    }) => {\n        const { type: linkingType, isLinking, potentialId } = useLinking()\n        const {\n            startLinking,\n            setLinkingPotentialPort,\n            resetLinkingPotentialPort,\n        } = useLinkingActions()\n\n        const handleLinking = useCallback(\n            (event: MouseEvent) => {\n                event.stopPropagation()\n\n                startLinking({\n                    elementId,\n                    type,\n                    anchor: [x, y],\n                    initial: [event.clientX, event.clientY],\n                })\n            },\n            [startLinking, elementId, type, x, y]\n        )\n\n        const handleMouseEnter = useCallback(() => {\n            setLinkingPotentialPort(elementId, type)\n        }, [setLinkingPotentialPort, elementId, type])\n\n        const handleMouseLeave = useCallback(() => {\n            resetLinkingPotentialPort()\n        }, [resetLinkingPotentialPort])\n\n        return (\n            <Container\n                onMouseDown={handleLinking}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n                isLinking={isLinking}\n                isHighlighted={potentialId === elementId && linkingType !== type}\n                style={{\n                    left: type === 'target' ? 0 : '100%',\n                }}\n            >\n                <Port />\n            </Container>\n        )\n    }\n)\n\nconst Port = styled.div`\n    pointer-events: all;\n    width: ${PORT_SIZE}px;\n    height: ${PORT_SIZE}px;\n    border-radius: ${PORT_SIZE / 2}px;\n    background: ${props => props.theme.colors.background};\n    border: 2px solid ${props => props.theme.colors.accentColor};\n    transition: transform 200ms;\n`\n\nconst Container = styled.div<{\n    isLinking: boolean\n    isHighlighted: boolean\n}>`\n    pointer-events: all;\n    position: absolute;\n    top: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${CONTAINER_SIZE}px;\n    height: ${CONTAINER_SIZE}px;\n    margin-top: -${CONTAINER_SIZE / 2}px;\n    margin-left: -${CONTAINER_SIZE / 2}px;\n    cursor: crosshair;\n\n    ${Port} {\n        transform: scale(${props => (props.isHighlighted ? 1.6 : 1)});\n    }\n\n    ${props =>\n        !props.isLinking\n            ? css`\n                  &:hover {\n                      transform: scale(1.6);\n                  }\n              `\n            : undefined};\n`\n","import { v4 as uuidV4 } from 'uuid'\nimport { ElementId } from './types'\n\nexport const generateElementId = (): ElementId => uuidV4()\n","export type ElementId = string\n\nexport interface CreateProperty {\n    type: string\n    name: string\n    accepts?: string[]\n    hasOutput?: boolean\n}\n\nexport interface Property extends CreateProperty {\n    name: string\n    accepts: string[]\n    hasOutput: boolean\n    id: ElementId\n    elementType: 'property'\n    nodeId: ElementId\n    x: number\n    y: number\n    width: number\n    height: number\n}\n\nexport interface ResolvedProperty extends Property {\n    node: ResolvedNode\n    dependencies: (ResolvedNode | ResolvedProperty)[]\n    input?: ResolvedNode | ResolvedProperty\n}\n\nexport const isProperty = (element: Element): element is Property =>\n    element.elementType === 'property'\n\nexport interface Node<Data = any> {\n    elementType: 'node'\n    type: string\n    id: ElementId\n    x: number\n    y: number\n    width: number\n    name: string\n    data: Data\n    height: number\n    properties: ElementId[]\n}\n\nexport interface ResolvedNode extends Omit<Node, 'properties'> {\n    isSelected: boolean\n    properties: ResolvedProperty[]\n}\n\nexport interface SerializedNode {\n    id: ElementId\n    type: string\n    name: string\n    x: number\n    y: number\n    width: number\n}\n\nexport interface SerializedElements {\n    nodes: SerializedNode[]\n    links: any[]\n}\n\nexport const isNode = (element: Element): element is Node => element.elementType === 'node'\n\nexport interface Link {\n    id: ElementId\n    elementType: 'link'\n    sourceId: ElementId\n    targetId: ElementId\n}\n\nexport const isLink = (element: Element): element is Link => element.elementType === 'link'\n\nexport interface ResolvedLink extends Link {\n    source: ResolvedNode | ResolvedProperty\n    target: ResolvedNode | ResolvedProperty\n}\n\nexport type Element = Node | Property | Link\n\nexport interface AppSettings {\n    themeId: string\n}\n\nexport type State = {\n    settings: AppSettings\n    setSettings: (partialSettings: Partial<AppSettings>) => void\n    // flat representation of all nodes/properties/links\n    elements: Element[]\n    selectedNodeIds: ElementId[]\n    setSelectedNodeIds: (ids: ElementId[]) => void\n    createNode: (type: string) => void\n    updateNode: (id: ElementId, patch: any) => void\n    removeNode: (id: ElementId) => void\n    updateProperty: (propertyId: ElementId, patch: any) => void\n    loadGraph: (graph: any) => void\n    //\n    // DRAGGING\n    //\n    dragging: {\n        isDragging: boolean\n        elementId: ElementId | null\n        initial: [number, number]\n        offset: [number, number]\n    }\n    startDrag: (elementId: ElementId, initial: [number, number]) => void\n    updateDrag: (position: [number, number]) => void\n    stopDrag: () => void\n    //\n    // LINKING\n    //\n    linking: {\n        isLinking: boolean\n        elementId?: ElementId\n        elementType?: string\n        accepts: string[]\n        potentialId?: ElementId\n        type: 'source' | 'target'\n        anchor: [number, number]\n        position: [number, number]\n        previous: [number, number]\n    }\n    startLinking: (props: {\n        elementId?: ElementId\n        type: 'source' | 'target'\n        anchor: [number, number]\n        initial: [number, number]\n    }) => void\n    updateLinking: (position: [number, number]) => void\n    setLinkingPotentialPort: (elementId: ElementId, type: 'source' | 'target') => void\n    resetLinkingPotentialPort: () => void\n    stopLinking: () => void\n    link: (sourceId: ElementId, targetId: ElementId) => void\n    unlink: (sourceId: ElementId, targetId: ElementId) => void\n}\n","import { useMemo } from 'react'\nimport create from 'zustand'\nimport shallow from 'zustand/shallow'\nimport {\n    Element,\n    ElementId,\n    State,\n    Node,\n    ResolvedNode,\n    isNode,\n    Property,\n    ResolvedProperty,\n    isProperty,\n    Link,\n    ResolvedLink,\n    isLink,\n    SerializedElements,\n} from './types'\nimport { generateElementId } from './generateElementId'\nimport registry from '../registry'\nimport { findLinkingPotentialPort } from './linking'\n\nconst DEFAULT_NODE_HEADER_HEIGHT = 24\nconst PROPERTY_HEIGHT = 20\n\nconst updateNodePosition = (\n    elements: Element[],\n    nodeId: ElementId | null,\n    offset: [number, number]\n): Element[] => {\n    if (nodeId === null) {\n        return elements\n    }\n\n    const node: Node | undefined = elements.find(\n        element => isNode(element) && element.id === nodeId\n    ) as any\n    if (!node) {\n        return elements\n    }\n\n    return elements.map(element => {\n        if (\n            (isNode(element) && element.id === node.id) ||\n            (isProperty(element) && node.properties.includes(element.id))\n        ) {\n            return {\n                ...element,\n                x: element.x + offset[0],\n                y: element.y + offset[1],\n            }\n        }\n\n        return element\n    })\n}\n\nexport const useStore = create<State>(set => ({\n    settings: {\n        themeId: 'dark',\n    },\n    setSettings: partialSettings =>\n        set(state => {\n            return {\n                settings: {\n                    ...state.settings,\n                    ...partialSettings,\n                },\n            }\n        }),\n    elements: [],\n    selectedNodeIds: [],\n    setSelectedNodeIds: selectedNodeIds => set(() => ({ selectedNodeIds })),\n    createNode: type =>\n        set(state => {\n            const nodeService = registry.getNodeService(type)\n\n            const newNode: Node = {\n                elementType: 'node',\n                id: generateElementId(),\n                type: type,\n                name: nodeService.type.replace('_', ' '),\n                x: 100,\n                y: 100,\n                width: 120,\n                height: 100,\n                properties: [],\n                data: nodeService.factory(),\n            }\n\n            const newProperties: Property[] = []\n            nodeService.properties.forEach(property => {\n                const propertyService = registry.getPropertyService(property.type)\n\n                const newProperty: Property = {\n                    accepts: [],\n                    ...property,\n                    elementType: 'property',\n                    id: generateElementId(),\n                    nodeId: newNode.id,\n                    name: property.name,\n                    x: newNode.x,\n                    y:\n                        newNode.y +\n                        DEFAULT_NODE_HEADER_HEIGHT +\n                        newProperties.length * PROPERTY_HEIGHT,\n                    height: PROPERTY_HEIGHT,\n                    width: newNode.width,\n                    hasOutput: property.hasOutput || false,\n                }\n\n                newProperties.push(\n                    propertyService.hydrate(newProperty, newNode.data[property.name])\n                )\n            })\n\n            newNode.properties = newProperties.map(property => property.id)\n\n            return {\n                elements: [...state.elements, ...newProperties, newNode],\n                selectedNodeIds: [newNode.id],\n            }\n        }),\n    removeNode: id =>\n        set(state => {\n            return {\n                elements: state.elements.filter(element => element.id !== id),\n            }\n        }),\n    updateNode: (id, patch) =>\n        set(state => {\n            const updatedElements = state.elements.map(element => {\n                if (!isNode(element) || element.id !== id) {\n                    return element\n                }\n\n                return {\n                    ...element,\n                    ...patch,\n                }\n            })\n\n            return {\n                elements: updatedElements,\n            }\n        }),\n    updateProperty: (propertyId, patch) =>\n        set(state => {\n            const updatedElements = state.elements.map(element => {\n                if (!isProperty(element) || element.id !== propertyId) {\n                    return element\n                }\n\n                return {\n                    ...element,\n                    ...patch,\n                }\n            })\n\n            return {\n                elements: updatedElements,\n            }\n        }),\n    loadGraph: graph =>\n        set(state => {\n            const elements: any[] = []\n\n            graph.nodes.forEach((node: any) => {\n                const nodeService = registry.getNodeService(node.type)\n                const propertyIds: ElementId[] = []\n\n                nodeService.properties.forEach(property => {\n                    const propertyService = registry.getPropertyService(property.type)\n\n                    const propertyId = node.data[property.name]\n                        ? node.data[property.name].id\n                        : generateElementId()\n\n                    let newProperty = {\n                        ...propertyService.factory(property),\n                        ...property,\n                        elementType: 'property',\n                        id: propertyId,\n                        nodeId: node.id,\n                        name: property.name,\n                        x: node.x,\n                        y:\n                            DEFAULT_NODE_HEADER_HEIGHT +\n                            node.y +\n                            propertyIds.length * PROPERTY_HEIGHT,\n                        width: node.width,\n                        height: PROPERTY_HEIGHT,\n                    } as Property\n\n                    if (node.data[property.name]) {\n                        newProperty = propertyService.hydrate(\n                            newProperty,\n                            node.data[property.name].data\n                        )\n                    }\n\n                    elements.push(newProperty)\n                    propertyIds.push(newProperty.id)\n                })\n\n                elements.push({\n                    elementType: 'node',\n                    id: node.id,\n                    type: node.type,\n                    name: node.name || node.type.replace('_', ' '),\n                    x: node.x,\n                    y: node.y,\n                    width: node.width,\n                    height: DEFAULT_NODE_HEADER_HEIGHT + propertyIds.length * PROPERTY_HEIGHT,\n                    properties: propertyIds,\n                })\n            })\n\n            graph.links.forEach((link: any) => {\n                elements.push({\n                    elementType: 'link',\n                    id: link.id,\n                    sourceId: link.sourceId,\n                    targetId: link.targetId,\n                })\n            })\n\n            return {\n                selectedNodeIds: [],\n                elements,\n                drag: {\n                    isDragging: false,\n                    elementId: null,\n                    initial: [0, 0],\n                    offset: [0, 0],\n                },\n            }\n        }),\n    //\n    // dragging\n    //\n    dragging: {\n        isDragging: false,\n        elementId: null,\n        initial: [0, 0],\n        offset: [0, 0],\n    },\n    startDrag: (elementId, initial) =>\n        set(state => {\n            return {\n                dragging: {\n                    isDragging: true,\n                    elementId: elementId,\n                    initial,\n                    offset: [0, 0],\n                },\n            }\n        }),\n    updateDrag: position =>\n        set(state => {\n            const offset: [number, number] = [\n                position[0] - state.dragging.initial[0],\n                position[1] - state.dragging.initial[1],\n            ]\n\n            return {\n                dragging: {\n                    ...state.dragging,\n                    offset,\n                    initial: [position[0], position[1]],\n                },\n                elements: updateNodePosition(state.elements, state.dragging.elementId, offset),\n            }\n        }),\n    stopDrag: () =>\n        set(() => {\n            return {\n                dragging: {\n                    isDragging: false,\n                    elementId: null,\n                    initial: [0, 0],\n                    offset: [0, 0],\n                },\n            }\n        }),\n    //\n    // linking\n    //\n    linking: {\n        isLinking: false,\n        elementId: undefined,\n        accepts: [],\n        type: 'source',\n        anchor: [0, 0],\n        position: [0, 0],\n        previous: [0, 0],\n    },\n    startLinking: ({ elementId, type, anchor, initial }) =>\n        set(state => {\n            const element = state.elements.find(element => element.id === elementId)\n            let elementType: string | undefined = undefined\n            if (element && 'type' in element) {\n                elementType = element.type\n            }\n\n            let accepts: string[] = []\n            if (element && 'accepts' in element) {\n                accepts = element.accepts\n            }\n\n            return {\n                linking: {\n                    isLinking: true,\n                    elementId,\n                    elementType,\n                    accepts,\n                    type,\n                    anchor,\n                    position: anchor,\n                    previous: initial,\n                },\n            }\n        }),\n    updateLinking: position =>\n        set(state => {\n            const offset = [\n                position[0] - state.linking.previous[0],\n                position[1] - state.linking.previous[1],\n            ]\n\n            return {\n                linking: {\n                    ...state.linking,\n                    position: [\n                        state.linking.position[0] + offset[0],\n                        state.linking.position[1] + offset[1],\n                    ],\n                    previous: position,\n                },\n            }\n        }),\n    setLinkingPotentialPort: (elementId, type) =>\n        set(state => {\n            const potentialId = findLinkingPotentialPort(\n                state.linking,\n                state.elements,\n                elementId,\n                type\n            )\n            if (!potentialId) {\n                return {}\n            }\n\n            return {\n                linking: {\n                    ...state.linking,\n                    potentialId,\n                },\n            }\n        }),\n    resetLinkingPotentialPort: () =>\n        set(state => {\n            return {\n                linking: {\n                    ...state.linking,\n                    potentialId: undefined,\n                },\n            }\n        }),\n    stopLinking: () =>\n        set(state => {\n            let elements = state.elements\n            if (state.linking.elementId !== undefined && state.linking.potentialId !== undefined) {\n                const link: Link = {\n                    id: generateElementId(),\n                    elementType: 'link',\n                    sourceId:\n                        state.linking.type === 'source'\n                            ? state.linking.elementId\n                            : state.linking.potentialId,\n                    targetId:\n                        state.linking.type === 'source'\n                            ? state.linking.potentialId\n                            : state.linking.elementId,\n                }\n\n                elements = [...elements, link]\n            }\n\n            return {\n                elements,\n                linking: {\n                    isLinking: false,\n                    accepts: [],\n                    type: 'source',\n                    anchor: [0, 0],\n                    position: [0, 0],\n                    previous: [0, 0],\n                },\n            }\n        }),\n    link: (sourceId: ElementId, targetId: ElementId) =>\n        set(state => {\n            const link: Link = {\n                id: generateElementId(),\n                elementType: 'link',\n                sourceId,\n                targetId,\n            }\n\n            return {\n                elements: [...state.elements, link],\n            }\n        }),\n    unlink: (sourceId: ElementId, targetId: ElementId) =>\n        set(state => {\n            return {\n                elements: state.elements.filter(element => {\n                    return (\n                        !isLink(element) ||\n                        element.sourceId !== sourceId ||\n                        element.targetId !== targetId\n                    )\n                }),\n            }\n        }),\n}))\n\nconst settingsSelector = (state: State) => state.settings\nexport const useSettings = () => useStore(settingsSelector)\n\nconst loadGraphSelector = (state: State) => state.loadGraph\nexport const useLoadGraph = () => useStore(loadGraphSelector)\n\nconst createNodeSelector = (state: State) => state.createNode\nexport const useCreateNode = () => useStore(createNodeSelector)\n\nconst updateNodeSelector = (state: State) => state.updateNode\nexport const useUpdateNode = () => useStore(updateNodeSelector)\n\nconst setSelectedNodeIdsSelector = (state: State) => state.setSelectedNodeIds\nexport const useSetSelectedNodeIds = () => useStore(setSelectedNodeIdsSelector)\n\nconst linkingSelector = (state: State) => state.linking\nexport const useLinking = () => useStore(linkingSelector)\n\nexport const useLinkingActions = () =>\n    useStore(\n        state => ({\n            startLinking: state.startLinking,\n            updateLinking: state.updateLinking,\n            setLinkingPotentialPort: state.setLinkingPotentialPort,\n            resetLinkingPotentialPort: state.resetLinkingPotentialPort,\n        }),\n        shallow\n    )\n\nconst linkSelector = (state: State) => state.link\nexport const useLink = () => useStore(linkSelector)\n\nconst unlinkSelector = (state: State) => state.unlink\nexport const useUnlink = () => useStore(unlinkSelector)\n\nconst serializeProperties = (properties: ResolvedProperty[]) => {\n    const props: any = {}\n    properties.forEach(property => {\n        props[property.name] = {\n            id: property.id,\n            data: registry.getPropertyService(property.type).serialize(property),\n        }\n    })\n\n    return props\n}\n\nexport const serializeElements = (\n    nodes: ResolvedNode[],\n    links: ResolvedLink[]\n): SerializedElements => {\n    return {\n        nodes: nodes.map(node => {\n            return {\n                id: node.id,\n                type: node.type,\n                name: node.name,\n                x: node.x,\n                y: node.y,\n                width: node.width,\n                data: serializeProperties(node.properties),\n            }\n        }),\n        links: links.map(link => {\n            return {\n                id: link.id,\n                sourceId: link.source.id,\n                targetId: link.target.id,\n            }\n        }),\n    }\n}\n\nconst resolveGraph = (elements: Element[]) => {\n    const resolvedNodes: Record<ElementId, ResolvedNode> = {}\n    const propertiesByNodeId: Record<ElementId, ElementId[]> = {}\n    const resolvedProperties: Record<ElementId, ResolvedProperty> = {}\n    const resolvedLinks: Record<ElementId, ResolvedLink> = {}\n\n    const nodes = elements.filter(isNode)\n    const properties = elements.filter(isProperty)\n    const links = elements.filter(isLink)\n\n    // first pass to resolve nodes without resolving\n    // their properties.\n    nodes.forEach(node => {\n        propertiesByNodeId[node.id] = node.properties\n\n        resolvedNodes[node.id] = {\n            ...node,\n            isSelected: false,\n            properties: [],\n        }\n    })\n\n    // first pass to resolve properties without resolving\n    // dependencies.\n    properties.forEach(property => {\n        const propertyNode = resolvedNodes[property.nodeId]\n        if (!propertyNode) {\n            throw new Error(`unable to find property node: ${property.nodeId}`)\n        }\n\n        resolvedProperties[property.id] = {\n            ...property,\n            node: propertyNode,\n            dependencies: [],\n        }\n    })\n\n    // assign resolved properties to nodes.\n    Object.values(resolvedNodes).forEach(node => {\n        if (node.id in propertiesByNodeId) {\n            propertiesByNodeId[node.id].forEach(propertyId => {\n                const property = resolvedProperties[propertyId]\n                if (!property) {\n                    throw new Error(`unable to find property: ${propertyId}`)\n                }\n\n                node.properties.push(property)\n            })\n        }\n    })\n\n    links.forEach(link => {\n        const source: ResolvedNode | ResolvedProperty =\n            resolvedNodes[link.sourceId] || resolvedProperties[link.sourceId]\n        if (!source) {\n            throw new Error(`unable to find link source: ${link.sourceId}`)\n        }\n\n        const target: ResolvedNode | ResolvedProperty =\n            resolvedNodes[link.targetId] || resolvedProperties[link.targetId]\n        if (!target) {\n            throw new Error(`unable to find link target: ${link.sourceId}`)\n        }\n\n        // @ts-ignore\n        if (target.elementType === 'property') {\n            // @ts-ignore\n            target.input = source\n        }\n\n        resolvedLinks[link.id] = {\n            ...link,\n            source,\n            target,\n        }\n    })\n\n    return {\n        nodes: Object.values(resolvedNodes),\n        properties: Object.values(resolvedProperties),\n        links: Object.values(resolvedLinks),\n    }\n}\n\nexport const useGraph = () => {\n    const { elements, selectedNodeIds } = useStore()\n\n    const graph = useMemo(() => resolveGraph(elements), [elements])\n\n    useMemo(() => {\n        graph.nodes.forEach(node => {\n            node.isSelected = selectedNodeIds.includes(node.id)\n        })\n    }, [graph, selectedNodeIds])\n\n    return graph\n}\n","import { ElementId, State } from './types'\n\nexport const findLinkingPotentialPort = (\n    linking: State['linking'],\n    elements: State['elements'],\n    elementId: ElementId,\n    type: 'source' | 'target'\n) => {\n    if (\n        // no current linking\n        !linking.isLinking ||\n        // source & target are identical\n        elementId === linking.elementId ||\n        // both are sources or targets\n        linking.type === type ||\n        // no element type so we cannot define\n        // eligible elements\n        !linking.elementType\n    )\n        return\n\n    const currentElement = elements.find(element => element.id === linking.elementId)\n    const potentialElement = elements.find(element => element.id === elementId)\n    if (!currentElement || !potentialElement) return\n\n    const source = type === 'target' ? currentElement : potentialElement\n    const target = type === 'target' ? potentialElement : currentElement\n\n    const link = elements.find(\n        element =>\n            element.elementType === 'link' &&\n            element.sourceId === source.id &&\n            element.targetId === target.id\n    )\n    if (link) return\n\n    if (!('type' in source) || !('accepts' in target)) return\n    if (target.accepts.includes(source.type)) {\n        return elementId\n    }\n}\n","import { State, isNode, Element, ElementId, Node, isProperty } from './types'\nimport { useGraph, useStore } from './store'\n\nexport const updateNodePosition = (\n    elements: Element[],\n    nodeId: ElementId | null,\n    offset: [number, number]\n): Element[] => {\n    if (nodeId === null) {\n        return elements\n    }\n\n    const node: Node | undefined = elements.find(\n        element => isNode(element) && element.id === nodeId\n    ) as any\n    if (!node) {\n        return elements\n    }\n\n    return elements.map(element => {\n        if (\n            (isNode(element) && element.id === node.id) ||\n            (isProperty(element) && node.properties.includes(element.id))\n        ) {\n            return {\n                ...element,\n                x: element.x + offset[0],\n                y: element.y + offset[1],\n            }\n        }\n\n        return element\n    })\n}\n\nconst nodesSelector = (state: State) => state.elements.filter(isNode)\nexport const useNodes = () => useStore(nodesSelector)\n\nexport const useSelectedNodes = () => {\n    const state = useStore()\n    const { nodes } = useGraph()\n\n    if (state.selectedNodeIds.length === 0) {\n        return []\n    }\n\n    return nodes.filter(node => state.selectedNodeIds.includes(node.id))\n}\n","import { memo } from 'react'\nimport styled from 'styled-components'\nimport { transparentize } from 'polished'\nimport { Property } from '../state'\nimport { PortWidget } from './PortWidget'\n\nexport const PropertyWidget = memo(({ property }: { property: Property }) => {\n    return (\n        <PropertyContainer>\n            <PropertyName>{property.name}</PropertyName>\n            {property.accepts.length > 0 && (\n                <PortWidget\n                    type=\"target\"\n                    elementId={property.id}\n                    x={property.x}\n                    y={property.y + property.height / 2}\n                />\n            )}\n            {property.hasOutput && (\n                <PortWidget\n                    type=\"source\"\n                    elementId={property.id}\n                    x={property.x + property.width}\n                    y={property.y + property.height / 2}\n                />\n            )}\n        </PropertyContainer>\n    )\n})\n\nconst PropertyContainer = styled.div`\n    position: relative;\n    height: 20px;\n    user-select: none;\n    display: flex;\n    align-items: center;\n    padding: 0 12px;\n    background-color: ${props => transparentize(0.15, props.theme.colors.nodeBackground)};\n    color: ${props => props.theme.colors.accentColor};\n    font-size: 11px;\n`\n\nconst PropertyName = styled.span`\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n","import { createElement, memo } from 'react'\nimport { ResolvedProperty } from '../state'\nimport registry from '../registry'\nimport { PropertyWidget } from './PropertyWidget'\n\nexport const PropertiesWidget = memo(({ properties }: { properties: ResolvedProperty[] }) => {\n    return (\n        <>\n            {properties.map(property => {\n                const propertyService = registry.propertyServices[property.type]\n                const hasCustomWidget = propertyService && 'widget' in propertyService\n\n                if (!hasCustomWidget) {\n                    return <PropertyWidget key={property.name} property={property} />\n                }\n\n                return createElement(propertyService.widget!, { property })\n            })}\n        </>\n    )\n})\n","import { ChangeEvent } from 'react'\nimport { PropertyService } from '../services_registry'\nimport { Input } from '../components/ui'\n\nexport type AnglePropertyOptions = {\n    name: string\n    defaultValue?: number\n    hasInput?: boolean\n    hasOutput?: boolean\n}\n\nexport type AngleProperty = {\n    value: number\n}\n\nexport const AnglePropertyService: PropertyService<\n    'property:angle',\n    AnglePropertyOptions,\n    AngleProperty,\n    number\n> = {\n    type: 'property:angle',\n    factory: ({ name, defaultValue, hasOutput = false }: AnglePropertyOptions) => {\n        return {\n            name,\n            type: 'property:angle',\n            value: defaultValue,\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    getValue: data => {\n        return data.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n        }\n    },\n    control: ({ property }) => {\n        const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            console.log(event.target.value)\n        }\n\n        return <Input type=\"number\" value={property.value} onChange={handleChange} />\n    },\n}\n","export * from './ArrayStringPropertyService'\nexport * from './types'\n","import { ChangeEvent, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { FiPlus } from 'react-icons/fi'\nimport { PropertyService } from '../services_registry'\nimport { Property, useStore } from '../state'\n\nexport type ArrayXYPropertyOptions = {\n    name: string\n    defaultValue?: {\n        x: number\n        y: number\n    }[]\n    hasOutput?: boolean\n}\n\nexport type ArrayXYProperty = {\n    value: {\n        x: number\n        y: number\n    }[]\n}\n\nconst ControlContainer = styled.div`\n    display: grid;\n    grid-template-columns: 20px auto 20px auto;\n    grid-row-gap: 6px;\n\n    input {\n        width: 52px;\n    }\n`\n\nconst ControlAddItemButton = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 5;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n\n    svg {\n        margin-right: 9px;\n    }\n`\n\nconst ArrayXYPropertyControl = ({ property }: { property: Property & ArrayXYProperty }) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (\n        itemIndex: number,\n        key: 'x' | 'y',\n        event: ChangeEvent<HTMLInputElement>\n    ) => {\n        updateProperty(property.id, {\n            value: property.value.map((item, index) => {\n                if (index !== itemIndex) {\n                    return item\n                }\n\n                return {\n                    ...item,\n                    [key]: Number(event.target.value),\n                }\n            }),\n        })\n    }\n\n    const handleAdd = () => {\n        updateProperty(property.id, {\n            value: [\n                ...property.value,\n                {\n                    x: 0,\n                    y: 0,\n                },\n            ],\n        })\n    }\n\n    return (\n        <ControlContainer>\n            {property.value.map((item, index) => {\n                return (\n                    <Fragment key={index}>\n                        x:{' '}\n                        <input\n                            type=\"number\"\n                            value={item.x}\n                            onChange={event => handleChange(index, 'x', event)}\n                            size={4}\n                        />\n                        y:{' '}\n                        <input\n                            type=\"number\"\n                            value={item.y}\n                            onChange={event => handleChange(index, 'y', event)}\n                        />\n                    </Fragment>\n                )\n            })}\n            <ControlAddItemButton onClick={handleAdd}>\n                <FiPlus /> Add item\n            </ControlAddItemButton>\n        </ControlContainer>\n    )\n}\n\nexport const ArrayXYPropertyService: PropertyService<\n    'property:array_xy',\n    ArrayXYPropertyOptions,\n    ArrayXYProperty,\n    {\n        x: number\n        y: number\n    }[]\n> = {\n    type: 'property:array_xy',\n    factory: ({ name, defaultValue = [], hasOutput = false }: ArrayXYPropertyOptions) => {\n        return {\n            name,\n            type: 'property:array_xy',\n            value: defaultValue,\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n        }\n    },\n    getValue: data => {\n        return data.value\n    },\n    control: ArrayXYPropertyControl,\n}\n","import { PropertyService } from '../services_registry'\nimport {\n    ChoicesPropertyOptions,\n    ChoiceProperty,\n    ChoicesPropertyService,\n    ChoicesPropertyControl,\n} from './ChoicesPropertyService'\n\nconst blendModeChoices = [\n    { label: 'normal', value: 'normal' },\n    { label: 'multiply', value: 'multiply' },\n    { label: 'screen', value: 'screen' },\n    { label: 'overlay', value: 'overlay' },\n    { label: 'darken', value: 'darken' },\n    { label: 'lighten', value: 'lighten' },\n    { label: 'color-dodge', value: 'color-dodge' },\n    { label: 'color-burn', value: 'color-burn' },\n    { label: 'hard-light', value: 'hard-light' },\n    { label: 'soft-light', value: 'soft-light' },\n    { label: 'difference', value: 'difference' },\n    { label: 'exclusion', value: 'exclusion' },\n    { label: 'hue', value: 'hue' },\n    { label: 'saturation', value: 'saturation' },\n    { label: 'color', value: 'color' },\n    { label: 'luminosity', value: 'luminosity' },\n]\n\nexport const BlendModePropertyService: PropertyService<\n    'property:blend_mode',\n    ChoicesPropertyOptions,\n    ChoiceProperty,\n    string | number\n> = {\n    type: 'property:blend_mode',\n    factory: ({ name, defaultValue, hasOutput = false }: any) =>\n        ChoicesPropertyService.factory({\n            name,\n            defaultValue,\n            hasOutput,\n            choices: blendModeChoices,\n        }),\n    serialize: ChoicesPropertyService.serialize,\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n            choices: blendModeChoices,\n        }\n    },\n    getValue: ChoicesPropertyService.getValue,\n    control: ChoicesPropertyControl,\n}\n","import { PropertyService } from '../services_registry'\nimport { createElement } from 'react'\n\nexport type CustomPropertyOptions = {\n    name: string\n    renderer: any\n}\n\nexport const CustomPropertyService: PropertyService<\n    'property:custom',\n    CustomPropertyOptions,\n    any,\n    undefined\n> = {\n    type: 'property:custom',\n    factory: ({ name, renderer }: CustomPropertyOptions) => {\n        return {\n            name,\n            renderer,\n            type: 'property:custom',\n            hasOutput: false,\n        }\n    },\n    serialize: () => undefined,\n    hydrate: property => property,\n    getValue: () => undefined,\n    widget: ({ property }) => {\n        return createElement(property.renderer, { property })\n    },\n}\n","export * from './MatrixPropertyService'\nexport * from './types'\n","export * from './NumberPropertyService'\nexport * from './types'\n","import { PropertyService } from '../services_registry'\n\nexport type RefPropertyOptions = {\n    name: string\n    accepts: string[]\n    hasOutput?: boolean\n}\n\nexport const RefPropertyService: PropertyService<'property:ref', RefPropertyOptions, any, any> = {\n    type: 'property:ref',\n    factory: ({ name, hasOutput = false }: RefPropertyOptions) => {\n        return {\n            name,\n            type: 'property:ref',\n            accepts: [],\n            hasOutput,\n        }\n    },\n    // refs are managed by links\n    serialize: () => undefined,\n    hydrate: property => property,\n    getValue: (property, registry) => {\n        return registry.resolvePropertyValue(property, undefined)\n    },\n}\n","import { PropertyService } from '../services_registry'\nimport { ChangeEvent } from 'react'\nimport { Property, useStore } from '../state'\nimport { Input } from '../components/ui'\n\nexport type TextPropertyOptions = {\n    name: string\n    defaultValue?: string\n    hasOutput?: boolean\n}\n\nexport type TextProperty = {\n    value: string\n}\n\nconst TextPropertyControl = ({ property }: { property: Property & TextProperty }) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        updateProperty(property.id, {\n            value: event.target.value,\n        })\n    }\n\n    return <Input type=\"text\" value={property.value} onChange={handleChange} />\n}\n\nexport const TextPropertyService: PropertyService<\n    'property:text',\n    TextPropertyOptions,\n    TextProperty,\n    string\n> = {\n    type: 'property:text',\n    factory: ({ name, defaultValue = '', hasOutput = false }: TextPropertyOptions) => {\n        return {\n            name,\n            type: 'property:text',\n            value: defaultValue,\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n        }\n    },\n    getValue: data => {\n        return data.value\n    },\n    control: TextPropertyControl,\n}\n","import { ChangeEvent, Fragment, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { FiPlus } from 'react-icons/fi'\nimport { FaTimes } from 'react-icons/fa'\nimport { Property, useStore } from '../../state'\nimport { Input } from '../../components/ui'\nimport { ArrayStringProperty } from './types'\n\nexport const ArrayStringPropertyControl = ({\n    property,\n}: {\n    property: Property & ArrayStringProperty\n}) => {\n    const { updateProperty } = useStore()\n\n    const setValue = useCallback(\n        (value: string[]) => {\n            updateProperty(property.id, { value })\n        },\n        [updateProperty, property.id]\n    )\n\n    const handleChange = (itemIndex: number, event: ChangeEvent<HTMLInputElement>) => {\n        setValue(\n            property.value.map((item, index) => {\n                if (index !== itemIndex) return item\n\n                return event.target.value\n            })\n        )\n    }\n\n    const handleAdd = () => {\n        setValue([...property.value, ''])\n    }\n\n    const handleRemove = (index: number) => {\n        setValue(property.value.filter((_, i) => i !== index))\n    }\n\n    return (\n        <>\n            <Grid>\n                {property.value.map((item, index) => {\n                    return (\n                        <Fragment key={index}>\n                            <span>[{index}]</span>\n                            <Input\n                                type=\"text\"\n                                value={item}\n                                onChange={event => handleChange(index, event)}\n                                size={4}\n                            />\n                            <RemoveButton\n                                onClick={() => {\n                                    handleRemove(index)\n                                }}\n                            >\n                                <FaTimes />\n                            </RemoveButton>\n                        </Fragment>\n                    )\n                })}\n                <AddItemButton onClick={handleAdd}>\n                    <FiPlus /> Add item\n                </AddItemButton>\n            </Grid>\n        </>\n    )\n}\n\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: 28px 1fr 20px;\n    grid-column-gap: 6px;\n    grid-row-gap: 6px;\n    margin-bottom: 9px;\n    align-items: center;\n    font-size: 12px;\n`\n\nconst RemoveButton = styled.span`\n    width: 20px;\n    height: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 12px;\n    border-radius: 2px;\n    cursor: pointer;\n    color: #777777;\n\n    &:hover {\n        background-color: #333333;\n        color: ${props => props.theme.colors.accentColor};\n    }\n`\n\nconst AddItemButton = styled.div`\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    grid-column-start: 2;\n\n    svg {\n        margin-right: 9px;\n    }\n`\n","import { PropertyService } from '../../services_registry'\nimport { ArrayStringPropertyOptions, ArrayStringProperty } from './types'\nimport { ArrayStringPropertyControl } from './ArrayStringPropertyControl'\n\nexport const ArrayStringPropertyService: PropertyService<\n    'property:array_string',\n    ArrayStringPropertyOptions,\n    ArrayStringProperty,\n    string[]\n> = {\n    type: 'property:array_string',\n    factory: ({ name, defaultValue = [], hasOutput = false }: ArrayStringPropertyOptions) => {\n        return {\n            name,\n            type: 'property:array_string',\n            value: defaultValue,\n            accepts: [],\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data || [],\n        }\n    },\n    getValue: data => {\n        return data.value\n    },\n    control: ArrayStringPropertyControl,\n}\n","import { ChangeEvent, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { Property, useStore } from '../../state'\nimport { Input } from '../../components/ui'\nimport { MatrixProperty } from './types'\n\nexport const MatrixPropertyControl = ({ property }: { property: Property & MatrixProperty }) => {\n    const { updateProperty } = useStore()\n\n    const value = property.value\n\n    let xSize = 0\n    let ySize = 0\n    if (value.length > 0) {\n        ySize = value.length\n        if (Array.isArray(value[0])) {\n            xSize = value[0].length\n        }\n    }\n\n    const setValue = (valueUpdate: number[][]) => {\n        updateProperty(property.id, {\n            value: valueUpdate,\n        })\n    }\n\n    const handleSizeChange = (newXSize: number, newYSize: number) => {\n        let newValue = value.slice(0, newYSize)\n        for (let newRowIndex = 0; newRowIndex < newYSize - ySize; newRowIndex++) {\n            newValue.push(Array.from({ length: newXSize }).fill(0) as number[])\n        }\n        newValue = newValue.map(row => {\n            const newRow = row.slice(0, newXSize)\n            for (let newColumnIndex = 0; newColumnIndex < newXSize - xSize; newColumnIndex++) {\n                newRow.push(0)\n            }\n\n            return newRow\n        })\n\n        setValue(newValue)\n    }\n\n    const handleValueChange = (\n        targetRowIndex: number,\n        targetColumnIndex: number,\n        event: ChangeEvent<HTMLInputElement>\n    ) => {\n        setValue(\n            value.map((row, rowIndex) => {\n                if (targetRowIndex !== rowIndex) {\n                    return row\n                }\n\n                return row.map((cell, columnIndex) => {\n                    if (targetColumnIndex !== columnIndex) {\n                        return cell\n                    }\n\n                    return Number(event.target.value)\n                })\n            })\n        )\n    }\n\n    return (\n        <>\n            <SizeContainer>\n                x size\n                <Input\n                    type=\"number\"\n                    value={xSize}\n                    onChange={event => handleSizeChange(Number(event.target.value), ySize)}\n                />\n                y size\n                <Input\n                    type=\"number\"\n                    value={ySize}\n                    onChange={event => handleSizeChange(xSize, Number(event.target.value))}\n                />\n            </SizeContainer>\n            <MatrixWrapper>\n                <MatrixContainer columns={xSize} rows={ySize}>\n                    {value.map((row, rowIndex) => {\n                        return (\n                            <Fragment key={rowIndex}>\n                                {row.map((cell, columnIndex) => (\n                                    <Input\n                                        key={columnIndex}\n                                        type=\"number\"\n                                        value={cell}\n                                        onChange={event =>\n                                            handleValueChange(rowIndex, columnIndex, event)\n                                        }\n                                    />\n                                ))}\n                            </Fragment>\n                        )\n                    })}\n                </MatrixContainer>\n            </MatrixWrapper>\n        </>\n    )\n}\n\nconst SizeContainer = styled.div`\n    display: grid;\n    grid-template-columns: minmax(0, 1fr) minmax(0, 2fr) minmax(0, 1fr) minmax(0, 2fr);\n    grid-column-gap: 9px;\n    align-items: center;\n    font-size: 12px;\n    white-space: nowrap;\n    margin-bottom: 9px;\n`\n\nconst MatrixWrapper = styled.div`\n    overflow-x: scroll;\n`\n\nconst MatrixContainer = styled.div<{\n    columns: number\n    rows: number\n}>`\n    display: grid;\n    grid-template-columns: repeat(${props => props.columns}, minmax(50px, 1fr));\n    grid-template-rows: repeat(${props => props.rows}, 1fr);\n    grid-column-gap: 4px;\n    grid-row-gap: 4px;\n`\n","import { PropertyService } from '../../services_registry'\nimport { MatrixPropertyOptions, MatrixProperty } from './types'\nimport { MatrixPropertyControl } from './MatrixPropertyControl'\n\nexport const MatrixPropertyService: PropertyService<\n    'property:matrix',\n    MatrixPropertyOptions,\n    MatrixProperty,\n    number[][]\n> = {\n    type: 'property:matrix',\n    factory: ({ name, defaultValue = [], hasOutput = false }: MatrixPropertyOptions) => {\n        return {\n            name,\n            type: 'property:matrix',\n            value: defaultValue,\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n        }\n    },\n    getValue: data => {\n        return data.value\n    },\n    control: MatrixPropertyControl,\n}\n","import { PropertyService } from '../../services_registry'\nimport { NumberPropertyOptions, NumberProperty } from './types'\nimport { NumberPropertyControl } from './NumberPropertyControl'\n\nexport const NumberPropertyService: PropertyService<\n    'property:number',\n    NumberPropertyOptions,\n    NumberProperty,\n    number\n> = {\n    type: 'property:number',\n    factory: ({\n        name,\n        defaultValue = 0,\n        hasOutput = false,\n        options: partialOptions = {},\n    }: NumberPropertyOptions) => {\n        const options = {\n            controlType: partialOptions.controlType || 'number',\n            min: partialOptions.min !== undefined ? partialOptions.min : undefined,\n            max: partialOptions.max !== undefined ? partialOptions.max : undefined,\n            step: partialOptions.step || 1,\n        }\n\n        return {\n            name,\n            type: 'property:number',\n            value: defaultValue,\n            hasOutput,\n            options,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n        }\n    },\n    getValue: (property: any, registry) => {\n        return registry.resolvePropertyValue(property, property.value)\n    },\n    control: NumberPropertyControl,\n}\n","import { ChangeEvent } from 'react'\nimport { Property, useStore } from '../../state'\nimport { Input } from '../../components/ui'\nimport { NumberProperty, NumberPropertyOptions } from './types'\n\nexport const NumberPropertyControl = ({ property }: { property: Property & NumberProperty }) => {\n    const { updateProperty } = useStore()\n\n    const options: NumberPropertyOptions['options'] = (property as any).options\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        updateProperty(property.id, {\n            value: Number(event.target.value),\n        })\n    }\n\n    if (options!.controlType === 'number') {\n        return (\n            <Input\n                type=\"number\"\n                value={property.value}\n                onChange={handleChange}\n                min={options!.min}\n                max={options!.max}\n                step={options!.step}\n            />\n        )\n    }\n\n    return (\n        <Input\n            type=\"range\"\n            value={property.value}\n            onChange={handleChange}\n            min={options!.min}\n            max={options!.max}\n            step={options!.step}\n        />\n    )\n}\n","import { groupBy, sortBy } from 'lodash'\nimport { CreateProperty, Property, ResolvedNode, ResolvedProperty } from './state'\n\nexport interface NodeService<Type extends string, Data> {\n    type: Type\n    category: string\n    description?: string\n    hasOutput: boolean\n    properties: CreateProperty[]\n    factory: (data?: Partial<Data>) => Data\n    getValue: (node: ResolvedNode, registry: ServiceRegistry) => any\n    widget?: (props: { node: ResolvedNode; registry: ServiceRegistry }) => JSX.Element\n}\n\nexport interface PropertyService<\n    Type extends string,\n    Options,\n    PropertyData = never,\n    Value = never\n> {\n    type: Type\n    factory: (options: Options) => CreateProperty\n    serialize: (property: ResolvedProperty) => any\n    hydrate: (property: Property, data: any) => Property\n    getValue: (property: PropertyData, registry: ServiceRegistry) => Value\n    widget?: (props: { property: Property & PropertyData }) => JSX.Element\n    control?: (props: { property: Property & PropertyData }) => JSX.Element\n}\n\nexport class ServiceRegistry {\n    nodeServices: Record<string, NodeService<string, any>>\n    propertyServices: Record<string, PropertyService<string, any, any, any>>\n\n    constructor() {\n        this.nodeServices = {}\n        this.propertyServices = {}\n    }\n\n    registerNodeService(nodeService: NodeService<string, any>) {\n        if (nodeService.type.indexOf('node:') !== 0) {\n            throw new Error(\n                `a node service type should use a 'node:' prefix, got: '${nodeService.type}'`\n            )\n        }\n\n        this.nodeServices[nodeService.type] = nodeService\n\n        return this\n    }\n\n    getNodeService(nodeType: string): NodeService<string, any> {\n        const nodeService = this.nodeServices[nodeType]\n        if (!nodeService) {\n            throw new Error(`no node service defined for: ${nodeType}`)\n        }\n\n        return nodeService\n    }\n\n    getNodeServiceCategories() {\n        const grouped = Object.entries(groupBy(this.nodeServices, 'category'))\n        const sorted = sortBy(grouped, group => group[0])\n\n        return sorted.map(group => ({\n            category: group[0],\n            types: sortBy(group[1], 'type'),\n        }))\n    }\n\n    registerPropertyService(propertyService: PropertyService<any, any, any, any>) {\n        if (propertyService.type.indexOf('property:') !== 0) {\n            throw new Error(\n                `a property service type should use a 'property:' prefix, got: '${propertyService.type}'`\n            )\n        }\n\n        this.propertyServices[propertyService.type] = propertyService\n\n        return this\n    }\n\n    getPropertyService(propertyType: string): PropertyService<any, any, any, any> {\n        const propertyService = this.propertyServices[propertyType]\n        if (!propertyService) {\n            throw new Error(`no property service defined for: ${propertyType}`)\n        }\n\n        return propertyService\n    }\n\n    resolvePropertyValue(property: ResolvedProperty, ownValue?: any) {\n        const { input } = property\n        if (!input) {\n            return ownValue\n        }\n\n        if (input.elementType === 'property') {\n            return this.getPropertyService(input.type).getValue(input, this)\n        }\n\n        if (input.elementType === 'node') {\n            return this.getNodeService(input.type).getValue(input, this)\n        }\n    }\n}\n","import { AreaBump } from '@nivo/bump'\nimport { NodeService } from '../services_registry'\n\nexport interface AreaBumpNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: any\n    spacing: number\n    xPadding: number\n    colors?: any\n    blendMode?: string\n    borderColor?: any\n    axisTop?: any\n    axisBottom?: any\n}\n\nexport const AreaBumpNodeService: NodeService<'node:area_bump', AreaBumpNodeData> = {\n    type: 'node:area_bump',\n    category: 'charts',\n    description: `An AreaBump chart from @nivo/bump package.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:ref',\n            name: 'data',\n            accepts: ['node:series_xy'],\n        },\n        {\n            type: 'property:number',\n            name: 'width',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            name: 'height',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:ref',\n            name: 'margin',\n            accepts: ['node:margin'],\n        },\n        {\n            type: 'property:number',\n            name: 'spacing',\n            accepts: ['property:number'],\n        },\n        {\n            type: 'property:number',\n            name: 'xPadding',\n            accepts: ['property:number'],\n        },\n        {\n            type: 'property:ref',\n            name: 'theme',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            type: 'property:ref',\n            name: 'colors',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            type: 'property:blend_mode',\n            name: 'blendMode',\n            accepts: ['node:blend_mode'],\n        },\n        {\n            type: 'property:ref',\n            name: 'borderColor',\n            accepts: [],\n        },\n        {\n            type: 'property:ref',\n            name: 'axisTop',\n            accepts: ['node:axis'],\n        },\n        {\n            type: 'property:ref',\n            name: 'axisBottom',\n            accepts: ['node:axis'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n            spacing: data?.spacing ?? 3,\n            xPadding: data?.xPadding ?? 0.6,\n        }\n    },\n    getValue: ({ properties }, registry) => {\n        const value: any = {}\n        properties.forEach(property => {\n            value[property.name] = registry\n                .getPropertyService(property.type)\n                .getValue(property, registry)\n        })\n\n        return <AreaBump {...value} isInteractive={false} />\n    },\n}\n","import { keyBy } from 'lodash'\nimport { NodeService } from '../services_registry'\n\nexport interface AxisNodeData {\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    legend?: string\n    legendOffset: number\n}\n\nexport const AxisNodeService: NodeService<'node:axis', AxisNodeData> = {\n    type: 'node:axis',\n    category: 'axis_grid',\n    description: `X or Y axis to be used in various chart types.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:number',\n            name: 'tickSize',\n            accepts: ['property:number'],\n        },\n        {\n            type: 'property:number',\n            name: 'tickPadding',\n            accepts: ['property:number'],\n        },\n        {\n            type: 'property:angle',\n            name: 'tickRotation',\n            accepts: ['property:angle'],\n        },\n        {\n            type: 'property:text',\n            name: 'legend',\n            accepts: ['property:text'],\n        },\n        {\n            type: 'property:number',\n            name: 'legendOffset',\n            accepts: ['property:number'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            tickSize: data?.tickSize ?? 5,\n            tickPadding: data?.tickPadding ?? 5,\n            tickRotation: data?.tickRotation ?? 0,\n            legend: data?.legend,\n            legendOffset: data?.legendOffset ?? 0,\n        }\n    },\n    getValue: ({ properties }) => {\n        const propertyValues: any = keyBy(properties, 'name')\n\n        const nodeValue: any = {\n            tickSize: propertyValues.tickSize.value,\n            tickPadding: propertyValues.tickPadding.value,\n            tickRotation: propertyValues.tickRotation.value,\n            legendOffset: propertyValues.legendOffset.value,\n        }\n\n        if (propertyValues.legend.value) {\n            nodeValue.legend = propertyValues.legend.value\n        }\n\n        return nodeValue\n    },\n}\n","import { NodeService } from '../services_registry'\n\nexport interface BlendModeNodeData {\n    blendMode: string\n}\n\nexport const BlendModeNodeService: NodeService<'node:blend_mode', BlendModeNodeData> = {\n    type: 'node:blend_mode',\n    category: 'colors',\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:blend_mode',\n            name: 'blendMode',\n            accepts: ['property:blend_mode'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            blendMode: data?.blendMode ?? 'normal',\n        }\n    },\n    getValue: node => {\n        return (node.properties[0] as any).value\n    },\n}\n","import { ResolvedNode } from '../state'\nimport { NodeService, ServiceRegistry } from '../services_registry'\nimport { PropertiesWidget } from '../components/PropertiesWidget'\n\nconst CanvasNodeWidget = ({\n    node,\n    registry,\n}: {\n    node: ResolvedNode\n    registry: ServiceRegistry\n}) => {\n    const props: any = {}\n    node.properties.forEach(property => {\n        props[property.name] = registry\n            .getPropertyService(property.type)\n            .getValue(property, registry)\n    })\n\n    return (\n        <>\n            <PropertiesWidget properties={node.properties} />\n            <div\n                style={{\n                    width: props.width,\n                    height: props.height,\n                    backgroundColor: '#000000',\n                    overflow: 'hidden',\n                }}\n            >\n                {props.content}\n            </div>\n        </>\n    )\n}\n\nexport interface CanvasNodeData {\n    content?: any\n    width: number\n    height: number\n}\n\nexport const CanvasNodeService: NodeService<'node:canvas', CanvasNodeData> = {\n    type: 'node:canvas',\n    category: 'render',\n    description: `A canvas to render a React node.`,\n    hasOutput: false,\n    properties: [\n        {\n            type: 'property:ref',\n            name: 'content',\n            accepts: ['node:chord', 'node:line', 'node:scatterplot'],\n        },\n        {\n            type: 'property:number',\n            name: 'width',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            name: 'height',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            content: undefined,\n            width: data?.width ?? 300,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: () => ({}),\n    widget: CanvasNodeWidget,\n}\n","import { Chord } from '@nivo/chord'\nimport { NodeService } from '../services_registry'\n\nexport interface ChordNodeData {\n    matrix?: any\n    keys?: any\n    width: number\n    height: number\n    margin?: any\n    innerRadiusRatio: number\n    innerRadiusOffset: number\n    theme?: any\n    colors?: any\n}\n\nexport const ChordNodeService: NodeService<'node:chord', ChordNodeData> = {\n    type: 'node:chord',\n    category: 'charts',\n    description: `An Chord diagram from @nivo/chord package.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:ref',\n            name: 'matrix',\n            accepts: ['node:matrix'],\n        },\n        {\n            type: 'property:array_string',\n            name: 'keys',\n            accepts: ['property:array_string'],\n        },\n        {\n            type: 'property:number',\n            name: 'width',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            name: 'height',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:ref',\n            name: 'margin',\n            accepts: ['node:margin'],\n        },\n        {\n            type: 'property:number',\n            name: 'innerRadiusRatio',\n            accepts: ['property:number'],\n            options: {\n                controlType: 'range',\n                min: 0,\n                max: 1,\n                step: 0.01,\n            },\n        } as any,\n        {\n            type: 'property:number',\n            name: 'innerRadiusOffset',\n            accepts: ['property:number'],\n            options: {\n                controlType: 'range',\n                min: 0,\n                max: 1,\n                step: 0.01,\n            },\n        } as any,\n        {\n            type: 'property:ref',\n            name: 'theme',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            type: 'property:ref',\n            name: 'colors',\n            accepts: ['node:color_scheme'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            keys: data?.keys ?? [],\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n            innerRadiusRatio: data?.innerRadiusRatio ?? 0.9,\n            innerRadiusOffset: data?.innerRadiusOffset ?? 0,\n        }\n    },\n    getValue: ({ properties }, registry) => {\n        const value: any = {}\n        properties.forEach(property => {\n            value[property.name] = registry\n                .getPropertyService(property.type)\n                .getValue(property, registry)\n        })\n\n        // check if the chart can be rendered\n        if (!Array.isArray(value.matrix) || !Array.isArray(value.keys)) {\n            return <div />\n        }\n\n        return <Chord {...value} isInteractive={true} />\n    },\n}\n","import { NodeService } from '../services_registry'\n\nconst schemeChoices = [\n    { label: 'nivo', value: 'nivo' },\n    { label: 'Category 10', value: 'category10' },\n    { label: 'Accent', value: 'accent' },\n    { label: 'Dark 2', value: 'dark2' },\n    { label: 'Paired', value: 'paired' },\n    { label: 'Pastel 1', value: 'pastel1' },\n    { label: 'Pastel 2', value: 'pastel2' },\n    { label: 'Set 1', value: 'set1' },\n    { label: 'Set 2', value: 'set2' },\n    { label: 'Set 3', value: 'set3' },\n    { label: 'Brown - Blue Green', value: 'brown_blueGreen' },\n    { label: 'Purple Red - Green', value: 'purpleRed_green' },\n    { label: 'Pink - Yellow Green', value: 'pink_yellowGreen' },\n    { label: 'Purple - Orange', value: 'purple_orange' },\n    { label: 'Red - Blue', value: 'red_blue' },\n    { label: 'Red - Grey', value: 'red_grey' },\n    { label: 'Red - Yellow - Blue', value: 'red_yellow_blue' },\n    { label: 'Red - Yellow - Green', value: 'red_yellow_green' },\n    { label: 'Spectral', value: 'spectral' },\n]\n\nexport interface ColorSchemeNodeData {\n    scheme: string\n}\n\nexport const ColorSchemeNodeService: NodeService<'node:color_scheme', ColorSchemeNodeData> = {\n    type: 'node:color_scheme',\n    category: 'colors',\n    description: `A predefined color scheme to be used with nivo charts.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:choices',\n            name: 'scheme',\n            accepts: ['node:color_scheme'],\n            choices: schemeChoices,\n        } as any,\n    ],\n    factory: (data = {}) => {\n        return {\n            scheme: data?.scheme ?? 'nivo',\n        }\n    },\n    getValue: node => {\n        const schemeProperty = node.properties.find(property => property.name === 'scheme') as any\n\n        return {\n            scheme: schemeProperty.value,\n        }\n    },\n}\n","import { Line } from '@nivo/line'\nimport { NodeService } from '../services_registry'\n\nexport interface LineNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: number\n    colors?: any\n    axisTop?: any\n    axisRight?: any\n    axisBottom?: any\n    axisLeft?: any\n}\n\nexport const LineNodeService: NodeService<'node:line', LineNodeData> = {\n    type: 'node:line',\n    category: 'charts',\n    description: `A Line chart from @nivo/line package.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:ref',\n            name: 'data',\n        },\n        {\n            type: 'property:number',\n            name: 'width',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            name: 'height',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:ref',\n            accepts: ['node:margin'],\n            name: 'margin',\n        },\n        {\n            type: 'property:ref',\n            accepts: ['node:nivo_theme'],\n            name: 'theme',\n        },\n        {\n            type: 'property:ref',\n            name: 'colors',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            type: 'property:ref',\n            name: 'axisTop',\n            accepts: ['node:axis'],\n        },\n        {\n            type: 'property:ref',\n            name: 'axisRight',\n            accepts: ['node:axis'],\n        },\n        {\n            type: 'property:ref',\n            name: 'axisBottom',\n            accepts: ['node:axis'],\n        },\n        {\n            type: 'property:ref',\n            name: 'axisLeft',\n            accepts: ['node:axis'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: ({ properties }, registry) => {\n        const value: any = {}\n        properties.forEach(property => {\n            value[property.name] = registry\n                .getPropertyService(property.type)\n                .getValue(property, registry)\n        })\n\n        return <Line {...value} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../services_registry'\n\nexport interface MarginNodeData {\n    top: number\n    right: number\n    bottom: number\n    left: number\n}\n\nexport const MarginNodeService: NodeService<'node:margin', MarginNodeData> = {\n    type: 'node:margin',\n    category: 'dimensions',\n    description: `Top/right/bottom/left margins for charts.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:number',\n            name: 'top',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            name: 'right',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            name: 'bottom',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            name: 'left',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            top: data?.top ?? 0,\n            right: data?.right ?? 0,\n            bottom: data?.bottom ?? 0,\n            left: data?.left ?? 0,\n        }\n    },\n    getValue: ({ properties }, registry) => {\n        const value: any = {}\n        properties.forEach(property => {\n            value[property.name] = registry\n                .getPropertyService(property.type)\n                .getValue(property, registry)\n        })\n\n        return value\n    },\n}\n","import { ScatterPlot } from '@nivo/scatterplot'\nimport { NodeService } from '../services_registry'\n\nexport interface ScatterPlotNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: any\n    colors?: any\n    borderColor?: any\n    axisTop?: any\n    axisRight?: any\n    axisBottom?: any\n    axisLeft?: any\n}\n\nexport const ScatterPlotNodeService: NodeService<'node:scatterplot', ScatterPlotNodeData> = {\n    type: 'node:scatterplot',\n    category: 'charts',\n    description: `A ScatterPlot chart from @nivo/scatterplot package.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:ref',\n            name: 'data',\n        },\n        {\n            type: 'property:number',\n            name: 'width',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            name: 'height',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:ref',\n            name: 'margin',\n            accepts: ['node:margin'],\n        },\n        {\n            type: 'property:ref',\n            name: 'theme',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            type: 'property:ref',\n            name: 'colors',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            type: 'property:ref',\n            name: 'borderColor',\n        },\n        {\n            type: 'property:ref',\n            name: 'axisTop',\n            accepts: ['node:axis'],\n        },\n        {\n            type: 'property:ref',\n            name: 'axisRight',\n            accepts: ['node:axis'],\n        },\n        {\n            type: 'property:ref',\n            name: 'axisBottom',\n            accepts: ['node:axis'],\n        },\n        {\n            type: 'property:ref',\n            name: 'axisLeft',\n            accepts: ['node:axis'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: ({ properties }, registry) => {\n        const value: any = {}\n        properties.forEach(property => {\n            value[property.name] = registry\n                .getPropertyService(property.type)\n                .getValue(property, registry)\n        })\n\n        return <ScatterPlot {...value} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../services_registry'\n\nconst SeriesXYNodeWidget = () => {\n    return <div>Custom</div>\n}\n\nexport const SeriesXYNodeService: NodeService<'node:series_xy', any> = {\n    type: 'node:series_xy',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:ref',\n            name: 'serie_0',\n            accepts: ['node:serie_xy'],\n        },\n        {\n            type: 'property:ref',\n            name: 'serie_1',\n            accepts: ['node:serie_xy'],\n        },\n    ],\n    factory: () => {\n        return {}\n    },\n    widget: SeriesXYNodeWidget,\n    getValue: (node, registry) => {\n        return node.properties.map(property => {\n            const propertyService = registry.getPropertyService(property.type)\n\n            return propertyService.getValue(property, registry)\n        })\n    },\n}\n","import { keyBy } from 'lodash'\nimport { NodeService } from '../services_registry'\n\nexport interface SerieXYNodeData {\n    id: string\n    data: {\n        x: number\n        y: number\n    }[]\n}\n\nexport const SerieXYNodeService: NodeService<'node:serie_xy', SerieXYNodeData> = {\n    type: 'node:serie_xy',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:text',\n            name: 'id',\n            accepts: ['property:text'],\n        },\n        {\n            type: 'property:array_xy',\n            name: 'data',\n            accepts: ['property:array_xy'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            id: data?.id ?? '',\n            data: data?.data ?? [],\n        }\n    },\n    getValue: ({ properties }) => {\n        const propertyValues: any = keyBy(properties, 'name')\n\n        return {\n            id: propertyValues.id.value,\n            data: propertyValues.data.value,\n        }\n    },\n}\n","import { ServiceRegistry } from './services_registry'\nimport {\n    AreaBumpNodeService,\n    AxisNodeService,\n    BlendModeNodeService,\n    CanvasNodeService,\n    ChordNodeService,\n    ColorSchemeNodeService,\n    LineNodeService,\n    MarginNodeService,\n    MatrixNodeService,\n    NivoThemeNodeService,\n    ScatterPlotNodeService,\n    SerieXYNodeService,\n    SeriesXYNodeService,\n} from './node_services'\nimport {\n    AnglePropertyService,\n    ArrayStringPropertyService,\n    ArrayXYPropertyService,\n    BlendModePropertyService,\n    ChoicesPropertyService,\n    CustomPropertyService,\n    MatrixPropertyService,\n    NumberPropertyService,\n    RefPropertyService,\n    TextPropertyService,\n} from './property_services'\n\nconst servicesRegistry = new ServiceRegistry()\n\nservicesRegistry\n    .registerNodeService(AreaBumpNodeService)\n    .registerNodeService(AxisNodeService)\n    .registerNodeService(BlendModeNodeService)\n    .registerNodeService(CanvasNodeService)\n    .registerNodeService(ChordNodeService)\n    .registerNodeService(ColorSchemeNodeService)\n    .registerNodeService(LineNodeService)\n    .registerNodeService(MarginNodeService)\n    .registerNodeService(MatrixNodeService)\n    .registerNodeService(NivoThemeNodeService)\n    .registerNodeService(ScatterPlotNodeService)\n    .registerNodeService(SerieXYNodeService)\n    .registerNodeService(SeriesXYNodeService)\n\nservicesRegistry\n    .registerPropertyService(AnglePropertyService)\n    .registerPropertyService(ArrayStringPropertyService)\n    .registerPropertyService(ArrayXYPropertyService)\n    .registerPropertyService(BlendModePropertyService)\n    .registerPropertyService(ChoicesPropertyService)\n    .registerPropertyService(CustomPropertyService)\n    .registerPropertyService(MatrixPropertyService)\n    .registerPropertyService(NumberPropertyService)\n    .registerPropertyService(RefPropertyService)\n    .registerPropertyService(TextPropertyService)\n\nexport default servicesRegistry\n","import { NodeService } from '../services_registry'\n\nexport interface MatrixNodeData {\n    data: number[][]\n}\n\nexport const MatrixNodeService: NodeService<'node:matrix', MatrixNodeData> = {\n    type: 'node:matrix',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:matrix',\n            name: 'matrix',\n            accepts: ['property:matrix'],\n        },\n    ],\n    factory: data => {\n        return {\n            data: data?.data || [],\n        }\n    },\n    getValue: ({ properties }, registry) => {\n        const value: any = {}\n        properties.forEach(property => {\n            value[property.name] = registry\n                .getPropertyService(property.type)\n                .getValue(property, registry)\n        })\n\n        return value.matrix || []\n    },\n}\n","import { NodeService } from '../services_registry'\n\nexport const NivoThemeNodeService: NodeService<'node:nivo_theme', {}> = {\n    type: 'node:nivo_theme',\n    category: 'theming',\n    description: `A theme object to be used with nivo charts.`,\n    hasOutput: true,\n    properties: [],\n    factory: () => {\n        return {}\n    },\n    getValue: () => {\n        return {\n            fontFamily: `'IBM Plex Mono', monospace`,\n            fontSize: 11,\n            textColor: '#dddddd',\n            grid: {\n                line: {\n                    stroke: '#333333',\n                },\n            },\n            tooltip: {\n                container: {\n                    background: '#222222',\n                    color: 'inherit',\n                    fontSize: 'inherit',\n                    borderRadius: '2px',\n                    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.25)',\n                    padding: '5px 9px',\n                },\n            },\n        }\n    },\n}\n","import styled from 'styled-components'\n\nexport const Input = styled.input`\n    border: none;\n    padding: 3px 6px;\n    border-radius: 2px;\n    font-family: inherit;\n    background-color: ${props => props.theme.colors.inputBackground};\n    color: ${props => props.theme.colors.inputText};\n    font-size: 12px;\n    cursor: pointer;\n\n    &:focus {\n        outline: 0;\n        background-color: #bbbbbb;\n        color: #000000;\n        cursor: auto;\n    }\n`\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n    body {\n        margin: 0;\n        font-family: 'IBM Plex Mono', monospace;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        font-size: 14px;\n        color: ${props => props.theme.colors.text};\n    }\n    \n    code {\n        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n    }\n    \n    * {\n        box-sizing: border-box;\n    }\n    \n    .App {\n        position: fixed;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n`\n","import { darkTheme } from './darkTheme'\nimport { lightTheme } from './lightTheme'\n\nexport const themes = [\n    {\n        id: 'dark',\n        name: 'Dark theme',\n        theme: darkTheme,\n    },\n    {\n        id: 'light',\n        name: 'Light theme',\n        theme: lightTheme,\n    },\n]\n","import { DefaultTheme } from 'styled-components'\nimport { transparentize } from 'polished'\n\nexport const darkTheme: DefaultTheme = {\n    colors: {\n        background: '#292929',\n        mediumDepthBackground: '#111111',\n        topDepthBackground: '#000000',\n        nodeBackground: '#202020',\n        badgeBackground: '#333333',\n        inputBackground: '#333333',\n        inputText: '#eeeeee',\n        text: '#eeeeee',\n        accentColor: 'pink',\n        border: '#555555',\n        lightBorder: '#333333',\n        nodeBorder: '#111111',\n        success: '#65f7cf',\n        overlay: transparentize(0.2, '#333333'),\n    },\n}\n","import { DefaultTheme } from 'styled-components'\nimport { transparentize } from 'polished'\n\nexport const lightTheme: DefaultTheme = {\n    colors: {\n        background: '#ececec',\n        mediumDepthBackground: '#f5f3f3',\n        topDepthBackground: '#ffffff',\n        nodeBackground: '#f2f2f2',\n        badgeBackground: '#eeeeee',\n        inputBackground: '#eeeeee',\n        inputText: '#444444',\n        text: '#333333',\n        accentColor: '#1a8cc3',\n        border: '#dddddd',\n        lightBorder: '#eeeeee',\n        nodeBorder: '#cccccc',\n        success: '#0ab537',\n        overlay: transparentize(0.3, '#eeeeee'),\n    },\n}\n","import styled from 'styled-components'\nimport { useStore } from '../state'\n\nexport const AppFooter = () => {\n    const { linking } = useStore()\n\n    return (\n        <Container>\n            {linking.isLinking && (\n                <div>\n                    [{linking.type}]&nbsp;| type: {linking.elementType}&nbsp;|&nbsp;\n                    {linking.anchor[0]},{linking.anchor[1]} –&gt; {linking.position[0]},\n                    {linking.position[1]}&nbsp;| accepts: {linking.accepts.join(', ')}&nbsp;|\n                    potential ID: {linking.potentialId}\n                </div>\n            )}\n        </Container>\n    )\n}\n\nconst Container = styled.footer`\n    position: fixed;\n    display: flex;\n    align-items: center;\n    font-size: 12px;\n    left: 64px;\n    bottom: 0;\n    width: calc(100% - 364px);\n    height: 36px;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n`\n","import styled from 'styled-components'\n\nexport const AppHeader = () => {\n    return <Header>{/*<Title>nivo graph editor</Title>*/}</Header>\n}\n\nconst Header = styled.header`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 46px;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n    display: flex;\n    align-items: center;\n    padding-left: 64px;\n`\n\n/*\nconst Title = styled.h1`\n    margin: 0;\n    padding: 0;\n    font-size: 14px;\n    color: ${props => props.theme.colors.accentColor};\n    text-transform: uppercase;\n`\n*/\n","import styled from 'styled-components'\nimport { FaChevronRight, FaCheck } from 'react-icons/fa'\nimport { useStore } from '../state'\nimport { ReactNode } from 'react'\n\nconst ICON_SIZE = 24\nconst ICON_SPACING = 16\n\nexport const LinkingLayer = () => {\n    const { linking } = useStore()\n\n    if (!linking.isLinking) {\n        return null\n    }\n\n    let iconPosition: [number, number]\n    if (linking.type === 'source') {\n        iconPosition = [linking.position[0] + ICON_SPACING, linking.position[1] - ICON_SIZE / 2]\n    } else {\n        iconPosition = [\n            linking.position[0] - ICON_SIZE - ICON_SPACING,\n            linking.position[1] - ICON_SIZE / 2,\n        ]\n    }\n\n    let icon: ReactNode = <FaChevronRight />\n    if (linking.potentialId) {\n        icon = <FaCheck />\n    }\n\n    return (\n        <svg\n            style={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                pointerEvents: 'none',\n            }}\n        >\n            <Line\n                strokeLinecap=\"round\"\n                x1={linking.anchor[0]}\n                x2={linking.position[0]}\n                y1={linking.anchor[1]}\n                y2={linking.position[1]}\n            />\n            <Circle cx={linking.position[0]} cy={linking.position[1]} r={4} />\n            <foreignObject x={iconPosition[0]} y={iconPosition[1]} width={24} height={24}>\n                <Icon isValid={!!linking.potentialId}>{icon}</Icon>\n            </foreignObject>\n        </svg>\n    )\n}\n\nconst Line = styled.line`\n    stroke-width: 3px;\n    stroke: ${props => props.theme.colors.accentColor};\n`\n\nconst Circle = styled.circle`\n    fill: ${props => props.theme.colors.accentColor};\n`\n\nconst Icon = styled.div<{\n    isValid: boolean\n}>`\n    width: ${ICON_SIZE}px;\n    height: ${ICON_SIZE}px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n    color: ${props =>\n        props.isValid ? props.theme.colors.success : props.theme.colors.accentColor};\n    border: 2px solid\n        ${props => (props.isValid ? props.theme.colors.success : props.theme.colors.accentColor)};\n    border-radius: ${ICON_SIZE / 2}px;\n    font-size: 12px;\n`\n","import { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { line as d3Line, curveBasis } from 'd3-shape'\nimport { FaTimes } from 'react-icons/fa'\nimport { ResolvedLink, useStore } from '../state'\n\nconst lineGenerator = d3Line().curve(curveBasis)\n\nconst UNLINK_BUTTON_SIZE = 18\n\nexport const LinkWidget = ({ link }: { link: ResolvedLink }) => {\n    const { source, target } = link\n\n    const sourceElementType = source.elementType\n\n    const sourceX = source.x\n    const sourceY = source.y\n    const sourceWidth = source.width\n    const sourceHeight = source.height\n\n    const targetX = target.x\n    const targetY = target.y\n    const targetHeight = target.height\n\n    const [path, center] = useMemo(() => {\n        if (\n            sourceX === undefined ||\n            sourceY === undefined ||\n            sourceWidth === undefined ||\n            sourceHeight === undefined ||\n            targetX === undefined ||\n            targetY === undefined ||\n            targetHeight === undefined\n        ) {\n            return [null, null]\n        }\n\n        const sourcePosition: [number, number] = [\n            sourceX + sourceWidth,\n            sourceY + (sourceElementType === 'property' ? sourceHeight / 2 : 12),\n        ]\n        const targetPosition: [number, number] = [targetX, targetY + targetHeight / 2]\n\n        const xDistance = targetPosition[0] - sourcePosition[0]\n        const yDistance = targetPosition[1] - sourcePosition[1]\n\n        const center: [number, number] = [\n            sourcePosition[0] + xDistance / 2,\n            sourcePosition[1] + yDistance / 2,\n        ]\n\n        const xOffset = Math.max(6, Math.min(42, Math.abs(xDistance) * 0.2))\n\n        const points: [number, number][] = [sourcePosition]\n        points.push([sourcePosition[0] + xOffset, sourcePosition[1]])\n        points.push(center)\n        points.push([targetPosition[0] - xOffset, targetPosition[1]])\n        points.push(targetPosition)\n\n        return [lineGenerator(points), center]\n    }, [\n        sourceElementType,\n        sourceX,\n        sourceY,\n        sourceWidth,\n        sourceHeight,\n        targetX,\n        targetY,\n        targetHeight,\n    ])\n\n    const [isHover, setIsHover] = useState(false)\n    const handleHover = useCallback(() => {\n        setIsHover(true)\n    }, [setIsHover])\n    const handleOut = useCallback(() => {\n        setIsHover(false)\n    }, [setIsHover])\n\n    const { unlink } = useStore()\n    const sourceId = source.id\n    const targetId = target.id\n    const handleUnlink = useCallback(() => {\n        unlink(sourceId, targetId)\n    }, [unlink, sourceId, targetId])\n\n    if (!path || !center) {\n        return null\n    }\n\n    return (\n        <>\n            <Path d={path} isHover={isHover} />\n            {!isHover && <Circle cx={center[0]} cy={center[1]} r={4} />}\n            <CapturePath d={path} onMouseEnter={handleHover} onMouseLeave={handleOut} />\n            {isHover && (\n                <foreignObject\n                    x={center[0] - UNLINK_BUTTON_SIZE / 2}\n                    y={center[1] - UNLINK_BUTTON_SIZE / 2}\n                    width={UNLINK_BUTTON_SIZE}\n                    height={UNLINK_BUTTON_SIZE}\n                >\n                    <UnlinkButton\n                        onMouseEnter={handleHover}\n                        onMouseLeave={handleOut}\n                        onClick={handleUnlink}\n                    >\n                        <FaTimes />\n                    </UnlinkButton>\n                </foreignObject>\n            )}\n        </>\n    )\n}\n\nconst CapturePath = styled.path`\n    pointer-events: all;\n    fill: none;\n    stroke: rgba(255, 255, 255, 0);\n    stroke-width: 8px;\n`\n\nconst Path = styled.path<{\n    isHover: boolean\n}>`\n    fill: none;\n    stroke: ${props => props.theme.colors.accentColor};\n    stroke-width: ${props => (props.isHover ? 4 : 2)}px;\n`\n\nconst UnlinkButton = styled.div`\n    pointer-events: all;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${UNLINK_BUTTON_SIZE}px;\n    height: ${UNLINK_BUTTON_SIZE}px;\n    border-radius: ${UNLINK_BUTTON_SIZE / 2}px;\n    cursor: pointer;\n    background-color: ${props => props.theme.colors.background};\n    color: ${props => props.theme.colors.accentColor};\n    border: 2px solid ${props => props.theme.colors.accentColor};\n    font-size: 10px;\n`\n\nconst Circle = styled.circle`\n    fill: ${props => props.theme.colors.background};\n    stroke: ${props => props.theme.colors.accentColor};\n    stroke-width: 2px;\n`\n","import { ResolvedLink } from '../state'\nimport { LinkWidget } from './LinkWidget'\n\nexport const LinksLayer = ({ links }: { links: ResolvedLink[] }) => {\n    return (\n        <svg\n            style={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                pointerEvents: 'none',\n            }}\n        >\n            {links.map(link => (\n                <LinkWidget key={link.id} link={link} />\n            ))}\n        </svg>\n    )\n}\n","import {\n    ChangeEvent,\n    KeyboardEvent as ReactKeyboardEvent,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    memo,\n} from 'react'\nimport styled from 'styled-components'\nimport { MdEdit } from 'react-icons/md'\nimport { ElementId, useUpdateNode } from '../../state'\nimport { useDocumentEventListener } from '../../utils/useDocumentEventListener'\n\nexport const NodeName = memo(({ id, name: currentName }: { id: ElementId; name: string }) => {\n    const [isEditing, setIsEditing] = useState(false)\n    const [name, setName] = useState(currentName)\n    const updateNode = useUpdateNode()\n    const inputRef = useRef<HTMLInputElement | null>(null)\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current?.focus()\n        }\n    }, [isEditing, inputRef])\n\n    useEffect(() => {\n        setName(currentName)\n        setIsEditing(false)\n    }, [currentName, setName, setIsEditing])\n\n    const handleChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            setName(event.target.value)\n        },\n        [setName]\n    )\n\n    const handleEnter = (event: ReactKeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            updateNode(id, { name })\n            setIsEditing(false)\n        }\n    }\n\n    const handleEscape = useCallback(\n        (event: KeyboardEvent) => {\n            if (event.key === 'Escape') {\n                setIsEditing(false)\n            }\n        },\n        [setIsEditing]\n    )\n    useDocumentEventListener('keydown', handleEscape)\n\n    return (\n        <Container\n            onClick={() => {\n                if (!isEditing) {\n                    setIsEditing(true)\n                }\n            }}\n        >\n            {!isEditing && (\n                <>\n                    <Name>{currentName}</Name>\n                    <Icon>\n                        <MdEdit />\n                    </Icon>\n                </>\n            )}\n            {isEditing && (\n                <Input\n                    ref={inputRef}\n                    onKeyPress={handleEnter}\n                    type=\"text\"\n                    value={name}\n                    onChange={handleChange}\n                />\n            )}\n        </Container>\n    )\n})\n\nconst Icon = styled.span`\n    margin-left: 12px;\n    width: 24px;\n    height: 24px;\n    border-radius: 3px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #333333;\n    color: #999999;\n    cursor: pointer;\n    flex-shrink: 0;\n`\n\nconst Input = styled.input`\n    width: calc(100% - 32px);\n    height: 32px;\n    border: none;\n    padding: 5px 9px;\n    border-radius: 2px;\n    font-weight: 800;\n    font-family: inherit;\n    background-color: #aaaaaa;\n    font-size: 14px;\n\n    &:focus {\n        outline: 0;\n    }\n`\n\nconst Name = styled.span`\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n\nconst Container = styled.div`\n    height: 32px;\n    padding: 0;\n    margin: 0 32px 9px 0;\n    font-size: 16px;\n    font-weight: 800;\n    display: flex;\n    align-items: center;\n`\n","import { useEffect } from 'react'\n\n/**\n * This hook can be used to attach event listener to the document,\n * it will take care of removing/updating the listener if it changes,\n * and will also remove the listener when the component it's attached\n * to is unmounted.\n */\nexport const useDocumentEventListener = <K extends keyof DocumentEventMap>(\n    eventType: K,\n    listener: (this: Document, event: DocumentEventMap[K]) => any\n) => {\n    useEffect(() => {\n        document.addEventListener(eventType, listener)\n\n        return () => {\n            document.removeEventListener(eventType, listener)\n        }\n    }, [listener])\n}\n","import { createElement, useCallback, memo } from 'react'\nimport styled from 'styled-components'\nimport { FaTimes } from 'react-icons/fa'\nimport { ElementId, ResolvedProperty, useSetSelectedNodeIds, useUnlink } from '../../state'\nimport registry from '../../registry'\n\nconst Relation = memo(\n    ({\n        ownId,\n        elementId,\n        nodeId,\n        name,\n        parentName,\n    }: {\n        ownId: ElementId\n        elementId: ElementId\n        nodeId: ElementId\n        name: string\n        parentName?: string\n    }) => {\n        const setSelectedNodeIds = useSetSelectedNodeIds()\n        const unlink = useUnlink()\n\n        const goToRelation = useCallback(() => {\n            setSelectedNodeIds([nodeId])\n        }, [setSelectedNodeIds, nodeId])\n\n        const handleUnlink = useCallback(() => {\n            unlink(elementId, ownId)\n        }, [unlink, ownId, elementId])\n\n        return (\n            <RelationContainer>\n                <RelationName onClick={goToRelation}>\n                    {parentName && <span>{parentName}.</span>}\n                    {name}\n                </RelationName>\n                <UnlinkIcon onClick={handleUnlink}>\n                    <FaTimes />\n                </UnlinkIcon>\n            </RelationContainer>\n        )\n    }\n)\n\nexport const PropertyItem = memo(({ property }: { property: ResolvedProperty }) => {\n    const propertyService = registry.getPropertyService(property.type)\n\n    const hasInput = property.input !== undefined\n\n    return (\n        <Container>\n            <PropertyHeader>\n                <PropertyName>{property.name}</PropertyName>\n                {hasInput && (\n                    <Relation\n                        ownId={property.id}\n                        elementId={property.input!.id}\n                        nodeId={\n                            property.input!.elementType === 'node'\n                                ? property.input!.id\n                                : (property.input! as any).node.id\n                        }\n                        name={property.input!.name}\n                        parentName={\n                            property.input!.elementType === 'property'\n                                ? (property.input! as any).node.name\n                                : undefined\n                        }\n                    />\n                )}\n            </PropertyHeader>\n            {!hasInput && propertyService.control && (\n                <ControlContainer>\n                    {createElement(propertyService.control, { property })}\n                </ControlContainer>\n            )}\n        </Container>\n    )\n})\n\nconst Container = styled.div`\n    padding: 9px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.lightBorder};\n\n    &:last-child {\n        border-bottom: none;\n    }\n`\n\nconst PropertyHeader = styled.div`\n    display: grid;\n    grid-template-columns: 40% 60%;\n    align-items: center;\n`\n\nconst PropertyName = styled.h4`\n    margin: 0;\n    padding: 0;\n`\n\nconst RelationContainer = styled.div`\n    display: flex;\n    align-items: center;\n    height: 24px;\n    border-radius: 2px;\n    color: ${props => props.theme.colors.accentColor};\n`\n\nconst RelationName = styled.span`\n    padding: 0 6px;\n    height: 100%;\n    flex-grow: 1;\n    line-height: 24px;\n    cursor: pointer;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    background-color: ${props => props.theme.colors.badgeBackground};\n    font-weight: 600;\n    font-size: 11px;\n\n    &:hover {\n        background-color: #444444;\n    }\n`\n\nconst UnlinkIcon = styled.span`\n    width: 24px;\n    height: 24px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-shrink: 0;\n    background-color: #444444;\n    border-radius: 0 2px 2px 0;\n    font-size: 10px;\n    cursor: pointer;\n\n    &:hover {\n        background-color: #555555;\n    }\n`\n\nconst ControlContainer = styled.div`\n    margin-top: 6px;\n`\n","import { memo } from 'react'\nimport styled from 'styled-components'\nimport { MdClose } from 'react-icons/md'\nimport registry from '../../registry'\nimport { ResolvedNode, useStore } from '../../state'\nimport { NodeName } from './NodeName'\nimport { PropertyItem } from './PropertyItem'\nimport { useCallback } from 'react'\n\nexport const NodeInfoPanel = memo(({ node }: { node: ResolvedNode }) => {\n    const nodeService = registry.getNodeService(node.type)\n    const { setSelectedNodeIds } = useStore()\n    const value: any = nodeService.getValue(node, registry)\n\n    const handleClose = useCallback(() => {\n        setSelectedNodeIds([])\n    }, [setSelectedNodeIds])\n\n    return (\n        <div>\n            <Header>\n                <NodeName id={node.id} name={node.name} />\n                <Id>{node.type}</Id>\n                <Close onClick={handleClose}>\n                    <MdClose />\n                </Close>\n            </Header>\n            <Properties>\n                {node.properties.map(property => (\n                    <PropertyItem key={property.id} property={property} />\n                ))}\n            </Properties>\n            {value !== undefined && (\n                <>\n                    <NodeValueTitle>Node value</NodeValueTitle>\n                    {!value.$$typeof && <NodeValue>{JSON.stringify(value, null, '  ')}</NodeValue>}\n                    {value.$$typeof && (\n                        <NodeValue>{JSON.stringify(value.props, null, '  ')}</NodeValue>\n                    )}\n                </>\n            )}\n        </div>\n    )\n})\n\nconst Header = styled.header`\n    padding: 9px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n    position: relative;\n`\n\nconst Id = styled.div`\n    font-size: 12px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n\nconst Close = styled.span`\n    position: absolute;\n    width: 32px;\n    height: 32px;\n    top: 9px;\n    right: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    font-size: 18px;\n    color: #999999;\n\n    &:hover {\n        color: #eeeeee;\n    }\n`\n\nconst Properties = styled.div``\n\nconst NodeValueTitle = styled.h4`\n    border-top: 1px solid ${props => props.theme.colors.border};\n    padding: 6px 12px;\n    margin: 0;\n`\n\nconst NodeValue = styled.pre`\n    padding: 12px;\n    font-size: 12px;\n    margin: 0;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n`\n","import { createElement, useCallback, MouseEvent, memo } from 'react'\nimport styled from 'styled-components'\nimport { transparentize } from 'polished'\nimport { ResolvedNode, useStore } from '../state'\nimport registry from '../registry'\nimport { PropertiesWidget } from './PropertiesWidget'\nimport { PortWidget } from './PortWidget'\n\nexport const NodeWidget = memo(({ node }: { node: ResolvedNode }) => {\n    const nodeService = registry.getNodeService(node.type)\n    const hasCustomWidget = 'widget' in nodeService\n    const { setSelectedNodeIds, startDrag } = useStore()\n\n    const handleStartDrag = useCallback(\n        (event: MouseEvent) => {\n            setSelectedNodeIds([node.id])\n            startDrag(node.id, [event.clientX, event.clientY])\n        },\n        [setSelectedNodeIds, node.id, startDrag]\n    )\n\n    return (\n        <NodeContainer\n            onMouseDown={handleStartDrag}\n            isSelected={node.isSelected}\n            style={{\n                top: node.y,\n                left: node.x,\n                width: node.width,\n            }}\n        >\n            <NodeHeader>\n                <span>{node.name}</span>\n                {nodeService.hasOutput && (\n                    <PortWidget\n                        type=\"source\"\n                        elementId={node.id}\n                        x={node.x + node.width}\n                        y={node.y + 12}\n                    />\n                )}\n            </NodeHeader>\n            {!hasCustomWidget && <PropertiesWidget properties={node.properties} />}\n            {hasCustomWidget && createElement(nodeService.widget!, { node, registry })}\n        </NodeContainer>\n    )\n})\n\nconst NodeContainer = styled.div<{\n    isSelected: boolean\n}>`\n    pointer-events: all;\n    user-select: none;\n    background-color: transparent;\n    color: ${props => props.theme.colors.accentColor};\n    position: absolute;\n    box-shadow: ${props =>\n        props.isSelected\n            ? `0 0 0 2px ${props.theme.colors.accentColor}`\n            : `0 0 0 1px ${props.theme.colors.nodeBorder}`};\n    cursor: move;\n    font-size: 12px;\n\n    &:hover {\n        box-shadow: ${props =>\n            props.isSelected\n                ? `0 0 0 2px ${props.theme.colors.accentColor}`\n                : `0 0 0 1px ${props.theme.colors.accentColor}`};\n    }\n`\n\nconst NodeHeader = styled.header`\n    position: relative;\n    font-weight: 600;\n    background-color: ${props => transparentize(0.15, props.theme.colors.topDepthBackground)};\n    display: flex;\n    align-items: center;\n    height: 24px;\n    padding: 0 12px;\n\n    span {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n`\n","import styled from 'styled-components'\nimport { ResolvedNode } from '../state'\nimport { NodeWidget } from './NodeWidget'\n\nexport const NodesLayer = ({ nodes }: { nodes: ResolvedNode[] }) => {\n    return (\n        <Layer>\n            {nodes.map(node => (\n                <NodeWidget key={node.id} node={node} />\n            ))}\n        </Layer>\n    )\n}\n\nconst Layer = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n`\n","import { ReactNode, KeyboardEvent } from 'react'\nimport { createPortal } from 'react-dom'\nimport styled from 'styled-components'\n\nexport const Modal = ({\n    children,\n    maxWidth,\n    onCloseRequest,\n}: {\n    children: ReactNode\n    maxWidth?: number\n    onCloseRequest(): void\n}) => {\n    const handleKeydown = (event: KeyboardEvent) => {}\n\n    return createPortal(\n        <Container role=\"dialog\" aria-modal=\"true\" onKeyDown={handleKeydown}>\n            <Background onClick={onCloseRequest} />\n            <Content maxWidth={maxWidth}>{children}</Content>\n        </Container>,\n        document.body\n    )\n}\n\nconst Container = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: auto;\n    padding: 12px;\n`\n\nconst Background = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 1;\n    background-color: ${props => props.theme.colors.overlay};\n`\n\nconst Content = styled.div<{\n    maxWidth?: number\n}>`\n    position: relative;\n    z-index: 2;\n    width: 100%;\n    background: ${props => props.theme.colors.topDepthBackground};\n    backdrop-filter: none;\n    max-width: ${props => (props.maxWidth ? `${props.maxWidth}px` : 'none')};\n    max-height: 100%;\n    overflow-y: scroll;\n    box-shadow: 0 0 0 5px ${props => props.theme.colors.border};\n`\n\nexport const ModalTitle = styled.h2`\n    margin: 0;\n    padding: 9px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n\n    svg {\n        color: ${props => props.theme.colors.accentColor};\n        margin-right: 12px;\n    }\n`\n","import { PropsWithChildren } from 'react'\nimport styled from 'styled-components'\n\nconst Button = styled.div`\n    width: 64px;\n    height: 64px;\n    cursor: pointer;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n    color: #777777;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 22px;\n\n    &:hover {\n        background-color: #222222;\n        color: #eeeeee;\n    }\n`\n\nexport const SidebarButton = ({\n    children,\n    onClick,\n}: PropsWithChildren<{\n    onClick: () => void\n}>) => {\n    return <Button onClick={onClick}>{children}</Button>\n}\n","import { useMemo } from 'react'\nimport styled from 'styled-components'\nimport registry from '../registry'\nimport { useCreateNode } from '../state'\nimport { NodeService } from '../services_registry'\n\nconst NodeType = ({ type, onCreate }: { type: NodeService<string, any>; onCreate: () => void }) => {\n    const createNode = useCreateNode()\n\n    return (\n        <NodeTypeItem\n            onClick={() => {\n                createNode(type.type)\n                onCreate()\n            }}\n        >\n            <div>{type.type}</div>\n            {type.description && <NodeTypeDescription>{type.description}</NodeTypeDescription>}\n        </NodeTypeItem>\n    )\n}\n\nconst Category = ({\n    category,\n    onCreate,\n}: {\n    category: {\n        category: string\n        types: NodeService<string, any>[]\n    }\n    onCreate: () => void\n}) => {\n    return (\n        <div>\n            <CategoryTitle>{category.category}</CategoryTitle>\n            {category.types.map(type => (\n                <NodeType key={type.type} type={type} onCreate={onCreate} />\n            ))}\n        </div>\n    )\n}\n\nexport const NodeSelector = ({ onCreate }: { onCreate: () => void }) => {\n    const categories = useMemo(() => registry.getNodeServiceCategories(), [])\n\n    return (\n        <Container>\n            {categories.map(category => (\n                <Category key={category.category} category={category} onCreate={onCreate} />\n            ))}\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    max-height: 600px;\n    overflow-y: auto;\n`\n\nconst CategoryTitle = styled.h3`\n    padding: 9px 12px;\n    margin: 0;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n    font-size: 16px;\n    color: ${props => props.theme.colors.accentColor};\n`\n\nconst NodeTypeItem = styled.div`\n    padding: 12px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.lightBorder};\n    font-size: 14px;\n    cursor: pointer;\n    font-weight: 600;\n\n    &:last-child {\n        border-bottom: none;\n    }\n\n    &:hover {\n        background-color: ${props => props.theme.colors.mediumDepthBackground};\n    }\n`\n\nconst NodeTypeDescription = styled.div`\n    font-weight: 400;\n    font-size: 12px;\n    margin-top: 6px;\n    color: #aaaaaa;\n`\n","import { useState, memo } from 'react'\nimport { MdLibraryAdd } from 'react-icons/md'\nimport { Modal, ModalTitle } from './Modal'\nimport { SidebarButton } from './SidebarButton'\nimport { NodeSelector } from './NodeSelector'\n\nexport const AddNodeButton = memo(() => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    return (\n        <>\n            <SidebarButton\n                onClick={() => {\n                    setIsOpen(true)\n                }}\n            >\n                <MdLibraryAdd />\n            </SidebarButton>\n            {isOpen && (\n                <Modal\n                    onCloseRequest={() => {\n                        setIsOpen(false)\n                    }}\n                    maxWidth={600}\n                >\n                    <ModalTitle>\n                        <MdLibraryAdd /> Add new node\n                    </ModalTitle>\n                    <NodeSelector\n                        onCreate={() => {\n                            setIsOpen(false)\n                        }}\n                    />\n                </Modal>\n            )}\n        </>\n    )\n})\n","import { useCallback, useState, memo } from 'react'\nimport styled from 'styled-components'\nimport { MdNoteAdd } from 'react-icons/md'\nimport { useLoadGraph } from '../state'\nimport { Modal, ModalTitle } from './Modal'\nimport { SidebarButton } from './SidebarButton'\n\nexport const NewGraph = memo(() => {\n    const [isOpen, setIsOpen] = useState(false)\n    const loadGraph = useLoadGraph()\n\n    const handleNewGraph = useCallback(() => {\n        loadGraph({ nodes: [], links: [] })\n        setIsOpen(false)\n    }, [loadGraph, setIsOpen])\n\n    return (\n        <>\n            <SidebarButton\n                onClick={() => {\n                    setIsOpen(true)\n                }}\n            >\n                <MdNoteAdd />\n            </SidebarButton>\n            {isOpen && (\n                <Modal\n                    onCloseRequest={() => {\n                        setIsOpen(false)\n                    }}\n                    maxWidth={300}\n                >\n                    <ModalTitle>\n                        <MdNoteAdd /> Create new graph?\n                    </ModalTitle>\n                    <ConfirmContainer>\n                        <Button onClick={handleNewGraph}>yes</Button>\n                        <Button\n                            onClick={() => {\n                                setIsOpen(false)\n                            }}\n                        >\n                            no\n                        </Button>\n                    </ConfirmContainer>\n                </Modal>\n            )}\n        </>\n    )\n})\n\nconst ConfirmContainer = styled.div`\n    padding: 16px;\n    display: flex;\n    justify-content: center;\n`\n\nconst Button = styled.span`\n    padding: 9px 12px;\n    background-color: #000000;\n    border-radius: 2px;\n    margin-left: 12px;\n    cursor: pointer;\n    width: 80px;\n    text-align: center;\n\n    &:first-child {\n        margin-left: 0;\n    }\n`\n","import { fileOpen, fileSave } from 'browser-nativefs'\nimport { ResolvedLink, ResolvedNode, serializeElements } from './state'\n\nexport const saveAsJSON = async (nodes: ResolvedNode[], links: ResolvedLink[]) => {\n    const serialized = serializeElements(nodes, links)\n    const stringified = JSON.stringify(\n        {\n            type: 'nivo-graph',\n            version: 'beta',\n            ...serialized,\n        },\n        null,\n        2\n    )\n\n    const blob = new Blob([stringified], {\n        type: 'application/json',\n    })\n\n    const fileHandle = await fileSave(\n        blob,\n        {\n            fileName: 'graph',\n            description: 'Nivo graph',\n            extensions: ['.json'],\n        },\n        null //appState.fileHandle\n    )\n\n    return { fileHandle }\n}\n\nexport const parseFileContent = async (blob: Blob | File) => {\n    let content: string\n    if ('text' in Blob) {\n        content = await blob.text()\n    } else {\n        content = await new Promise(resolve => {\n            const reader = new FileReader()\n            reader.readAsText(blob, 'utf8')\n            reader.onloadend = () => {\n                if (reader.readyState === FileReader.DONE) {\n                    resolve(reader.result as string)\n                }\n            }\n        })\n    }\n\n    return JSON.parse(content)\n}\n\nexport const loadFromJSON = async () => {\n    const blob = await fileOpen({\n        description: 'Nivo graph files',\n        extensions: ['.json', '.nivo'],\n        mimeTypes: ['application/json'],\n    })\n\n    const content = await parseFileContent(blob)\n    if (content.type !== 'nivo-graph') {\n        throw new Error('graph file is invalid')\n    }\n\n    return content\n}\n","import { MdSave } from 'react-icons/md'\nimport { ResolvedLink, ResolvedNode } from '../state'\nimport { saveAsJSON } from '../fs'\nimport { SidebarButton } from './SidebarButton'\n\ninterface SaveProps {\n    nodes: ResolvedNode[]\n    links: ResolvedLink[]\n}\n\nexport const SaveGraph = ({ nodes, links }: SaveProps) => {\n    const handleSave = () => {\n        saveAsJSON(nodes, links)\n    }\n\n    return (\n        <SidebarButton onClick={handleSave}>\n            <MdSave />\n        </SidebarButton>\n    )\n}\n","import { MdFolderOpen } from 'react-icons/md'\nimport { loadFromJSON } from '../fs'\nimport { useStore } from '../state'\nimport { SidebarButton } from './SidebarButton'\nimport { useCallback } from 'react'\n\nexport const OpenGraph = () => {\n    const { loadGraph } = useStore()\n\n    const handleOpen = useCallback(() => {\n        loadFromJSON().then(graph => {\n            loadGraph(graph)\n        })\n    }, [loadGraph])\n\n    return (\n        <SidebarButton onClick={handleOpen}>\n            <MdFolderOpen />\n        </SidebarButton>\n    )\n}\n","import { useState } from 'react'\nimport styled from 'styled-components'\nimport { MdSettings } from 'react-icons/md'\nimport { themes } from '../theming'\nimport { SidebarButton } from './SidebarButton'\nimport { Modal, ModalTitle } from './Modal'\nimport { useStore } from '../state'\n\nexport const Settings = () => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    const { settings, setSettings } = useStore()\n\n    return (\n        <>\n            <SidebarButton\n                onClick={() => {\n                    setIsOpen(true)\n                }}\n            >\n                <MdSettings />\n            </SidebarButton>\n            {isOpen && (\n                <Modal\n                    onCloseRequest={() => {\n                        setIsOpen(false)\n                    }}\n                    maxWidth={500}\n                >\n                    <ModalTitle>\n                        <MdSettings /> Settings\n                    </ModalTitle>\n                    <Container>\n                        <span>Theme</span>\n                        <select\n                            value={settings.themeId}\n                            onChange={event => {\n                                setSettings({\n                                    themeId: event.target.value,\n                                })\n                            }}\n                        >\n                            {themes.map(theme => {\n                                return (\n                                    <option key={theme.id} value={theme.id}>\n                                        {theme.name}\n                                    </option>\n                                )\n                            })}\n                        </select>\n                    </Container>\n                </Modal>\n            )}\n        </>\n    )\n}\n\nconst Container = styled.div`\n    padding: 12px;\n    display: grid;\n    grid-template-columns: 90px 1fr;\n`\n","import styled from 'styled-components'\nimport { ResolvedLink, ResolvedNode } from '../state'\nimport { AddNodeButton } from './AddNodeButton'\nimport { NewGraph } from './NewGraph'\nimport { SaveGraph } from './SaveGraph'\nimport { OpenGraph } from './OpenGraph'\nimport { Settings } from './Settings'\n\nexport const Sidebar = ({ nodes, links }: { nodes: ResolvedNode[]; links: ResolvedLink[] }) => {\n    return (\n        <Container>\n            <AddNodeButton />\n            <SaveGraph nodes={nodes} links={links} />\n            <OpenGraph />\n            <NewGraph />\n            <Settings />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    position: fixed;\n    top: 46px;\n    left: 0;\n    width: 64px;\n    height: 100%;\n    background: ${props => props.theme.colors.topDepthBackground};\n`\n","import chordExample from './chord.json'\nimport seriesExample from './series.json'\n\nexport const examples = [\n    {\n        name: 'Chord diagram',\n        data: chordExample,\n    },\n    {\n        name: 'XY series charts',\n        data: seriesExample,\n    },\n]\n","import styled from 'styled-components'\nimport { FaExternalLinkAlt } from 'react-icons/fa'\nimport { examples } from '../examples'\nimport { useStore } from '../state'\nimport { useCallback } from 'react'\n\nconst ExampleItem = ({\n    example,\n    onLoad,\n}: {\n    example: {\n        name: string\n        data: any\n    }\n    onLoad: () => void\n}) => {\n    const { loadGraph } = useStore()\n\n    const handleLoad = useCallback(() => {\n        loadGraph(example.data)\n        onLoad()\n    }, [loadGraph, example.data, onLoad])\n\n    return (\n        <ExampleItemContainer onClick={handleLoad}>\n            {example.name}\n            <FaExternalLinkAlt />\n        </ExampleItemContainer>\n    )\n}\n\nconst ExampleItemContainer = styled.div`\n    display: flex;\n    padding: 6px 9px 6px 12px;\n    align-items: center;\n    background-color: #000000;\n    border-radius: 2px;\n    color: ${props => props.theme.colors.accentColor};\n    cursor: pointer;\n    margin: 0 12px 9px 0;\n\n    svg {\n        margin-left: 12px;\n    }\n\n    &:hover {\n        box-shadow: 0 0 0 2px pink;\n    }\n`\n\nexport const ExampleLoader = ({ onLoad }: { onLoad: () => void }) => {\n    return (\n        <Container>\n            {examples.map(example => (\n                <ExampleItem key={example.name} example={example} onLoad={onLoad} />\n            ))}\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    margin: 12px 0 3px;\n`\n","import { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, ModalTitle } from './Modal'\nimport { ExampleLoader } from './ExampleLoader'\n\nexport const Welcome = () => {\n    const [isOpen, setIsOpen] = useState(true)\n\n    const handleClose = useCallback(() => {\n        setIsOpen(false)\n    }, [setIsOpen])\n\n    return (\n        <>\n            {isOpen && (\n                <Modal onCloseRequest={handleClose} maxWidth={500}>\n                    <ModalTitle>Welcome</ModalTitle>\n                    <Message>\n                        <p>\n                            Welcome to the new nivo graph editor! This application is currently an\n                            early prototype, so things might (and will) break ¯\\_(ツ)_/¯, sorry for\n                            that.\n                        </p>\n                        <p>\n                            The motivation behind this project is to provide a way to visually\n                            create charts, without code, allowing people without too much technical\n                            background to easily use nivo charts.\n                        </p>\n                        <p>In order to get started, you can have a look at one of the example:</p>\n                        <ExampleLoader onLoad={handleClose} />\n                        <p>Otherwise, you can just start form scratch and craft your own chart.</p>\n                        <div\n                            style={{\n                                display: 'flex',\n                                justifyContent: 'center',\n                                margin: '12px 0',\n                            }}\n                        >\n                            <span\n                                onClick={handleClose}\n                                style={{\n                                    padding: '9px 12px',\n                                    backgroundColor: '#000',\n                                    borderRadius: '2px',\n                                    cursor: 'pointer',\n                                }}\n                            >\n                                Start from scratch\n                            </span>\n                        </div>\n                        <p>\n                            We hope you'll enjoy using this tool as much as we enjoy building it!\n                            &lt;3\n                        </p>\n                    </Message>\n                </Modal>\n            )}\n        </>\n    )\n}\n\nconst Message = styled.div`\n    padding: 12px 12px 0;\n    font-size: 12px;\n\n    p {\n        margin: 0 0 12px;\n    }\n`\n","import { MouseEvent, useCallback } from 'react'\nimport styled, { ThemeProvider } from 'styled-components'\nimport { useStore, useSelectedNodes, useGraph } from './state'\nimport { useCurrentTheme, GlobalStyle } from './theming'\nimport {\n    AppHeader,\n    AppFooter,\n    NodesLayer,\n    LinkingLayer,\n    LinksLayer,\n    NodeInfoPanel,\n    Sidebar,\n    Welcome,\n} from './components'\n\nexport const App = () => {\n    const store = useStore()\n    const theme = useCurrentTheme()\n    const { nodes, links } = useGraph()\n    const selectedNodes = useSelectedNodes()\n\n    const { dragging, updateDrag, stopDrag, linking, updateLinking, stopLinking } = store\n    const handleMouseMove = useCallback(\n        (event: MouseEvent) => {\n            if (dragging.isDragging) {\n                updateDrag([event.clientX, event.clientY])\n            }\n            if (linking.isLinking) {\n                updateLinking([event.clientX, event.clientY])\n            }\n        },\n        [dragging.isDragging, updateDrag, linking.isLinking, updateLinking]\n    )\n    const handleMouseOut = useCallback(\n        (event: MouseEvent) => {\n            if (dragging.isDragging) {\n                stopDrag()\n            }\n            if (linking.isLinking) {\n                stopLinking()\n            }\n        },\n        [dragging.isDragging, stopDrag, linking.isLinking, stopLinking]\n    )\n\n    return (\n        <ThemeProvider theme={theme}>\n            <GlobalStyle />\n            <AppHeader />\n            <Sidebar nodes={nodes} links={links} />\n            <Canvas\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseOut}\n                onMouseLeave={handleMouseOut}\n            >\n                <LinksLayer links={links} />\n                <NodesLayer nodes={nodes} />\n                <LinkingLayer />\n            </Canvas>\n            <InfoPanel>\n                {selectedNodes.length === 1 && <NodeInfoPanel node={selectedNodes[0]} />}\n            </InfoPanel>\n            <AppFooter />\n            <Welcome />\n        </ThemeProvider>\n    )\n}\n\nconst Canvas = styled.div`\n    position: fixed;\n    top: 46px;\n    bottom: 52px;\n    left: 64px;\n    width: calc(100% - 364px);\n    height: calc(100% - 82px);\n    background: ${props => props.theme.colors.background};\n    overflow: hidden;\n`\n\nconst InfoPanel = styled.div`\n    position: fixed;\n    top: 46px;\n    right: 0;\n    width: 300px;\n    height: 100%;\n    background: ${props => props.theme.colors.topDepthBackground};\n    overflow-y: auto;\n`\n","import { useMemo } from 'react'\nimport { useSettings } from '../state'\nimport { themes } from './themes'\n\nexport const useCurrentTheme = () => {\n    const { themeId } = useSettings()\n\n    return useMemo(() => {\n        const theme = themes.find(theme => theme.id === themeId)\n        if (!theme) {\n            throw new Error(`no theme found matching id: ${themeId}`)\n        }\n\n        return theme.theme\n    }, [themeId])\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","export * from './AnglePropertyService'\nexport * from './ArrayStringPropertyService'\nexport * from './ArrayXYPropertyService'\nexport * from './BlendModePropertyService'\nexport * from './ChoicesPropertyService'\nexport * from './CustomPropertyService'\nexport * from './MatrixPropertyService'\nexport * from './NumberPropertyService'\nexport * from './RefPropertyService'\nexport * from './TextPropertyService'\n","import { PropertyService } from '../services_registry'\nimport { useStore, Property } from '../state'\nimport { ChangeEvent } from 'react'\n\nexport type ChoiceProperty = {\n    choices: {\n        label: string\n        value: string | number\n    }[]\n    value: string | number\n}\n\nexport type ChoicesPropertyOptions = {\n    name: string\n    defaultValue?: ChoiceProperty['value']\n    choices: ChoiceProperty['choices']\n    hasOutput?: boolean\n}\n\nexport const ChoicesPropertyControl = ({ property }: { property: Property & ChoiceProperty }) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n        updateProperty(property.id, {\n            value: event.target.value,\n        })\n    }\n\n    return (\n        <select value={property.value} onChange={handleChange}>\n            {property.choices.map(choice => {\n                return (\n                    <option key={choice.value} value={choice.value}>\n                        {choice.label}\n                    </option>\n                )\n            })}\n        </select>\n    )\n}\n\nexport const ChoicesPropertyService: PropertyService<\n    'property:choices',\n    ChoicesPropertyOptions,\n    ChoiceProperty,\n    string | number\n> = {\n    type: 'property:choices',\n    factory: ({ name, choices, defaultValue, hasOutput = false }: ChoicesPropertyOptions) => {\n        return {\n            name,\n            type: 'property:choices',\n            choices,\n            value: defaultValue,\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n        }\n    },\n    getValue: data => {\n        return data.value\n    },\n    control: ChoicesPropertyControl,\n}\n"],"sourceRoot":""}