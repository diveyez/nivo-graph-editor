{"version":3,"sources":["services_registry.ts","registry.ts","components/widgets/LinkWidget.tsx","components/widgets/PortWidget.tsx","components/widgets/PropertyWidget.tsx","components/widgets/PropertiesWidget.tsx","components/widgets/NodeWidget.tsx","store/generateElementId.ts","store/types.ts","store/store.ts","store/linking.ts","store/nodes.ts","services/index.ts","theming/GlobalStyle.tsx","theming/helpers.ts","theming/themes/blueTheme.ts","theming/themes/index.ts","theming/themes/darkTheme.ts","theming/themes/lightTheme.ts","theming/hooks.ts","services/properties/index.ts","services/properties/AnglePropertyService.tsx","services/properties/BlendModePropertyService.tsx","services/properties/ChoicesPropertyService.tsx","services/properties/CustomPropertyService.tsx","services/properties/MatrixPropertyService/index.ts","services/properties/NumberPropertyService/index.ts","services/properties/LongTextPropertyService.tsx","services/properties/RefPropertyService.tsx","services/properties/TextPropertyService.tsx","services/nodes/AreaBumpNodeService/AreaBumpNodeIcon.tsx","services/nodes/AreaBumpNodeService/AreaBumpNodeService.tsx","services/nodes/AxisNodeService.ts","services/nodes/BlendModeNodeService.ts","services/nodes/CanvasNodeService.tsx","services/nodes/ChordNodeService/ChordNodeIcon.tsx","services/nodes/ChordNodeService/ChordNodeService.tsx","services/nodes/ColorSchemeNodeService.tsx","services/nodes/LineNodeService.tsx","services/nodes/MarginNodeService.tsx","services/nodes/NivoThemeNodeService.tsx","services/nodes/NoteNodeService.tsx","services/nodes/sankey/SankeyNodeIcon.tsx","services/nodes/sankey/SankeyDataNodeService.tsx","services/nodes/sankey/SankeyNodeService.tsx","services/nodes/ScatterPlotNodeService.tsx","services/nodes/SeriesXYNodeService.tsx","services/nodes/SerieXYNodeService.ts","services/nodes/MatrixNodeService.tsx","services/nodes/ValueLinksNodeService.tsx","services/properties/ArrayStringPropertyService/ArrayStringPropertyControl.tsx","services/properties/ArrayStringPropertyService/ArrayStringPropertyService.tsx","services/properties/ArrayValueLinkPropertyService/ArrayValueLinkPropertyControl.tsx","services/properties/ArrayValueLinkPropertyService/ArrayValueLinkPropertyService.tsx","services/properties/ArrayXYPropertyService/ArrayXYPropertyControl.tsx","services/properties/ArrayXYPropertyService/ArrayXYPropertyService.tsx","services/properties/MatrixPropertyService/MatrixPropertyControl.tsx","services/properties/MatrixPropertyService/MatrixPropertyService.tsx","services/properties/NumberPropertyService/NumberPropertyService.tsx","services/properties/NumberPropertyService/NumberPropertyControl.tsx","components/ui/Input.tsx","components/AppFooter.tsx","components/AppHeader.tsx","components/layers/LinkingLayer.tsx","components/layers/LinksLayer.tsx","components/layers/NodesLayer.tsx","components/NodeInfoPanel/NodeName.tsx","utils/useDocumentEventListener.ts","components/ui/ConfirmButtons.tsx","components/Modal.tsx","components/NodeInfoPanel/NodeControls.tsx","components/NodeInfoPanel/PropertyItem.tsx","components/NodeInfoPanel/NodeInfoPanel.tsx","components/NodeSelector.tsx","components/sidebar/SidebarButton.tsx","components/sidebar/AddNodeButton.tsx","components/sidebar/NewGraph.tsx","fs.ts","components/sidebar/SaveGraph.tsx","components/sidebar/OpenGraph.tsx","components/sidebar/Settings.tsx","components/sidebar/Sidebar.tsx","examples/index.ts","components/ExampleLoader.tsx","components/Welcome.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["ServiceRegistry","properties","nodes","propertyServices","nodeServices","this","nodeType","nodeService","Error","grouped","Object","entries","groupBy","sortBy","group","map","category","types","propertyType","propertyService","propertySpec","getPropertyService","type","elementType","id","generateElementId","accepts","hasOutput","data","undefined","options","create","property","ownValue","input","getValue","getNodeService","resolved","forEach","name","servicesRegistry","service","lineGenerator","d3Line","curve","curveBasis","UNLINK_BUTTON_SIZE","LinkWidget","link","useSettings","animateLinks","discreteLinks","source","target","sourceElementType","sourceX","x","sourceY","y","sourceWidth","width","sourceHeight","height","targetX","targetY","targetHeight","useMemo","sourcePosition","targetPosition","xDistance","center","xOffset","Math","max","min","abs","points","push","path","useState","isHover","setIsHover","handleHover","useCallback","handleOut","unlink","useStore","sourceId","targetId","handleUnlink","registry","Container","Path","d","animate","Circle","cx","cy","r","CapturePath","onMouseEnter","onMouseLeave","UnlinkButton","onClick","styled","g","props","theme","colors","discreteLink","getCategoryColor","flowAnimation","keyframes","css","div","background","circle","PortWidget","memo","elementId","useLinking","linkingType","isLinking","potentialId","useLinkingActions","startLinking","setLinkingPotentialPort","resetLinkingPotentialPort","handleLinking","event","stopPropagation","anchor","initial","clientX","clientY","handleMouseEnter","handleMouseLeave","onMouseDown","isHighlighted","style","left","Port","PORT_SIZE","CONTAINER_SIZE","PropertyWidget","PropertyContainer","PropertyName","length","transparentize","nodeBackground","text","span","PropertiesWidget","createElement","widget","NodeWidget","node","hasCustomWidget","setSelectedNodeIds","startDrag","handleStartDrag","NodeContainer","isSelected","transform","NodeHeader","NodeName","nodeBorder","header","topDepthBackground","uuidV4","isProperty","element","isNode","isLink","updateNodePosition","elements","nodeId","offset","find","includes","set","settings","themeId","setSettings","partialSettings","state","selectedNodeIds","createNode","newNode","replace","factory","newProperties","newProperty","createProperty","hydrate","removeNode","propertyIds","filter","nodeAndPropertyIds","updateNode","patch","updateProperty","propertyId","loadGraph","graph","links","drag","isDragging","dragging","updateDrag","position","stopDrag","linking","previous","updateLinking","currentElement","potentialElement","findLinkingPotentialPort","stopLinking","settingsSelector","setSettingsSelector","useSetSettings","loadGraphSelector","useLoadGraph","createNodeSelector","useCreateNode","updateNodeSelector","useUpdateNode","removeNodeSelector","useRemoveNode","setSelectedNodeIdsSelector","useSetSelectedNodeIds","linkingSelector","shallow","unlinkSelector","useUnlink","serializeProperties","serialize","serializeElements","useGraph","resolvedNodes","propertiesByNodeId","resolvedProperties","resolvedLinks","propertyNode","dependencies","values","resolveGraph","useSelectedNodes","GlobalStyle","createGlobalStyle","categories","accentColor","blueTheme","mediumDepthBackground","badgeBackground","inputBackground","inputText","textLight","border","lightBorder","success","overlay","axis_grid","charts","colors_theming","dimensions","render","themes","useCurrentTheme","AnglePropertyService","spec","serialized","control","value","onChange","console","log","BlendModePropertyService","ChoicesPropertyService","choices","choice","label","CustomPropertyService","renderer","TextArea","textarea","LongTextPropertyService","RefPropertyService","resolvePropertyValue","TextPropertyService","SvgIcon","xmlns","role","viewBox","fillOpacity","AreaBumpNodeService","description","icon","size","spacing","xPadding","resolvePropertyValues","isInteractive","AxisNodeService","tickSize","tickPadding","tickRotation","legend","legendOffset","BlendModeNodeService","blendMode","Icon","CanvasNodeService","content","backgroundColor","overflow","IconSvg","ChordPath","ChordArc","ChordNodeService","controlType","step","keys","innerRadiusRatio","innerRadiusOffset","Array","isArray","matrix","ColorSchemeNodeService","scheme","LineNodeService","MarginNodeService","top","right","bottom","NivoThemeNodeService","fontFamily","fontSize","textColor","grid","line","stroke","tooltip","container","color","borderRadius","boxShadow","padding","NoteContainer","NoteNodeService","Rect","strokeWidth","rect","SankeyNodeIcon","SankeyDataNodeService","propertyValues","nodeIds","SankeyNodeService","layout","align","ScatterPlotNodeService","SeriesXYNodeService","SerieXYNodeService","MatrixNodeService","ValueLinksNodeService","Grid","RemoveButton","AddItemButton","ArrayStringPropertyService","setValue","item","index","itemIndex","handleChange","_","i","handleRemove","ControlGroup","ToIcon","ControlAddItemButton","ArrayValueLinkPropertyService","key","Number","placeholder","ControlContainer","ArrayXYPropertyService","SizeContainer","MatrixWrapper","MatrixContainer","columns","rows","MatrixPropertyService","xSize","ySize","valueUpdate","handleSizeChange","newXSize","newYSize","newValue","slice","newRowIndex","from","fill","row","newRow","newColumnIndex","rowIndex","cell","columnIndex","targetRowIndex","targetColumnIndex","handleValueChange","NumberPropertyService","partialOptions","Input","AppFooter","toggleAnimateLinks","toggleDiscreteLinks","SettingItem","SettingItemButton","footer","AppHeader","Header","ICON_SIZE","LinkingLayer","iconPosition","pointerEvents","Line","strokeLinecap","x1","x2","y1","y2","isValid","LinksLayer","NodesLayer","Layer","currentName","isEditing","setIsEditing","setName","inputRef","useRef","useEffect","current","focus","eventType","listener","handleEscape","document","addEventListener","removeEventListener","Name","ref","onKeyPress","ConfirmButtons","confirmLabel","onConfirm","cancelLabel","onCancel","Button","Modal","children","maxWidth","onCloseRequest","createPortal","aria-modal","onKeyDown","Background","Content","body","ModalTitle","h2","NodeControls","isRemoving","setIsRemoving","initRemoval","cancelRemoval","handleRemoveNode","Control","Relation","ownId","parentName","goToRelation","RelationContainer","RelationName","UnlinkIcon","PropertyItem","hasInput","PropertyHeader","h4","NodeInfoPanel","handleClose","NodeTypeContainer","hasIcon","NodeTypeIcon","Id","Close","Properties","NodeValueTitle","$$typeof","NodeValue","JSON","stringify","pre","NodeType","onCreate","NodeTypeItem","NodeTypeTitle","NodeTypeDescription","Category","CategoryTitle","NodeSelector","getNodeServiceCategories","searchTerm","setSearchTerm","searchInput","handleSearchTermChange","clearSearch","filtered","indexOf","SearchBox","SearchInput","SearchIcon","hasSearchTerm","NoResult","h3","SidebarButton","AddNodeButton","isOpen","setIsOpen","handleOpen","NewGraph","handleNewGraph","saveAsJSON","a","stringified","version","blob","Blob","fileSave","fileName","extensions","fileHandle","parseFileContent","Promise","resolve","reader","FileReader","readAsText","onloadend","readyState","DONE","result","parse","loadFromJSON","fileOpen","mimeTypes","SaveGraph","OpenGraph","then","Settings","Sidebar","examples","ExampleItem","example","onLoad","handleLoad","ExampleItemContainer","ExampleLoader","Welcome","Message","display","justifyContent","margin","cursor","App","store","selectedNodes","handleMouseMove","handleMouseOut","Canvas","onMouseMove","onMouseUp","InfoPanel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.edb22cfb.chunk.js","sourcesContent":["import { groupBy, sortBy } from 'lodash'\nimport {\n    CreateProperty,\n    generateElementId,\n    Property,\n    PropertySpec,\n    ResolvedNode,\n    ResolvedProperty,\n} from './store'\nimport { NodeType, NodeServiceMap, PropertyType, PropertyServiceMap } from './registry'\n\nexport interface NodeService<Type extends NodeType = NodeType, Data = any> {\n    type: Type\n    category: string\n    description?: string\n    icon?: (props: { size: number; category: string }) => JSX.Element\n    hasOutput: boolean\n    properties: PropertySpec[]\n    factory: (data?: Partial<Data>) => Data\n    getValue: (node: ResolvedNode<Type>) => any\n    widget?: (props: { node: ResolvedNode<Type> }) => JSX.Element\n}\n\nexport interface PropertyService<\n    Type extends PropertyType = PropertyType,\n    Data = any,\n    Options = any,\n    Value = any,\n    SerializedValue = Value\n> {\n    type: Type\n    create: (propertySpec: PropertySpec<Type, Data, Options>) => PropertySpec<Type, Data, Options>\n    getValue: (property: ResolvedProperty<Type, Data, Options>) => Value\n    serialize: (property: ResolvedProperty<Type, Data, Options>) => SerializedValue\n    hydrate: (\n        property: Property<Type, Data, Options>,\n        serializedValue: SerializedValue\n    ) => Property<Type, Data, Options>\n    widget?: (props: { property: Property<Type, Data, Options> }) => JSX.Element\n    control?: (props: { property: Property<Type, Data, Options> }) => JSX.Element\n}\n\nexport class ServiceRegistry {\n    private readonly propertyServices: PropertyServiceMap\n    private readonly nodeServices: NodeServiceMap\n\n    constructor(properties: PropertyServiceMap, nodes: NodeServiceMap) {\n        this.propertyServices = properties\n        this.nodeServices = nodes\n    }\n\n    getNodeService(nodeType: NodeType): NodeServiceMap[NodeType] {\n        const nodeService = this.nodeServices[nodeType]\n        if (!nodeService) {\n            throw new Error(`no node service defined for: ${nodeType}`)\n        }\n\n        return nodeService\n    }\n\n    getNodeServiceCategories() {\n        const grouped = Object.entries(groupBy(this.nodeServices, 'category'))\n        const sorted = sortBy(grouped, group => group[0])\n\n        return sorted.map(group => ({\n            category: group[0],\n            types: sortBy(group[1], 'type'),\n        }))\n    }\n\n    getPropertyService<Type extends PropertyType = PropertyType>(\n        propertyType: Type\n    ): PropertyServiceMap[Type] {\n        const propertyService = this.propertyServices[propertyType]\n        if (!propertyService) {\n            throw new Error(`no property service defined for: ${propertyType}`)\n        }\n\n        return propertyService\n    }\n\n    createProperty(propertySpec: PropertySpec) {\n        const propertyService = this.getPropertyService(propertySpec.type)\n\n        const property: CreateProperty = {\n            elementType: 'property',\n            id: generateElementId(),\n            accepts: [],\n            hasOutput: false,\n            data: undefined,\n            options: {},\n            // @ts-ignore\n            ...propertyService.create(propertySpec),\n        }\n\n        return property\n    }\n\n    resolvePropertyValue<Type extends PropertyType = PropertyType>(\n        property: ResolvedProperty<Type>,\n        ownValue?: any\n    ) {\n        const { input } = property\n        if (!input) {\n            return ownValue\n        }\n\n        if (input.elementType === 'property') {\n            // @ts-ignore\n            return this.getPropertyService(input.type).getValue(input, this)\n        }\n\n        if (input.elementType === 'node') {\n            // @ts-ignore\n            return this.getNodeService(input.type).getValue(input, this)\n        }\n    }\n\n    resolvePropertyValues(properties: ResolvedProperty[]) {\n        const resolved: any = {}\n        properties.forEach(property => {\n            resolved[property.name] = this.getPropertyService(property.type)\n                // @ts-ignore\n                .getValue(property, this)\n        })\n\n        return resolved\n    }\n}\n","import { ServiceRegistry } from './services_registry'\nimport * as service from './services'\n\nconst propertyServiceMap = {\n    [service.AnglePropertyService.type]: service.AnglePropertyService,\n    [service.ArrayStringPropertyService.type]: service.ArrayStringPropertyService,\n    [service.ArrayValueLinkPropertyService.type]: service.ArrayValueLinkPropertyService,\n    [service.ArrayXYPropertyService.type]: service.ArrayXYPropertyService,\n    [service.ChoicesPropertyService.type]: service.ChoicesPropertyService,\n    [service.BlendModePropertyService.type]: service.BlendModePropertyService,\n    [service.CustomPropertyService.type]: service.CustomPropertyService,\n    [service.MatrixPropertyService.type]: service.MatrixPropertyService,\n    [service.NumberPropertyService.type]: service.NumberPropertyService,\n    [service.LongTextPropertyService.type]: service.LongTextPropertyService,\n    [service.RefPropertyService.type]: service.RefPropertyService,\n    [service.TextPropertyService.type]: service.TextPropertyService,\n}\nexport type PropertyServiceMap = typeof propertyServiceMap\nexport type PropertyType = keyof PropertyServiceMap\n\nconst nodeServiceMap = {\n    [service.AreaBumpNodeService.type]: service.AreaBumpNodeService,\n    [service.AxisNodeService.type]: service.AxisNodeService,\n    [service.BlendModeNodeService.type]: service.BlendModeNodeService,\n    [service.CanvasNodeService.type]: service.CanvasNodeService,\n    [service.ChordNodeService.type]: service.ChordNodeService,\n    [service.ColorSchemeNodeService.type]: service.ColorSchemeNodeService,\n    [service.LineNodeService.type]: service.LineNodeService,\n    [service.MarginNodeService.type]: service.MarginNodeService,\n    [service.MatrixNodeService.type]: service.MatrixNodeService,\n    [service.NivoThemeNodeService.type]: service.NivoThemeNodeService,\n    [service.NoteNodeService.type]: service.NoteNodeService,\n    [service.SankeyDataNodeService.type]: service.SankeyDataNodeService,\n    [service.SankeyNodeService.type]: service.SankeyNodeService,\n    [service.ScatterPlotNodeService.type]: service.ScatterPlotNodeService,\n    [service.SerieXYNodeService.type]: service.SerieXYNodeService,\n    [service.SeriesXYNodeService.type]: service.SeriesXYNodeService,\n    [service.ValueLinksNodeService.type]: service.ValueLinksNodeService,\n}\nexport type NodeServiceMap = typeof nodeServiceMap\nexport type NodeType = keyof NodeServiceMap\n\nconst servicesRegistry = new ServiceRegistry(propertyServiceMap, nodeServiceMap)\n\nexport default servicesRegistry\n","import { useCallback, useMemo, useState } from 'react'\nimport styled, { css, keyframes } from 'styled-components'\nimport { line as d3Line, curveBasis } from 'd3-shape'\nimport { FaTimes } from 'react-icons/fa'\nimport { ResolvedLink, useSettings, useStore } from '../../store'\nimport { getCategoryColor } from '../../theming'\nimport registry from '../../registry'\n\nconst lineGenerator = d3Line().curve(curveBasis)\n\nconst UNLINK_BUTTON_SIZE = 18\n\nexport const LinkWidget = ({ link }: { link: ResolvedLink }) => {\n    const { animateLinks, discreteLinks } = useSettings()\n    const { source, target } = link\n\n    const sourceElementType = source.elementType\n\n    const sourceX = source.x\n    const sourceY = source.y\n    const sourceWidth = source.width\n    const sourceHeight = source.height\n\n    const targetX = target.x\n    const targetY = target.y\n    const targetHeight = target.height\n\n    const [path, center] = useMemo(() => {\n        if (\n            sourceX === undefined ||\n            sourceY === undefined ||\n            sourceWidth === undefined ||\n            sourceHeight === undefined ||\n            targetX === undefined ||\n            targetY === undefined ||\n            targetHeight === undefined\n        ) {\n            return [null, null]\n        }\n\n        const sourcePosition: [number, number] = [\n            sourceX + sourceWidth,\n            sourceY + (sourceElementType === 'property' ? sourceHeight / 2 : 12),\n        ]\n        const targetPosition: [number, number] = [targetX, targetY + targetHeight / 2]\n\n        const xDistance = targetPosition[0] - sourcePosition[0]\n        const yDistance = targetPosition[1] - sourcePosition[1]\n\n        const center: [number, number] = [\n            sourcePosition[0] + xDistance / 2,\n            sourcePosition[1] + yDistance / 2,\n        ]\n\n        const xOffset = Math.max(6, Math.min(42, Math.abs(xDistance) * 0.2))\n\n        const points: [number, number][] = [sourcePosition]\n        points.push([sourcePosition[0] + xOffset, sourcePosition[1]])\n        points.push(center)\n        points.push([targetPosition[0] - xOffset, targetPosition[1]])\n        points.push(targetPosition)\n\n        return [lineGenerator(points), center]\n    }, [\n        sourceElementType,\n        sourceX,\n        sourceY,\n        sourceWidth,\n        sourceHeight,\n        targetX,\n        targetY,\n        targetHeight,\n    ])\n\n    const [isHover, setIsHover] = useState(false)\n    const handleHover = useCallback(() => {\n        setIsHover(true)\n    }, [setIsHover])\n    const handleOut = useCallback(() => {\n        setIsHover(false)\n    }, [setIsHover])\n\n    const { unlink } = useStore()\n    const sourceId = source.id\n    const targetId = target.id\n    const handleUnlink = useCallback(() => {\n        unlink(sourceId, targetId)\n    }, [unlink, sourceId, targetId])\n\n    if (!path || !center) {\n        return null\n    }\n\n    let category: string = 'default'\n    if (source.elementType === 'property') {\n        if (source.category) {\n            category = source.category\n        }\n    } else if (source.elementType === 'node') {\n        const nodeService = registry.getNodeService(source.type)\n        if (nodeService) {\n            category = nodeService.category\n        }\n    }\n\n    return (\n        <Container category={category} discreteLinks={discreteLinks}>\n            <Path d={path} isHover={isHover} animate={animateLinks} />\n            {!isHover && <Circle cx={center[0]} cy={center[1]} r={4} />}\n            <CapturePath d={path} onMouseEnter={handleHover} onMouseLeave={handleOut} />\n            {isHover && (\n                <foreignObject\n                    x={center[0] - UNLINK_BUTTON_SIZE / 2}\n                    y={center[1] - UNLINK_BUTTON_SIZE / 2}\n                    width={UNLINK_BUTTON_SIZE}\n                    height={UNLINK_BUTTON_SIZE}\n                >\n                    <UnlinkButton\n                        onMouseEnter={handleHover}\n                        onMouseLeave={handleOut}\n                        onClick={handleUnlink}\n                    >\n                        <FaTimes />\n                    </UnlinkButton>\n                </foreignObject>\n            )}\n        </Container>\n    )\n}\n\nconst Container = styled.g<{\n    discreteLinks: boolean\n    category: string\n}>`\n    color: ${props =>\n        props.discreteLinks\n            ? props.theme.colors.discreteLink\n            : getCategoryColor(props.category, props.theme)};\n`\n\nconst CapturePath = styled.path`\n    pointer-events: all;\n    fill: none;\n    stroke: rgba(255, 255, 255, 0);\n    stroke-width: 8px;\n`\n\nconst flowAnimation = keyframes`\n    to {\n        stroke-dashoffset: -1000;\n    }\n`\n\nconst Path = styled.path<{\n    isHover: boolean\n    animate: boolean\n}>`\n    fill: none;\n    stroke: currentColor;\n    stroke-width: ${props => (props.isHover ? 3 : 1)}px;\n    ${props =>\n        props.animate\n            ? css`\n                  stroke-dasharray: 4 6;\n                  animation: ${flowAnimation} 20s linear infinite;\n              `\n            : ''}\n`\n\nconst UnlinkButton = styled.div`\n    pointer-events: all;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${UNLINK_BUTTON_SIZE}px;\n    height: ${UNLINK_BUTTON_SIZE}px;\n    border-radius: ${UNLINK_BUTTON_SIZE / 2}px;\n    cursor: pointer;\n    background-color: ${props => props.theme.colors.background};\n    border: 2px solid currentColor;\n    font-size: 10px;\n`\n\nconst Circle = styled.circle`\n    fill: ${props => props.theme.colors.background};\n    stroke: currentColor;\n    stroke-width: 2px;\n`\n","import { useCallback, MouseEvent, memo } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ElementId, useLinkingActions, useLinking } from '../../store'\nimport { getCategoryColor } from '../../theming'\n\nconst CONTAINER_SIZE = 20\nconst PORT_SIZE = 10\n\nexport const PortWidget = memo(\n    ({\n        type,\n        elementId,\n        x,\n        y,\n        category = 'default',\n    }: {\n        type: 'source' | 'target'\n        elementId: ElementId\n        x: number\n        y: number\n        category?: string\n    }) => {\n        const { type: linkingType, isLinking, potentialId } = useLinking()\n        const {\n            startLinking,\n            setLinkingPotentialPort,\n            resetLinkingPotentialPort,\n        } = useLinkingActions()\n\n        const handleLinking = useCallback(\n            (event: MouseEvent) => {\n                event.stopPropagation()\n\n                startLinking({\n                    elementId,\n                    type,\n                    anchor: [x, y],\n                    initial: [event.clientX, event.clientY],\n                })\n            },\n            [startLinking, elementId, type, x, y]\n        )\n\n        const handleMouseEnter = useCallback(() => {\n            setLinkingPotentialPort(elementId, type)\n        }, [setLinkingPotentialPort, elementId, type])\n\n        const handleMouseLeave = useCallback(() => {\n            resetLinkingPotentialPort()\n        }, [resetLinkingPotentialPort])\n\n        return (\n            <Container\n                onMouseDown={handleLinking}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n                isLinking={isLinking}\n                isHighlighted={potentialId === elementId && linkingType !== type}\n                style={{\n                    left: type === 'target' ? 0 : '100%',\n                }}\n            >\n                <Port category={category} />\n            </Container>\n        )\n    }\n)\n\nconst Port = styled.div<{\n    category: string\n}>`\n    pointer-events: all;\n    width: ${PORT_SIZE}px;\n    height: ${PORT_SIZE}px;\n    border-radius: ${PORT_SIZE / 2}px;\n    background: ${props => props.theme.colors.background};\n    border: 2px solid ${props => getCategoryColor(props.category, props.theme)};\n    transition: transform 200ms;\n`\n\nconst Container = styled.div<{\n    isLinking: boolean\n    isHighlighted: boolean\n}>`\n    pointer-events: all;\n    position: absolute;\n    top: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${CONTAINER_SIZE}px;\n    height: ${CONTAINER_SIZE}px;\n    margin-top: -${CONTAINER_SIZE / 2}px;\n    margin-left: -${CONTAINER_SIZE / 2}px;\n    cursor: crosshair;\n\n    ${Port} {\n        transform: scale(${props => (props.isHighlighted ? 1.6 : 1)});\n    }\n\n    ${props =>\n        !props.isLinking\n            ? css`\n                  &:hover {\n                      transform: scale(1.6);\n                  }\n              `\n            : undefined};\n`\n","import { memo } from 'react'\nimport styled from 'styled-components'\nimport { transparentize } from 'polished'\nimport { Property } from '../../store'\nimport { PortWidget } from './PortWidget'\n\nexport const PropertyWidget = memo(({ property }: { property: Property }) => {\n    return (\n        <PropertyContainer>\n            <PropertyName>{property.name}</PropertyName>\n            {property.accepts.length > 0 && (\n                <PortWidget\n                    type=\"target\"\n                    elementId={property.id}\n                    x={property.x}\n                    y={property.y + property.height / 2}\n                    category={property.category}\n                />\n            )}\n            {property.hasOutput && (\n                <PortWidget\n                    type=\"source\"\n                    elementId={property.id}\n                    x={property.x + property.width}\n                    y={property.y + property.height / 2}\n                    category={property.category}\n                />\n            )}\n        </PropertyContainer>\n    )\n})\n\nconst PropertyContainer = styled.div`\n    position: relative;\n    height: 20px;\n    user-select: none;\n    display: flex;\n    align-items: center;\n    padding: 0 12px;\n    background-color: ${props => transparentize(0.15, props.theme.colors.nodeBackground)};\n    color: ${props => props.theme.colors.text};\n    font-size: 11px;\n`\n\nconst PropertyName = styled.span`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    font-weight: 600;\n`\n","import { createElement, memo } from 'react'\nimport { ResolvedProperty } from '../../store'\nimport registry from '../../registry'\nimport { PropertyWidget } from './PropertyWidget'\n\nexport const PropertiesWidget = memo(({ properties }: { properties: ResolvedProperty[] }) => {\n    return (\n        <>\n            {properties.map(property => {\n                const propertyService = registry.getPropertyService(property.type)\n\n                if (!('widget' in propertyService)) {\n                    return <PropertyWidget key={property.name} property={property} />\n                }\n\n                // @ts-ignore\n                return createElement(propertyService.widget, { property })\n            })}\n        </>\n    )\n})\n","import { createElement, useCallback, MouseEvent, memo } from 'react'\nimport styled from 'styled-components'\nimport { transparentize } from 'polished'\nimport { ResolvedNode, useStore } from '../../store'\nimport registry from '../../registry'\nimport { getCategoryColor } from '../../theming'\nimport { PropertiesWidget } from './PropertiesWidget'\nimport { PortWidget } from './PortWidget'\n\nexport const NodeWidget = memo(({ node }: { node: ResolvedNode }) => {\n    const nodeService = registry.getNodeService(node.type)\n    const hasCustomWidget = 'widget' in nodeService\n    const { setSelectedNodeIds, startDrag } = useStore()\n\n    const handleStartDrag = useCallback(\n        (event: MouseEvent) => {\n            setSelectedNodeIds([node.id])\n            startDrag(node.id, [event.clientX, event.clientY])\n        },\n        [setSelectedNodeIds, node.id, startDrag]\n    )\n\n    return (\n        <NodeContainer\n            onMouseDown={handleStartDrag}\n            category={nodeService.category}\n            isSelected={node.isSelected}\n            style={{\n                transform: `translate(${node.x}px,${node.y}px)`,\n                width: node.width,\n            }}\n        >\n            <NodeHeader>\n                <NodeName>{node.name}</NodeName>\n                {nodeService.hasOutput && (\n                    <PortWidget\n                        type=\"source\"\n                        elementId={node.id}\n                        x={node.x + node.width}\n                        y={node.y + 12}\n                        category={nodeService.category}\n                    />\n                )}\n            </NodeHeader>\n            {!hasCustomWidget && <PropertiesWidget properties={node.properties} />}\n            {/* @ts-ignore */}\n            {hasCustomWidget && createElement(nodeService.widget!, { node, registry })}\n        </NodeContainer>\n    )\n})\n\nconst NodeContainer = styled.div<{\n    category: string\n    isSelected: boolean\n}>`\n    pointer-events: all;\n    user-select: none;\n    background-color: transparent;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n    position: absolute;\n    box-shadow: ${props =>\n        props.isSelected\n            ? `0 0 0 2px ${getCategoryColor(props.category, props.theme)}`\n            : `0 0 0 1px ${props.theme.colors.nodeBorder}`};\n    cursor: move;\n    font-size: 12px;\n\n    &:hover {\n        box-shadow: ${props =>\n            props.isSelected\n                ? `0 0 0 2px ${getCategoryColor(props.category, props.theme)}`\n                : `0 0 0 1px ${getCategoryColor(props.category, props.theme)}`};\n    }\n`\n\nconst NodeHeader = styled.header`\n    position: relative;\n    background-color: ${props => transparentize(0.15, props.theme.colors.topDepthBackground)};\n    width: 100%;\n    height: 24px;\n    padding: 0 12px 0 9px;\n`\n\nconst NodeName = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    font-weight: 600;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n","import { v4 as uuidV4 } from 'uuid'\nimport { ElementId } from './types'\n\nexport const generateElementId = (): ElementId => uuidV4()\n","import { PropertyType, NodeType } from '../registry'\n\nexport type ElementId = string\n\nexport interface CreateProperty<\n    Type extends PropertyType = PropertyType,\n    Data = any,\n    Options = any\n> {\n    elementType: 'property'\n    id: ElementId\n    type: Type\n    category: string\n    name: string\n    accepts: string[]\n    hasOutput: boolean\n    data: Data\n    options: Options\n}\n\nexport type PropertySpec<\n    Type extends PropertyType = PropertyType,\n    Data = any,\n    Options = any\n> = Pick<CreateProperty<Type, Data, Options>, 'type' | 'category' | 'name'> &\n    Partial<\n        Omit<\n            CreateProperty<Type, Data, Options>,\n            'elementType' | 'type' | 'category' | 'name' | 'id'\n        >\n    >\n\nexport interface Property<Type extends PropertyType = PropertyType, Data = any, Options = any>\n    extends CreateProperty<Type, Data, Options> {\n    nodeId: ElementId\n    x: number\n    y: number\n    width: number\n    height: number\n}\n\nexport interface ResolvedProperty<\n    Type extends PropertyType = PropertyType,\n    Data = any,\n    Options = any\n> extends Property<Type, Data, Options> {\n    node: ResolvedNode\n    dependencies: (ResolvedNode | ResolvedProperty)[]\n    input?: ResolvedNode | ResolvedProperty<Type>\n}\n\nexport const isProperty = <Type extends PropertyType = PropertyType>(\n    element: Element\n): element is Property<Type> => element.elementType === 'property'\n\nexport interface Node<Type extends NodeType = NodeType, Data = any> {\n    elementType: 'node'\n    type: Type\n    id: ElementId\n    x: number\n    y: number\n    width: number\n    name: string\n    data: Data\n    height: number\n    properties: ElementId[]\n}\n\nexport interface ResolvedNode<Type extends NodeType = NodeType>\n    extends Omit<Node<Type>, 'properties'> {\n    isSelected: boolean\n    properties: ResolvedProperty[]\n}\n\nexport interface SerializedNode<Type extends NodeType = NodeType> {\n    id: ElementId\n    type: Type\n    name: string\n    x: number\n    y: number\n    width: number\n}\n\nexport interface SerializedElements {\n    nodes: SerializedNode[]\n    links: any[]\n}\n\nexport const isNode = (element: Element): element is Node => element.elementType === 'node'\n\nexport interface Link {\n    id: ElementId\n    elementType: 'link'\n    sourceId: ElementId\n    targetId: ElementId\n}\n\nexport const isLink = (element: Element): element is Link => element.elementType === 'link'\n\nexport interface ResolvedLink extends Link {\n    source: ResolvedNode | ResolvedProperty\n    target: ResolvedNode | ResolvedProperty\n}\n\nexport type Element = Node | Property | Link\n\nexport interface AppSettings {\n    themeId: string\n    animateLinks: boolean\n    discreteLinks: boolean\n}\n\nexport type State = {\n    settings: AppSettings\n    setSettings: (partialSettings: Partial<AppSettings>) => void\n    // flat representation of all nodes/properties/links\n    elements: Element[]\n    selectedNodeIds: ElementId[]\n    setSelectedNodeIds: (ids: ElementId[]) => void\n    createNode: (type: NodeType) => void\n    updateNode: (id: ElementId, patch: any) => void\n    removeNode: (id: ElementId) => void\n    updateProperty: (propertyId: ElementId, patch: any) => void\n    loadGraph: (graph: any) => void\n    //\n    // DRAGGING\n    //\n    dragging: {\n        isDragging: boolean\n        elementId: ElementId | null\n        initial: [number, number]\n        offset: [number, number]\n    }\n    startDrag: (elementId: ElementId, initial: [number, number]) => void\n    updateDrag: (position: [number, number]) => void\n    stopDrag: () => void\n    //\n    // LINKING\n    //\n    linking: {\n        isLinking: boolean\n        elementId?: ElementId\n        elementType?: string\n        accepts: string[]\n        potentialId?: ElementId\n        type: 'source' | 'target'\n        anchor: [number, number]\n        position: [number, number]\n        previous: [number, number]\n    }\n    startLinking: (props: {\n        elementId?: ElementId\n        type: 'source' | 'target'\n        anchor: [number, number]\n        initial: [number, number]\n    }) => void\n    updateLinking: (position: [number, number]) => void\n    setLinkingPotentialPort: (elementId: ElementId, type: 'source' | 'target') => void\n    resetLinkingPotentialPort: () => void\n    stopLinking: () => void\n    link: (sourceId: ElementId, targetId: ElementId) => void\n    unlink: (sourceId: ElementId, targetId: ElementId) => void\n}\n","import { useMemo } from 'react'\nimport create from 'zustand'\nimport shallow from 'zustand/shallow'\nimport {\n    Element,\n    ElementId,\n    State,\n    Node,\n    ResolvedNode,\n    isNode,\n    Property,\n    ResolvedProperty,\n    isProperty,\n    Link,\n    ResolvedLink,\n    isLink,\n    SerializedElements,\n} from './types'\nimport { generateElementId } from './generateElementId'\nimport registry, { NodeType } from '../registry'\nimport { findLinkingPotentialPort } from './linking'\n\nconst DEFAULT_NODE_HEADER_HEIGHT = 24\nconst PROPERTY_HEIGHT = 20\n\nconst updateNodePosition = (\n    elements: Element[],\n    nodeId: ElementId | null,\n    offset: [number, number]\n): Element[] => {\n    if (nodeId === null) {\n        return elements\n    }\n\n    const node: Node | undefined = elements.find(\n        element => isNode(element) && element.id === nodeId\n    ) as any\n    if (!node) {\n        return elements\n    }\n\n    return elements.map(element => {\n        if (\n            (isNode(element) && element.id === node.id) ||\n            (isProperty(element) && node.properties.includes(element.id))\n        ) {\n            return {\n                ...element,\n                x: element.x + offset[0],\n                y: element.y + offset[1],\n            }\n        }\n\n        return element\n    })\n}\n\nexport const useStore = create<State>(set => ({\n    settings: {\n        themeId: 'dark',\n        animateLinks: false,\n        discreteLinks: false,\n    },\n    setSettings: partialSettings =>\n        set(state => {\n            return {\n                settings: {\n                    ...state.settings,\n                    ...partialSettings,\n                },\n            }\n        }),\n    elements: [],\n    selectedNodeIds: [],\n    setSelectedNodeIds: selectedNodeIds => set(() => ({ selectedNodeIds })),\n    createNode: (type: NodeType) =>\n        set(state => {\n            const nodeService = registry.getNodeService(type)\n\n            const newNode: Node = {\n                elementType: 'node',\n                id: generateElementId(),\n                type: type,\n                name: nodeService.type.replace('node:', '').replace('_', ' '),\n                x: 100,\n                y: 100,\n                width: 120,\n                height: 100,\n                properties: [],\n                data: nodeService.factory(),\n            }\n\n            const newProperties: Property[] = []\n            nodeService.properties.forEach(property => {\n                const propertyService = registry.getPropertyService(property.type)\n\n                let newProperty: Property = {\n                    ...registry.createProperty(property),\n                    nodeId: newNode.id,\n                    x: newNode.x,\n                    y:\n                        newNode.y +\n                        DEFAULT_NODE_HEADER_HEIGHT +\n                        newProperties.length * PROPERTY_HEIGHT,\n                    height: PROPERTY_HEIGHT,\n                    width: newNode.width,\n                }\n\n                if (newNode.data[property.name] !== undefined) {\n                    // @ts-ignore\n                    newProperty = propertyService.hydrate(newProperty, newNode.data[property.name])\n                }\n\n                newProperties.push(newProperty)\n            })\n\n            newNode.properties = newProperties.map(property => property.id)\n\n            return {\n                elements: [...state.elements, ...newProperties, newNode],\n                selectedNodeIds: [newNode.id],\n            }\n        }),\n    removeNode: id =>\n        set(state => {\n            const propertyIds = state.elements\n                .filter(element => element.elementType === 'property' && element.nodeId === id)\n                .map(property => property.id)\n            const nodeAndPropertyIds = [id, ...propertyIds]\n\n            return {\n                elements: state.elements.filter(element => {\n                    if (element.elementType === 'link') {\n                        return (\n                            !nodeAndPropertyIds.includes(element.sourceId) &&\n                            !nodeAndPropertyIds.includes(element.targetId)\n                        )\n                    }\n\n                    return !nodeAndPropertyIds.includes(element.id)\n                }),\n            }\n        }),\n    updateNode: (id, patch) =>\n        set(state => {\n            const updatedElements = state.elements.map(element => {\n                if (!isNode(element) || element.id !== id) {\n                    return element\n                }\n\n                return {\n                    ...element,\n                    ...patch,\n                }\n            })\n\n            return {\n                elements: updatedElements,\n            }\n        }),\n    updateProperty: (propertyId, patch) =>\n        set(state => {\n            const updatedElements = state.elements.map(element => {\n                if (!isProperty(element) || element.id !== propertyId) {\n                    return element\n                }\n\n                return {\n                    ...element,\n                    ...patch,\n                }\n            })\n\n            return {\n                elements: updatedElements,\n            }\n        }),\n    loadGraph: graph =>\n        set(state => {\n            const elements: any[] = []\n\n            graph.nodes.forEach((node: any) => {\n                const nodeService = registry.getNodeService(node.type)\n                const propertyIds: ElementId[] = []\n\n                nodeService.properties.forEach(property => {\n                    const propertyService = registry.getPropertyService(property.type)\n\n                    const propertyId = node.data[property.name]\n                        ? node.data[property.name].id\n                        : generateElementId()\n\n                    let newProperty: Property = {\n                        ...registry.createProperty(property),\n                        id: propertyId,\n                        nodeId: node.id,\n                        x: node.x,\n                        y:\n                            DEFAULT_NODE_HEADER_HEIGHT +\n                            node.y +\n                            propertyIds.length * PROPERTY_HEIGHT,\n                        width: node.width,\n                        height: PROPERTY_HEIGHT,\n                    }\n\n                    if (node.data[property.name]) {\n                        newProperty = propertyService.hydrate(\n                            // @ts-ignore\n                            newProperty,\n                            node.data[property.name].data\n                        )\n                    }\n\n                    elements.push(newProperty)\n                    propertyIds.push(newProperty.id)\n                })\n\n                elements.push({\n                    elementType: 'node',\n                    id: node.id,\n                    type: node.type,\n                    name: node.name || node.type.replace('_', ' '),\n                    x: node.x,\n                    y: node.y,\n                    width: node.width,\n                    height: DEFAULT_NODE_HEADER_HEIGHT + propertyIds.length * PROPERTY_HEIGHT,\n                    properties: propertyIds,\n                })\n            })\n\n            graph.links.forEach((link: any) => {\n                elements.push({\n                    elementType: 'link',\n                    id: link.id,\n                    sourceId: link.sourceId,\n                    targetId: link.targetId,\n                })\n            })\n\n            return {\n                selectedNodeIds: [],\n                elements,\n                drag: {\n                    isDragging: false,\n                    elementId: null,\n                    initial: [0, 0],\n                    offset: [0, 0],\n                },\n            }\n        }),\n    //\n    // dragging\n    //\n    dragging: {\n        isDragging: false,\n        elementId: null,\n        initial: [0, 0],\n        offset: [0, 0],\n    },\n    startDrag: (elementId, initial) =>\n        set(state => {\n            return {\n                dragging: {\n                    isDragging: true,\n                    elementId: elementId,\n                    initial,\n                    offset: [0, 0],\n                },\n            }\n        }),\n    updateDrag: position =>\n        set(state => {\n            const offset: [number, number] = [\n                position[0] - state.dragging.initial[0],\n                position[1] - state.dragging.initial[1],\n            ]\n\n            return {\n                dragging: {\n                    ...state.dragging,\n                    offset,\n                    initial: [position[0], position[1]],\n                },\n                elements: updateNodePosition(state.elements, state.dragging.elementId, offset),\n            }\n        }),\n    stopDrag: () =>\n        set(() => {\n            return {\n                dragging: {\n                    isDragging: false,\n                    elementId: null,\n                    initial: [0, 0],\n                    offset: [0, 0],\n                },\n            }\n        }),\n    //\n    // linking\n    //\n    linking: {\n        isLinking: false,\n        elementId: undefined,\n        accepts: [],\n        type: 'source',\n        anchor: [0, 0],\n        position: [0, 0],\n        previous: [0, 0],\n    },\n    startLinking: ({ elementId, type, anchor, initial }) =>\n        set(state => {\n            const element = state.elements.find(element => element.id === elementId)\n            let elementType: string | undefined = undefined\n            if (element && 'type' in element) {\n                elementType = element.type\n            }\n\n            let accepts: string[] = []\n            if (element && 'accepts' in element) {\n                accepts = element.accepts\n            }\n\n            return {\n                linking: {\n                    isLinking: true,\n                    elementId,\n                    elementType,\n                    accepts,\n                    type,\n                    anchor,\n                    position: anchor,\n                    previous: initial,\n                },\n            }\n        }),\n    updateLinking: position =>\n        set(state => {\n            const offset = [\n                position[0] - state.linking.previous[0],\n                position[1] - state.linking.previous[1],\n            ]\n\n            return {\n                linking: {\n                    ...state.linking,\n                    position: [\n                        state.linking.position[0] + offset[0],\n                        state.linking.position[1] + offset[1],\n                    ],\n                    previous: position,\n                },\n            }\n        }),\n    setLinkingPotentialPort: (elementId, type) =>\n        set(state => {\n            const potentialId = findLinkingPotentialPort(\n                state.linking,\n                state.elements,\n                elementId,\n                type\n            )\n            if (!potentialId) {\n                return {}\n            }\n\n            return {\n                linking: {\n                    ...state.linking,\n                    potentialId,\n                },\n            }\n        }),\n    resetLinkingPotentialPort: () =>\n        set(state => {\n            return {\n                linking: {\n                    ...state.linking,\n                    potentialId: undefined,\n                },\n            }\n        }),\n    stopLinking: () =>\n        set(state => {\n            let elements = state.elements\n            if (state.linking.elementId !== undefined && state.linking.potentialId !== undefined) {\n                const link: Link = {\n                    id: generateElementId(),\n                    elementType: 'link',\n                    sourceId:\n                        state.linking.type === 'source'\n                            ? state.linking.elementId\n                            : state.linking.potentialId,\n                    targetId:\n                        state.linking.type === 'source'\n                            ? state.linking.potentialId\n                            : state.linking.elementId,\n                }\n\n                elements = [...elements, link]\n            }\n\n            return {\n                elements,\n                linking: {\n                    isLinking: false,\n                    accepts: [],\n                    type: 'source',\n                    anchor: [0, 0],\n                    position: [0, 0],\n                    previous: [0, 0],\n                },\n            }\n        }),\n    link: (sourceId: ElementId, targetId: ElementId) =>\n        set(state => {\n            const link: Link = {\n                id: generateElementId(),\n                elementType: 'link',\n                sourceId,\n                targetId,\n            }\n\n            return {\n                elements: [...state.elements, link],\n            }\n        }),\n    unlink: (sourceId: ElementId, targetId: ElementId) =>\n        set(state => {\n            return {\n                elements: state.elements.filter(element => {\n                    return (\n                        !isLink(element) ||\n                        element.sourceId !== sourceId ||\n                        element.targetId !== targetId\n                    )\n                }),\n            }\n        }),\n}))\n\nconst settingsSelector = (state: State) => state.settings\nexport const useSettings = () => useStore(settingsSelector)\n\nconst setSettingsSelector = (state: State) => state.setSettings\nexport const useSetSettings = () => useStore(setSettingsSelector)\n\nconst loadGraphSelector = (state: State) => state.loadGraph\nexport const useLoadGraph = () => useStore(loadGraphSelector)\n\nconst createNodeSelector = (state: State) => state.createNode\nexport const useCreateNode = () => useStore(createNodeSelector)\n\nconst updateNodeSelector = (state: State) => state.updateNode\nexport const useUpdateNode = () => useStore(updateNodeSelector)\n\nconst removeNodeSelector = (state: State) => state.removeNode\nexport const useRemoveNode = () => useStore(removeNodeSelector)\n\nconst setSelectedNodeIdsSelector = (state: State) => state.setSelectedNodeIds\nexport const useSetSelectedNodeIds = () => useStore(setSelectedNodeIdsSelector)\n\nconst linkingSelector = (state: State) => state.linking\nexport const useLinking = () => useStore(linkingSelector)\n\nexport const useLinkingActions = () =>\n    useStore(\n        state => ({\n            startLinking: state.startLinking,\n            updateLinking: state.updateLinking,\n            setLinkingPotentialPort: state.setLinkingPotentialPort,\n            resetLinkingPotentialPort: state.resetLinkingPotentialPort,\n        }),\n        shallow\n    )\n\nconst linkSelector = (state: State) => state.link\nexport const useLink = () => useStore(linkSelector)\n\nconst unlinkSelector = (state: State) => state.unlink\nexport const useUnlink = () => useStore(unlinkSelector)\n\nconst serializeProperties = (properties: ResolvedProperty[]) => {\n    const props: any = {}\n    properties.forEach(property => {\n        props[property.name] = {\n            id: property.id,\n            // @ts-ignore\n            data: registry.getPropertyService(property.type).serialize(property),\n        }\n    })\n\n    return props\n}\n\nexport const serializeElements = (\n    nodes: ResolvedNode[],\n    links: ResolvedLink[]\n): SerializedElements => {\n    return {\n        nodes: nodes.map(node => {\n            return {\n                id: node.id,\n                type: node.type,\n                name: node.name,\n                x: node.x,\n                y: node.y,\n                width: node.width,\n                data: serializeProperties(node.properties),\n            }\n        }),\n        links: links.map(link => {\n            return {\n                id: link.id,\n                sourceId: link.source.id,\n                targetId: link.target.id,\n            }\n        }),\n    }\n}\n\nconst resolveGraph = (elements: Element[]) => {\n    const resolvedNodes: Record<ElementId, ResolvedNode> = {}\n    const propertiesByNodeId: Record<ElementId, ElementId[]> = {}\n    const resolvedProperties: Record<ElementId, ResolvedProperty> = {}\n    const resolvedLinks: Record<ElementId, ResolvedLink> = {}\n\n    const nodes = elements.filter(isNode)\n    const properties = elements.filter(isProperty)\n    const links = elements.filter(isLink)\n\n    // first pass to resolve nodes without resolving\n    // their properties.\n    nodes.forEach(node => {\n        propertiesByNodeId[node.id] = node.properties\n\n        resolvedNodes[node.id] = {\n            ...node,\n            isSelected: false,\n            properties: [],\n        }\n    })\n\n    // first pass to resolve properties without resolving\n    // dependencies.\n    properties.forEach(property => {\n        const propertyNode = resolvedNodes[property.nodeId]\n        if (!propertyNode) {\n            throw new Error(`unable to find property node: ${property.nodeId}`)\n        }\n\n        resolvedProperties[property.id] = {\n            ...property,\n            node: propertyNode,\n            dependencies: [],\n        }\n    })\n\n    // assign resolved properties to nodes.\n    Object.values(resolvedNodes).forEach(node => {\n        if (node.id in propertiesByNodeId) {\n            propertiesByNodeId[node.id].forEach(propertyId => {\n                const property = resolvedProperties[propertyId]\n                if (!property) {\n                    throw new Error(`unable to find property: ${propertyId}`)\n                }\n\n                node.properties.push(property)\n            })\n        }\n    })\n\n    links.forEach(link => {\n        const source: ResolvedNode | ResolvedProperty =\n            resolvedNodes[link.sourceId] || resolvedProperties[link.sourceId]\n        if (!source) {\n            throw new Error(`unable to find link source: ${link.sourceId}`)\n        }\n\n        const target: ResolvedNode | ResolvedProperty =\n            resolvedNodes[link.targetId] || resolvedProperties[link.targetId]\n        if (!target) {\n            throw new Error(`unable to find link target: ${link.sourceId}`)\n        }\n\n        // @ts-ignore\n        if (target.elementType === 'property') {\n            // @ts-ignore\n            target.input = source\n        }\n\n        resolvedLinks[link.id] = {\n            ...link,\n            source,\n            target,\n        }\n    })\n\n    return {\n        nodes: Object.values(resolvedNodes),\n        properties: Object.values(resolvedProperties),\n        links: Object.values(resolvedLinks),\n    }\n}\n\nexport const useGraph = () => {\n    const { elements, selectedNodeIds } = useStore()\n\n    const graph = useMemo(() => resolveGraph(elements), [elements])\n\n    useMemo(() => {\n        graph.nodes.forEach(node => {\n            node.isSelected = selectedNodeIds.includes(node.id)\n        })\n    }, [graph, selectedNodeIds])\n\n    return graph\n}\n","import { ElementId, State } from './types'\n\n/**\n * Find eligible port depending on current element,\n * which can be either a node or a property.\n *\n * The following conditions must be met:\n * - should currently be linking\n * - current element ID should be different from target\n * - should be from a source to a target or the other way\n * - element should have a defined type\n * - target element should contain source type in its\n *   accepts list\n *\n * @todo: prevent circular dependencies\n */\nexport const findLinkingPotentialPort = (\n    linking: State['linking'],\n    elements: State['elements'],\n    elementId: ElementId,\n    type: 'source' | 'target'\n) => {\n    if (\n        // no current linking\n        !linking.isLinking ||\n        // source & target are identical\n        elementId === linking.elementId ||\n        // both are sources or targets\n        linking.type === type ||\n        // no element type so we cannot define\n        // eligible elements\n        !linking.elementType\n    )\n        return\n\n    const currentElement = elements.find(element => element.id === linking.elementId)\n    const potentialElement = elements.find(element => element.id === elementId)\n    if (!currentElement || !potentialElement) return\n\n    const source = type === 'target' ? currentElement : potentialElement\n    const target = type === 'target' ? potentialElement : currentElement\n\n    const link = elements.find(\n        element =>\n            element.elementType === 'link' &&\n            element.sourceId === source.id &&\n            element.targetId === target.id\n    )\n    if (link) return\n\n    if (!('type' in source) || !('accepts' in target)) return\n    if (target.accepts.includes(source.type)) {\n        return elementId\n    }\n}\n","import { State, isNode, Element, ElementId, Node, isProperty } from './types'\nimport { useGraph, useStore } from './store'\n\nexport const updateNodePosition = (\n    elements: Element[],\n    nodeId: ElementId | null,\n    offset: [number, number]\n): Element[] => {\n    if (nodeId === null) {\n        return elements\n    }\n\n    const node: Node | undefined = elements.find(\n        element => isNode(element) && element.id === nodeId\n    ) as any\n    if (!node) {\n        return elements\n    }\n\n    return elements.map(element => {\n        if (\n            (isNode(element) && element.id === node.id) ||\n            (isProperty(element) && node.properties.includes(element.id))\n        ) {\n            return {\n                ...element,\n                x: element.x + offset[0],\n                y: element.y + offset[1],\n            }\n        }\n\n        return element\n    })\n}\n\nconst nodesSelector = (state: State) => state.elements.filter(isNode)\nexport const useNodes = () => useStore(nodesSelector)\n\nexport const useSelectedNodes = () => {\n    const state = useStore()\n    const { nodes } = useGraph()\n\n    if (state.selectedNodeIds.length === 0) {\n        return []\n    }\n\n    return nodes.filter(node => state.selectedNodeIds.includes(node.id))\n}\n","export * from './nodes'\nexport * from './properties'\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n    body {\n        margin: 0;\n        font-family: 'IBM Plex Mono', monospace;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        font-size: 14px;\n        color: ${props => props.theme.colors.text};\n    }\n    \n    code {\n        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n    }\n    \n    * {\n        box-sizing: border-box;\n    }\n    \n    .App {\n        position: fixed;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n`\n","import { DefaultTheme } from 'styled-components'\n\nexport const getCategoryColor = (category: string, theme: DefaultTheme) => {\n    if (category in theme.colors.categories) {\n        return theme.colors.categories[category as keyof DefaultTheme['colors']['categories']]\n    }\n\n    return theme.colors.accentColor\n}\n","import { DefaultTheme } from 'styled-components'\nimport { transparentize } from 'polished'\n\nexport const blueTheme: DefaultTheme = {\n    colors: {\n        background: '#2256ff',\n        mediumDepthBackground: '#2256ff',\n        topDepthBackground: '#173dba',\n        nodeBackground: '#2256ff',\n        badgeBackground: '#333333',\n        inputBackground: '#ffffff',\n        inputText: '#173dba',\n        text: '#ffffff',\n        textLight: '#ffffff',\n        accentColor: '#ffffff',\n        border: '#ffffff',\n        lightBorder: 'rgba(255, 255, 255, 0.15)',\n        nodeBorder: '#ffffff',\n        success: '#00d919',\n        overlay: transparentize(0.1, '#2256ff'),\n        discreteLink: '#7287d6',\n        categories: {\n            axis_grid: '#ffffff',\n            charts: '#ffffff',\n            colors_theming: '#ffffff',\n            data: '#ffffff',\n            dimensions: '#ffffff',\n            render: '#ffffff',\n        },\n    },\n}\n","import { blueTheme } from './blueTheme'\nimport { darkTheme } from './darkTheme'\nimport { lightTheme } from './lightTheme'\n\nexport const themes = [\n    {\n        id: 'dark',\n        name: 'Dark theme',\n        theme: darkTheme,\n    },\n    {\n        id: 'light',\n        name: 'Light theme',\n        theme: lightTheme,\n    },\n    {\n        id: 'blue',\n        name: 'Blue theme',\n        theme: blueTheme,\n    },\n]\n","import { DefaultTheme } from 'styled-components'\nimport { transparentize } from 'polished'\n\nexport const darkTheme: DefaultTheme = {\n    colors: {\n        background: '#292929',\n        mediumDepthBackground: '#111111',\n        topDepthBackground: '#000000',\n        nodeBackground: '#202020',\n        badgeBackground: '#333333',\n        inputBackground: '#333333',\n        inputText: '#eeeeee',\n        text: '#eeeeee',\n        textLight: '#aaaaaa',\n        accentColor: 'pink',\n        border: '#555555',\n        lightBorder: '#222222',\n        nodeBorder: '#111111',\n        success: '#65f7cf',\n        overlay: transparentize(0.2, '#333333'),\n        discreteLink: '#444444',\n        categories: {\n            axis_grid: '#837ec4',\n            charts: '#f19494',\n            colors_theming: '#e37e49',\n            data: '#759d61',\n            dimensions: '#608cb7',\n            render: '#d78080',\n        },\n    },\n}\n","import { DefaultTheme } from 'styled-components'\nimport { transparentize } from 'polished'\n\nexport const lightTheme: DefaultTheme = {\n    colors: {\n        background: '#ececec',\n        mediumDepthBackground: '#f5f3f3',\n        topDepthBackground: '#ffffff',\n        nodeBackground: '#f2f2f2',\n        badgeBackground: '#eeeeee',\n        inputBackground: '#eeeeee',\n        inputText: '#444444',\n        text: '#333333',\n        textLight: '#777777',\n        accentColor: '#1a8cc3',\n        border: '#dddddd',\n        lightBorder: '#eeeeee',\n        nodeBorder: '#cccccc',\n        success: '#0ab537',\n        overlay: transparentize(0.3, '#eeeeee'),\n        discreteLink: '#cccccc',\n        categories: {\n            axis_grid: '#60399b',\n            charts: '#006dcd',\n            colors_theming: '#d2702d',\n            data: '#3da914',\n            dimensions: '#288fa5',\n            render: '#c3931a',\n        },\n    },\n}\n","import { useMemo } from 'react'\nimport { useSettings } from '../store'\nimport { themes } from './themes'\n\nexport const useCurrentTheme = () => {\n    const { themeId } = useSettings()\n\n    return useMemo(() => {\n        const theme = themes.find(theme => theme.id === themeId)\n        if (!theme) {\n            throw new Error(`no theme found matching id: ${themeId}`)\n        }\n\n        return theme.theme\n    }, [themeId])\n}\n","export * from './AnglePropertyService'\nexport * from './ArrayStringPropertyService'\nexport * from './ArrayValueLinkPropertyService'\nexport * from './ArrayXYPropertyService'\nexport * from './BlendModePropertyService'\nexport * from './ChoicesPropertyService'\nexport * from './CustomPropertyService'\nexport * from './MatrixPropertyService'\nexport * from './NumberPropertyService'\nexport * from './LongTextPropertyService'\nexport * from './RefPropertyService'\nexport * from './TextPropertyService'\n","import { ChangeEvent } from 'react'\nimport { PropertyService } from '../../services_registry'\nimport { Input } from '../../components/ui'\n\nexport const anglePropertyType = 'property:angle'\nexport type AnglePropertyType = typeof anglePropertyType\n\nexport const AnglePropertyService: PropertyService<AnglePropertyType, number, any, number> = {\n    type: anglePropertyType,\n    create: spec => ({\n        ...spec,\n        data: spec.data !== undefined ? spec.data : 0,\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ({ property }) => {\n        const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            console.log(event.target.value)\n        }\n\n        return <Input type=\"number\" value={property.data} onChange={handleChange} />\n    },\n}\n","import { PropertyService } from '../../services_registry'\n\nconst blendModeChoices = [\n    { label: 'normal', value: 'normal' },\n    { label: 'multiply', value: 'multiply' },\n    { label: 'screen', value: 'screen' },\n    { label: 'overlay', value: 'overlay' },\n    { label: 'darken', value: 'darken' },\n    { label: 'lighten', value: 'lighten' },\n    { label: 'color-dodge', value: 'color-dodge' },\n    { label: 'color-burn', value: 'color-burn' },\n    { label: 'hard-light', value: 'hard-light' },\n    { label: 'soft-light', value: 'soft-light' },\n    { label: 'difference', value: 'difference' },\n    { label: 'exclusion', value: 'exclusion' },\n    { label: 'hue', value: 'hue' },\n    { label: 'saturation', value: 'saturation' },\n    { label: 'color', value: 'color' },\n    { label: 'luminosity', value: 'luminosity' },\n]\n\nexport const BlendModePropertyService: PropertyService<\n    'property:blend_mode',\n    string,\n    {},\n    string\n> = {\n    type: 'property:blend_mode',\n    create: spec => ({\n        ...spec,\n        data: 'normal',\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: () => <div>BlendModePropertyControl</div>,\n}\n","import { ChangeEvent } from 'react'\nimport { PropertyService } from '../../services_registry'\nimport { useStore, Property } from '../../store'\n\nexport type ChoicePropertyOptions = {\n    choices: {\n        label: string\n        value: string | number\n    }[]\n}\n\nexport const ChoicesPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:choices', string, ChoicePropertyOptions>\n}) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n        updateProperty(property.id, {\n            data: event.target.value,\n        })\n    }\n\n    return (\n        <select value={property.data} onChange={handleChange}>\n            {property.options.choices.map(choice => {\n                return (\n                    <option key={choice.value} value={choice.value}>\n                        {choice.label}\n                    </option>\n                )\n            })}\n        </select>\n    )\n}\n\nexport const ChoicesPropertyService: PropertyService<\n    'property:choices',\n    string,\n    ChoicePropertyOptions,\n    string\n> = {\n    type: 'property:choices',\n    create: spec => ({\n        ...spec,\n        data: '',\n        options: spec.options || {\n            choices: [],\n        },\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ChoicesPropertyControl,\n}\n","import { PropertyService } from '../../services_registry'\nimport { createElement } from 'react'\n\nexport type CustomPropertyOptions = {\n    renderer: any\n}\n\nexport const CustomPropertyService: PropertyService<\n    'property:custom',\n    undefined,\n    CustomPropertyOptions,\n    undefined\n> = {\n    type: 'property:custom',\n    create: spec => spec,\n    getValue: () => undefined,\n    serialize: () => undefined,\n    hydrate: property => property,\n    widget: ({ property }) => createElement(property.options.renderer, { property }),\n}\n","export * from './MatrixPropertyService'\nexport * from './types'\n","export * from './NumberPropertyService'\nexport * from './types'\n","import { ChangeEvent } from 'react'\nimport styled from 'styled-components'\nimport { PropertyService } from '../../services_registry'\nimport { Property, useStore } from '../../store'\n\nconst LongTextPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:long_text', string>\n}) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        updateProperty(property.id, {\n            data: event.target.value,\n        })\n    }\n\n    return <TextArea value={property.data} onChange={handleChange} />\n}\n\nconst TextArea = styled.textarea`\n    background-color: ${props => props.theme.colors.inputBackground};\n    color: ${props => props.theme.colors.inputText};\n    width: 100%;\n    height: 120px;\n    padding: 6px 9px;\n\n    &:focus {\n        outline: none;\n    }\n`\n\nexport const LongTextPropertyService: PropertyService<\n    'property:long_text',\n    string,\n    never,\n    string\n> = {\n    type: 'property:long_text',\n    create: spec => ({\n        ...spec,\n        data: spec.data || '',\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: LongTextPropertyControl,\n}\n","import { PropertyService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport const RefPropertyService: PropertyService<'property:ref', never, never, undefined> = {\n    type: 'property:ref',\n    create: spec => spec,\n    getValue: property => registry.resolvePropertyValue(property, undefined),\n    // refs are managed by links\n    serialize: () => undefined,\n    hydrate: property => property,\n}\n","import { ChangeEvent } from 'react'\nimport { PropertyService } from '../../services_registry'\nimport { Property, useStore } from '../../store'\nimport { Input } from '../../components/ui'\n\nconst TextPropertyControl = ({ property }: { property: Property<'property:text', string> }) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        updateProperty(property.id, {\n            data: event.target.value,\n        })\n    }\n\n    return <Input type=\"text\" value={property.data} onChange={handleChange} />\n}\n\nexport const TextPropertyService: PropertyService<'property:text', string, never, string> = {\n    type: 'property:text',\n    create: spec => ({\n        ...spec,\n        data: spec.data || '',\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: TextPropertyControl,\n}\n","import styled from 'styled-components'\nimport { getCategoryColor } from '../../../theming'\n\nconst SvgIcon = ({ category }: { category: string }) => {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            role=\"img\"\n            width=\"104\"\n            height=\"104\"\n            viewBox=\"0 0 104 104\"\n        >\n            <g transform=\"translate(5,8)\">\n                <Path\n                    d=\"M0,39.999999999999986L1.175,39.99999999999999C2.35,39.999999999999986,4.7,39.999999999999986,7.441666666666666,39.99999999999999C10.183333333333332,39.999999999999986,13.316666666666665,39.999999999999986,16.058333333333334,39.99999999999999C18.8,39.999999999999986,21.150000000000002,39.999999999999986,23.5,39.99999999999999C25.849999999999998,39.999999999999986,28.2,39.999999999999986,30.941666666666663,39.99999999999999C33.68333333333334,39.99999999999999,36.81666666666667,39.99999999999999,39.55833333333334,40C42.300000000000004,40,44.65,40,47,40C49.35,40,51.699999999999996,40,54.44166666666666,40C57.18333333333334,40,60.31666666666666,40,63.05833333333334,40C65.8,40,68.14999999999999,40,70.5,40C72.85000000000001,40,75.2,40,77.94166666666666,40C80.68333333333334,40,83.81666666666666,40,86.55833333333334,40C89.3,40,91.64999999999999,40,92.825,40L94,40L94,2L92.825,2C91.64999999999999,2,89.3,2,86.55833333333334,2C83.81666666666666,2,80.68333333333334,2,77.94166666666666,2C75.2,2,72.85000000000001,2,70.5,2C68.14999999999999,2,65.8,2,63.05833333333334,2C60.31666666666666,2,57.18333333333334,2,54.44166666666666,2C51.699999999999996,2,49.35,2,47,2C44.65,2,42.300000000000004,2,39.55833333333334,4.11111111111111C36.81666666666667,6.222222222222219,33.68333333333334,10.444444444444438,30.941666666666666,12.555555555555548C28.2,14.666666666666657,25.849999999999998,14.666666666666657,23.5,14.666666666666657C21.150000000000002,14.666666666666657,18.8,14.666666666666657,16.058333333333334,14.666666666666657C13.316666666666665,14.666666666666657,10.183333333333332,14.666666666666657,7.441666666666666,14.666666666666657C4.7,14.666666666666657,2.35,14.666666666666657,1.175,14.666666666666657L0,14.666666666666657Z\"\n                    fillOpacity=\"1\"\n                    category={category}\n                />\n                <Path\n                    d=\"M0,69.33333333333331L1.175,69.33333333333331C2.35,69.33333333333331,4.7,69.33333333333331,7.441666666666666,69.33333333333331C10.183333333333332,69.33333333333331,13.316666666666665,69.33333333333331,16.058333333333334,69.33333333333331C18.8,69.33333333333331,21.150000000000002,69.33333333333331,23.5,69.33333333333331C25.849999999999998,69.33333333333331,28.2,69.33333333333331,30.941666666666663,69.33333333333331C33.68333333333334,69.33333333333331,36.81666666666667,69.33333333333333,39.55833333333334,69.33333333333333C42.300000000000004,69.33333333333333,44.65,69.33333333333333,47,69.33333333333333C49.35,69.33333333333333,51.699999999999996,69.33333333333333,54.44166666666666,72.1111111111111C57.18333333333334,74.8888888888889,60.31666666666666,80.44444444444446,63.05833333333334,83.22222222222223C65.8,86.00000000000001,68.14999999999999,86.00000000000001,70.5,86.00000000000001C72.85000000000001,86.00000000000001,75.2,86.00000000000001,77.94166666666666,86.00000000000001C80.68333333333334,86.00000000000001,83.81666666666666,86.00000000000001,86.55833333333334,86.00000000000001C89.3,86.00000000000001,91.64999999999999,86.00000000000001,92.825,86.00000000000001L94,86.00000000000001L94,73.33333333333334L92.825,73.33333333333336C91.64999999999999,73.33333333333334,89.3,73.33333333333334,86.55833333333334,73.33333333333336C83.81666666666666,73.33333333333334,80.68333333333334,73.33333333333334,77.94166666666666,73.33333333333336C75.2,73.33333333333334,72.85000000000001,73.33333333333334,70.5,73.33333333333336C68.14999999999999,73.33333333333334,65.8,73.33333333333334,63.05833333333334,68.44444444444446C60.31666666666666,63.555555555555564,57.18333333333334,53.77777777777778,54.44166666666666,48.88888888888889C51.699999999999996,44,49.35,44,47,44C44.65,44,42.300000000000004,44,39.55833333333334,44C36.81666666666667,44,33.68333333333334,43.99999999999999,30.941666666666666,43.99999999999999C28.2,43.99999999999998,25.849999999999998,43.99999999999998,23.5,43.99999999999999C21.150000000000002,43.99999999999998,18.8,43.99999999999998,16.058333333333334,43.99999999999999C13.316666666666665,43.99999999999998,10.183333333333332,43.99999999999998,7.441666666666666,43.99999999999999C4.7,43.99999999999998,2.35,43.99999999999998,1.175,43.99999999999999L0,43.999999999999986Z\"\n                    fillOpacity=\"0.7\"\n                    category={category}\n                />\n                <Path\n                    d=\"M0,85.99999999999999L1.175,85.99999999999999C2.35,85.99999999999999,4.7,85.99999999999999,7.441666666666666,85.99999999999999C10.183333333333332,85.99999999999999,13.316666666666665,85.99999999999999,16.058333333333334,85.99999999999999C18.8,85.99999999999999,21.150000000000002,85.99999999999999,23.5,85.99999999999999C25.849999999999998,85.99999999999999,28.2,85.99999999999999,30.941666666666663,86C33.68333333333334,86,36.81666666666667,86,39.55833333333334,86.00000000000001C42.300000000000004,86.00000000000001,44.65,86.00000000000001,47,86.00000000000001C49.35,86.00000000000001,51.699999999999996,86.00000000000001,54.44166666666666,83.22222222222223C57.18333333333334,80.44444444444446,60.31666666666666,74.8888888888889,63.05833333333334,72.1111111111111C65.8,69.33333333333333,68.14999999999999,69.33333333333333,70.5,69.33333333333333C72.85000000000001,69.33333333333333,75.2,69.33333333333333,77.94166666666666,69.33333333333333C80.68333333333334,69.33333333333333,83.81666666666666,69.33333333333333,86.55833333333334,69.33333333333333C89.3,69.33333333333333,91.64999999999999,69.33333333333333,92.825,69.33333333333333L94,69.33333333333333L94,44L92.825,44C91.64999999999999,44,89.3,44,86.55833333333334,44C83.81666666666666,44,80.68333333333334,44,77.94166666666666,44C75.2,44,72.85000000000001,44,70.5,44C68.14999999999999,44,65.8,44,63.05833333333334,48.88888888888889C60.31666666666666,53.77777777777778,57.18333333333334,63.555555555555564,54.44166666666666,68.44444444444446C51.699999999999996,73.33333333333334,49.35,73.33333333333334,47,73.33333333333336C44.65,73.33333333333334,42.300000000000004,73.33333333333334,39.55833333333334,73.33333333333334C36.81666666666667,73.33333333333333,33.68333333333334,73.33333333333333,30.941666666666666,73.33333333333333C28.2,73.33333333333331,25.849999999999998,73.33333333333331,23.5,73.33333333333331C21.150000000000002,73.33333333333331,18.8,73.33333333333331,16.058333333333334,73.33333333333331C13.316666666666665,73.33333333333331,10.183333333333332,73.33333333333331,7.441666666666666,73.33333333333331C4.7,73.33333333333331,2.35,73.33333333333331,1.175,73.33333333333331L0,73.33333333333331Z\"\n                    fillOpacity=\"0.5\"\n                    category={category}\n                />\n            </g>\n        </svg>\n    )\n}\n\nconst Path = styled.path<{\n    category: string\n}>`\n    fill: ${props => getCategoryColor(props.category, props.theme)};\n`\n\nexport const AreaBumpNodeIcon = ({ size, category }: { size: number; category: string }) => {\n    return (\n        <Container\n            style={{\n                width: size,\n                height: size,\n            }}\n        >\n            <SvgIcon category={category} />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    svg {\n        width: 100%;\n        height: 100%;\n    }\n`\n","import { AreaBump } from '@nivo/bump'\nimport { NodeService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { AreaBumpNodeIcon } from './AreaBumpNodeIcon'\n\nexport const areaBumpNodeType = 'node:area_bump' as const\nexport type AreaBumpNodeType = typeof areaBumpNodeType\n\nexport interface AreaBumpNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: any\n    spacing: number\n    xPadding: number\n    colors?: any\n    blendMode?: string\n    borderColor?: any\n    axisTop?: any\n    axisBottom?: any\n}\n\nexport const AreaBumpNodeService: NodeService<AreaBumpNodeType, AreaBumpNodeData> = {\n    type: areaBumpNodeType,\n    description: `An AreaBump chart from @nivo/bump package.`,\n    category: 'charts',\n    icon: AreaBumpNodeIcon,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'data',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:series_xy'],\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'spacing',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'xPadding',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            name: 'blendMode',\n            type: 'property:blend_mode',\n            category: 'colors_theming',\n            accepts: ['node:blend_mode'],\n        },\n        {\n            name: 'borderColor',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: [],\n        },\n        {\n            name: 'axisTop',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisBottom',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n            spacing: data?.spacing ?? 3,\n            xPadding: data?.xPadding ?? 0.6,\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        return <AreaBump {...props} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport type AxisNodeType = 'node:axis'\n\nexport interface AxisNodeData {\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    legend?: string\n    legendOffset: number\n}\n\nexport const AxisNodeService: NodeService<AxisNodeType, AxisNodeData> = {\n    type: 'node:axis',\n    category: 'axis_grid',\n    description: `X or Y axis to be used in various chart types.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'tickSize',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'tickPadding',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'tickRotation',\n            type: 'property:angle',\n            category: 'dimensions',\n            accepts: ['property:angle'],\n            hasOutput: true,\n        },\n        {\n            name: 'legend',\n            type: 'property:text',\n            category: 'data',\n            accepts: ['property:text'],\n            hasOutput: true,\n        },\n        {\n            name: 'legendOffset',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            tickSize: data?.tickSize ?? 5,\n            tickPadding: data?.tickPadding ?? 5,\n            tickRotation: data?.tickRotation ?? 0,\n            legend: data?.legend,\n            legendOffset: data?.legendOffset ?? 0,\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport type BlendModeNodeType = 'node:blend_mode'\n\nexport interface BlendModeNodeData {\n    blendMode: string\n}\n\nexport const BlendModeNodeService: NodeService<BlendModeNodeType, BlendModeNodeData> = {\n    type: 'node:blend_mode',\n    category: 'colors_theming',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'blendMode',\n            type: 'property:blend_mode',\n            category: 'colors_theming',\n            accepts: ['property:blend_mode'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            blendMode: data?.blendMode ?? 'normal',\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties).blendMode\n    },\n}\n","import { ResolvedNode } from '../../store'\nimport { NodeService } from '../../services_registry'\nimport { FaImage } from 'react-icons/fa'\nimport { PropertiesWidget } from '../../components/widgets'\nimport registry from '../../registry'\nimport styled from 'styled-components'\nimport { getCategoryColor } from '../../theming'\n\nconst CanvasNodeWidget = ({ node }: { node: ResolvedNode }) => {\n    const props = registry.resolvePropertyValues(node.properties)\n\n    return (\n        <>\n            <PropertiesWidget properties={node.properties} />\n            <div\n                style={{\n                    width: props.width,\n                    height: props.height,\n                    backgroundColor: '#000000',\n                    overflow: 'hidden',\n                }}\n            >\n                {props.content}\n            </div>\n        </>\n    )\n}\n\nconst CanvasNodeIcon = ({ size, category }: { size: number; category: string }) => {\n    return (\n        <Icon\n            category={category}\n            style={{\n                width: size,\n                height: size,\n            }}\n        >\n            <FaImage />\n        </Icon>\n    )\n}\n\nconst Icon = styled.div<{\n    category: string\n}>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n    \n    svg {\n        width: 70%;\n        height: 70%;\n    }\n`\n\nexport interface CanvasNodeData {\n    content?: any\n    width: number\n    height: number\n}\n\nexport const CanvasNodeService: NodeService<'node:canvas', CanvasNodeData> = {\n    type: 'node:canvas',\n    description: `A canvas to render a React node.`,\n    category: 'render',\n    icon: CanvasNodeIcon,\n    hasOutput: false,\n    properties: [\n        {\n            name: 'content',\n            type: 'property:ref',\n            category: 'render',\n            accepts: [\n                'node:area_bump',\n                'node:chord',\n                'node:line',\n                'node:sankey',\n                'node:scatterplot',\n            ],\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            content: undefined,\n            width: data?.width ?? 300,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: () => ({}),\n    widget: CanvasNodeWidget,\n}\n","import styled from 'styled-components'\nimport { getCategoryColor } from '../../../theming'\n\nconst IconSvg = ({ category }: { category: string }) => {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            role=\"img\"\n            width=\"104\"\n            height=\"104\"\n            viewBox=\"0 0 104 104\"\n        >\n            <g transform=\"translate(1,1)\">\n                <g transform=\"translate(51, 51)\">\n                    <ChordPath\n                        d=\"M34.49126202010697,25.40902289070412A42.839999999999996,42.839999999999996,0,0,1,2.6231934437736302e-15,42.839999999999996Q0,0,19.322824060709078,-38.23472335873351A42.839999999999996,42.839999999999996,0,0,1,39.44233649680935,-16.720277858709803Q0,0,34.49126202010697,25.40902289070412Z\"\n                        category={category}\n                    />\n                    <ChordPath\n                        d=\"M2.6231934437736302e-15,42.839999999999996A42.839999999999996,42.839999999999996,0,0,1,-34.49126202010697,25.409022890704122Q0,0,2.6231934437736302e-15,42.839999999999996Z\"\n                        category={category}\n                    />\n                    <ChordPath\n                        d=\"M-34.49126202010697,25.409022890704122A42.839999999999996,42.839999999999996,0,0,1,-40.9145315685421,-12.699082901011849Q0,0,-29.26109592733837,-31.28983645101236A42.839999999999996,42.839999999999996,0,0,1,-2.1411076115558973,-42.786461155320346Q0,0,-34.49126202010697,25.409022890704122Z\"\n                        category={category}\n                    />\n                </g>\n                <g transform=\"translate(51, 51)\">\n                    <ChordArc\n                        d=\"M3.1228493378257506e-15,-51A51,51,0,0,1,46.9551624962016,-19.905092688940243L39.44233649680935,-16.720277858709803A42.839999999999996,42.839999999999996,0,0,0,2.6231934437736302e-15,-42.839999999999996Z\"\n                        category={category}\n                    />\n                    <ChordArc\n                        d=\"M47.89132076681839,-17.533436491735138A51,51,0,0,1,42.52152235713082,28.158837625726377L35.71807877998989,23.653423605610158A42.839999999999996,42.839999999999996,0,0,0,40.228709444127446,-14.728086653057515Z\"\n                        category={category}\n                    />\n                    <ChordArc\n                        d=\"M41.06102621441307,30.248836774647764A51,51,0,0,1,-48.70777567683584,-15.117955834537916L-40.9145315685421,-12.699082901011849A42.839999999999996,42.839999999999996,0,0,0,34.49126202010697,25.40902289070412Z\"\n                        category={category}\n                    />\n                    <ChordArc\n                        d=\"M-47.89132076681839,-17.533436491735145A51,51,0,0,1,-2.5489376328046403,-50.93626328014327L-2.1411076115558973,-42.786461155320346A42.839999999999996,42.839999999999996,0,0,0,-40.228709444127446,-14.728086653057519Z\"\n                        category={category}\n                    />\n                </g>\n            </g>\n        </svg>\n    )\n}\n\nconst ChordPath = styled.path<{\n    category: string\n}>`\n    fill: ${props => getCategoryColor(props.category, props.theme)};\n    fill-opacity: 0.5;\n`\n\nconst ChordArc = styled.path<{\n    category: string\n}>`\n    fill: ${props => getCategoryColor(props.category, props.theme)};\n`\n\nexport const ChordNodeIcon = ({ size, category }: { size: number; category: string }) => {\n    return (\n        <Container\n            style={{\n                width: size,\n                height: size,\n            }}\n        >\n            <IconSvg category={category} />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    svg {\n        width: 100%;\n        height: 100%;\n    }\n`\n","import { Chord } from '@nivo/chord'\nimport { NodeService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { ChordNodeIcon } from './ChordNodeIcon'\n\nexport const chordNodeType = 'node:chord' as const\nexport type ChordNodeType = typeof chordNodeType\n\nexport interface ChordNodeData {\n    matrix?: any\n    keys?: any\n    width: number\n    height: number\n    margin?: any\n    innerRadiusRatio: number\n    innerRadiusOffset: number\n    theme?: any\n    colors?: any\n}\n\nexport const ChordNodeService: NodeService<ChordNodeType, ChordNodeData> = {\n    type: chordNodeType,\n    description: `An Chord diagram from @nivo/chord package.`,\n    category: 'charts',\n    icon: ChordNodeIcon,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'matrix',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:matrix'],\n        },\n        {\n            name: 'keys',\n            type: 'property:array_string',\n            category: 'data',\n            accepts: ['property:array_string'],\n            hasOutput: true,\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'innerRadiusRatio',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n            options: {\n                controlType: 'range',\n                min: 0,\n                max: 1,\n                step: 0.01,\n            },\n        },\n        {\n            name: 'innerRadiusOffset',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n            options: {\n                controlType: 'range',\n                min: 0,\n                max: 1,\n                step: 0.01,\n            },\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            keys: data?.keys ?? [],\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n            innerRadiusRatio: data?.innerRadiusRatio ?? 0.9,\n            innerRadiusOffset: data?.innerRadiusOffset ?? 0,\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        // check if the chart can be rendered\n        if (!Array.isArray(props.matrix) || !Array.isArray(props.keys) || props.keys.length === 0) {\n            return <div />\n        }\n\n        return <Chord {...props} isInteractive={true} />\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\nimport {IoColorFilterOutline} from \"react-icons/io5\";\nimport styled from \"styled-components\";\nimport {getCategoryColor} from \"../../theming\";\n\nconst schemeChoices = [\n    { label: 'nivo', value: 'nivo' },\n    { label: 'Category 10', value: 'category10' },\n    { label: 'Accent', value: 'accent' },\n    { label: 'Dark 2', value: 'dark2' },\n    { label: 'Paired', value: 'paired' },\n    { label: 'Pastel 1', value: 'pastel1' },\n    { label: 'Pastel 2', value: 'pastel2' },\n    { label: 'Set 1', value: 'set1' },\n    { label: 'Set 2', value: 'set2' },\n    { label: 'Set 3', value: 'set3' },\n    { label: 'Brown - Blue Green', value: 'brown_blueGreen' },\n    { label: 'Purple Red - Green', value: 'purpleRed_green' },\n    { label: 'Pink - Yellow Green', value: 'pink_yellowGreen' },\n    { label: 'Purple - Orange', value: 'purple_orange' },\n    { label: 'Red - Blue', value: 'red_blue' },\n    { label: 'Red - Grey', value: 'red_grey' },\n    { label: 'Red - Yellow - Blue', value: 'red_yellow_blue' },\n    { label: 'Red - Yellow - Green', value: 'red_yellow_green' },\n    { label: 'Spectral', value: 'spectral' },\n]\n\nexport interface ColorSchemeNodeData {\n    scheme: string\n}\n\nconst ColorSchemeNodeIcon = ({ size, category }: { size: number; category: string }) => {\n    return (\n        <Icon\n            category={category}\n            style={{\n                width: size,\n                height: size,\n            }}\n        >\n            <IoColorFilterOutline />\n        </Icon>\n    )\n}\n\nconst Icon = styled.div<{\n    category: string\n}>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n\n    svg {\n        width: 70%;\n        height: 70%;\n    }\n`\n\nexport const ColorSchemeNodeService: NodeService<'node:color_scheme', ColorSchemeNodeData> = {\n    type: 'node:color_scheme',\n    description: `A predefined color scheme to be used with nivo charts.`,\n    category: 'colors_theming',\n    icon: ColorSchemeNodeIcon,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'scheme',\n            type: 'property:choices',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n            hasOutput: true,\n            options: {\n                choices: schemeChoices,\n            },\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            scheme: data?.scheme ?? 'nivo',\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n}\n","import { Line } from '@nivo/line'\nimport { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface LineNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: number\n    colors?: any\n    axisTop?: any\n    axisRight?: any\n    axisBottom?: any\n    axisLeft?: any\n}\n\nexport const LineNodeService: NodeService<'node:line', LineNodeData> = {\n    type: 'node:line',\n    category: 'charts',\n    description: `A Line chart from @nivo/line package.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'data',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:series_xy'],\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            name: 'axisTop',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisRight',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisBottom',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisLeft',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        return <Line {...props} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface MarginNodeData {\n    top: number\n    right: number\n    bottom: number\n    left: number\n}\n\nexport const MarginNodeService: NodeService<'node:margin', MarginNodeData> = {\n    type: 'node:margin',\n    category: 'dimensions',\n    description: `Top/right/bottom/left margins for charts.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:number',\n            category: 'dimensions',\n            name: 'top',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            category: 'dimensions',\n            name: 'right',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            category: 'dimensions',\n            name: 'bottom',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            category: 'dimensions',\n            name: 'left',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            top: data?.top ?? 0,\n            right: data?.right ?? 0,\n            bottom: data?.bottom ?? 0,\n            left: data?.left ?? 0,\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n}\n","import { NodeService } from '../../services_registry'\n\nexport const NivoThemeNodeService: NodeService<'node:nivo_theme', {}> = {\n    type: 'node:nivo_theme',\n    category: 'colors_theming',\n    description: `A theme object to be used with nivo charts.`,\n    hasOutput: true,\n    properties: [],\n    factory: () => ({}),\n    getValue: () => {\n        return {\n            fontFamily: `'IBM Plex Mono', monospace`,\n            fontSize: 11,\n            textColor: '#dddddd',\n            grid: {\n                line: {\n                    stroke: '#333333',\n                },\n            },\n            tooltip: {\n                container: {\n                    background: '#222222',\n                    color: 'inherit',\n                    fontSize: 'inherit',\n                    borderRadius: '2px',\n                    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.25)',\n                    padding: '5px 9px',\n                },\n            },\n        }\n    },\n}\n","import styled from 'styled-components'\nimport {BiNotepad} from \"react-icons/bi\";\nimport { NodeService } from '../../services_registry'\nimport { ResolvedNode } from '../../store'\nimport registry from '../../registry'\nimport {getCategoryColor} from \"../../theming\";\n\nconst NoteNodeWidget = ({ node }: { node: ResolvedNode<'node:note'> }) => {\n    const props = registry.resolvePropertyValues(node.properties)\n\n    return <NoteContainer>{props.content}</NoteContainer>\n}\n\nconst NoteContainer = styled.div`\n    overflow-y: auto;\n    padding: 6px 9px;\n    font-size: 11px;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n    color: ${props => props.theme.colors.text};\n`\n\nexport interface NoteNodeData {\n    content?: string\n}\n\nconst NoteNodeIcon = ({ size, category }: { size: number; category: string }) => {\n    return (\n        <Icon\n            category={category}\n            style={{\n                width: size,\n                height: size,\n            }}\n        >\n            <BiNotepad />\n        </Icon>\n    )\n}\n\nconst Icon = styled.div<{\n    category: string\n}>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    opacity: 0.9;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n\n    svg {\n        width: 70%;\n        height: 70%;\n    }\n`\n\n\nexport const NoteNodeService: NodeService<'node:note', NoteNodeData> = {\n    type: 'node:note',\n    description: `A text note.`,\n    category: 'misc',\n    icon: NoteNodeIcon,\n    hasOutput: false,\n    properties: [\n        {\n            name: 'content',\n            type: 'property:long_text',\n            category: 'misc',\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            content: data?.content ?? 'my note.',\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n    widget: NoteNodeWidget,\n}\n","import styled from 'styled-components'\nimport { getCategoryColor } from '../../../theming'\n\nconst SvgIcon = ({ category }: { category: string }) => {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            role=\"img\"\n            width=\"104\"\n            height=\"104\"\n            viewBox=\"0 0 104 104\"\n        >\n            <Rect x=\"15.6\" y=\"20.8\" width=\"6\" height=\"10.4\" category={category} />\n            <Rect y=\"62.4\" width=\"6\" height=\"31.2\" category={category} />\n            <Rect x=\"49\" y=\"31.2\" width=\"6\" height=\"41.6\" category={category} />\n            <Rect x=\"98\" y=\"10.4\" width=\"6\" height=\"26\" category={category} />\n            <Rect x=\"93.60000000000001\" y=\"72.8\" width=\"6\" height=\"15.6\" category={category} />\n            <Path strokeWidth=\"10.4\" d=\"M23.6,26C35.3,26,35.3,36.4,47,36.4\" category={category} />\n            <Path strokeWidth=\"31.2\" d=\"M8,78C27.5,78,27.5,57.2,47,57.2\" category={category} />\n            <Path\n                strokeWidth=\"26\"\n                d=\"M57,44.199999999999996C76.5,44.199999999999996,76.5,23.400000000000002,96,23.400000000000002\"\n                category={category}\n            />\n            <Path\n                strokeWidth=\"15.6\"\n                d=\"M57,65C74.30000000000001,65,74.30000000000001,80.60000000000001,91.60000000000001,80.60000000000001\"\n                category={category}\n            />\n        </svg>\n    )\n}\n\nconst Rect = styled.rect<{\n    category: string\n}>`\n    fill: ${props => getCategoryColor(props.category, props.theme)};\n`\n\nconst Path = styled.path<{\n    category: string\n}>`\n    fill: none;\n    stroke: ${props => getCategoryColor(props.category, props.theme)};\n    stroke-opacity: 0.5;\n`\n\nexport const SankeyNodeIcon = ({ size, category }: { size: number; category: string }) => {\n    return (\n        <Container\n            style={{\n                width: size,\n                height: size,\n            }}\n        >\n            <SvgIcon category={category} />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    svg {\n        width: 100%;\n        height: 100%;\n    }\n`\n","import { NodeService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { SankeyNodeIcon } from './SankeyNodeIcon'\n\nexport const sankeyDataNodeType = 'node:sankey_data' as const\nexport type SankeyDataNodeType = typeof sankeyDataNodeType\n\nexport interface SankeyDataNodeData {\n    nodes: string[]\n    links: {\n        source: string\n        target: string\n        value: number\n    }[]\n}\n\nexport const SankeyDataNodeService: NodeService<SankeyDataNodeType, SankeyDataNodeData> = {\n    type: sankeyDataNodeType,\n    description: 'Nodes & Links to be used with a sankey diagram.',\n    category: 'data',\n    icon: SankeyNodeIcon,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'nodes',\n            type: 'property:array_string',\n            category: 'data',\n            accepts: ['property:array_string'],\n            hasOutput: true,\n        },\n        {\n            name: 'links',\n            type: 'property:array_value_link',\n            category: 'data',\n            accepts: ['node:value_links'],\n            hasOutput: true,\n        },\n    ],\n    // @ts-ignore\n    factory: (data = {}) => {\n        return {\n            // @ts-ignore\n            nodes: data?.nodes ? data.nodes.map(id => ({ id })) : [],\n            // @ts-ignore\n            links: data?.links ?? [],\n        }\n    },\n    getValue: ({ properties }) => {\n        const propertyValues = registry.resolvePropertyValues(properties)\n\n        const links = propertyValues.links\n        const nodeIds: string[] = propertyValues.nodes\n\n        const filteredLinks = links.filter((link: any) => {\n            return nodeIds.includes(link.source) && nodeIds.includes(link.target)\n        })\n\n        return {\n            links: filteredLinks,\n            nodes: nodeIds.map(id => ({ id })),\n        }\n    },\n}\n","import { Sankey } from '@nivo/sankey'\nimport { NodeService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { SankeyNodeIcon } from './SankeyNodeIcon'\n\nexport const sankeyNodeType = 'node:sankey' as const\nexport type SankeyNodeType = typeof sankeyNodeType\n\nexport interface SankeyNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: number\n    layout?: 'vertical' | 'horizontal'\n    align?: 'center' | 'justify' | 'start' | 'end'\n    colors?: any\n    axisTop?: any\n    axisRight?: any\n    axisBottom?: any\n    axisLeft?: any\n}\n\nexport const SankeyNodeService: NodeService<SankeyNodeType, SankeyNodeData> = {\n    type: sankeyNodeType,\n    description: `A Sankey diagram from @nivo/sankey package.`,\n    category: 'charts',\n    icon: SankeyNodeIcon,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'data',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:sankey_data'],\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'layout',\n            type: 'property:choices',\n            category: 'layout',\n            options: {\n                choices: [\n                    { label: 'Horizontal', value: 'horizontal' },\n                    { label: 'Vertical', value: 'vertical' },\n                ],\n            },\n        },\n        {\n            name: 'align',\n            type: 'property:choices',\n            category: 'layout',\n            options: {\n                choices: [\n                    { label: 'Center', value: 'center' },\n                    { label: 'Justify', value: 'justify' },\n                    { label: 'Start', value: 'start' },\n                    { label: 'End', value: 'end' },\n                ],\n            },\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            name: 'linkBlendMode',\n            type: 'property:text',\n            category: 'colors_theming',\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n            layout: data?.layout ?? 'horizontal',\n            align: data?.align ?? 'justify',\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        if (!props.data) {\n            return <div />\n        }\n\n        return <Sankey {...props} />\n    },\n}\n","import { ScatterPlot } from '@nivo/scatterplot'\nimport { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface ScatterPlotNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: any\n    colors?: any\n    borderColor?: any\n    axisTop?: any\n    axisRight?: any\n    axisBottom?: any\n    axisLeft?: any\n}\n\nexport const ScatterPlotNodeService: NodeService<'node:scatterplot', ScatterPlotNodeData> = {\n    type: 'node:scatterplot',\n    category: 'charts',\n    description: `A ScatterPlot chart from @nivo/scatterplot package.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'data',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:series_xy'],\n        },\n        {\n            type: 'property:number',\n            name: 'width',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            name: 'height',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            name: 'borderColor',\n            type: 'property:ref',\n            category: 'colors_theming',\n        },\n        {\n            name: 'axisTop',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisRight',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisBottom',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisLeft',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        return <ScatterPlot {...props} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nconst SeriesXYNodeWidget = () => {\n    return <div>Custom</div>\n}\n\nexport const SeriesXYNodeService: NodeService<'node:series_xy', any> = {\n    type: 'node:series_xy',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'serie_0',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:serie_xy'],\n        },\n        {\n            name: 'serie_1',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:serie_xy'],\n        },\n    ],\n    factory: () => {\n        return {}\n    },\n    //widget: SeriesXYNodeWidget,\n    getValue: node => {\n        return node.properties.map(property => {\n            const propertyService = registry.getPropertyService(property.type)\n\n            // @ts-ignore\n            return propertyService.getValue(property, registry)\n        })\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface SerieXYNodeData {\n    id: string\n    data: {\n        x: number\n        y: number\n    }[]\n}\n\nexport const SerieXYNodeService: NodeService<'node:serie_xy', SerieXYNodeData> = {\n    type: 'node:serie_xy',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'id',\n            type: 'property:text',\n            category: 'data',\n            accepts: ['property:text'],\n            hasOutput: true,\n        },\n        {\n            name: 'data',\n            type: 'property:array_xy',\n            category: 'data',\n            accepts: ['property:array_xy'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            id: data?.id ?? '',\n            data: data?.data ?? [],\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\nimport {AiOutlineTable} from \"react-icons/ai\";\nimport styled from \"styled-components\";\nimport {getCategoryColor} from \"../../theming\";\n\nexport interface MatrixNodeData {\n    data: number[][]\n}\n\nconst MatrixNodeIcon = ({ size, category }: { size: number; category: string }) => {\n    return (\n        <Icon\n            category={category}\n            style={{\n                width: size,\n                height: size,\n            }}\n        >\n            <AiOutlineTable />\n        </Icon>\n    )\n}\n\nconst Icon = styled.div<{\n    category: string\n}>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n    \n    svg {\n        width: 70%;\n        height: 70%;\n    }\n`\n\nexport const MatrixNodeService: NodeService<'node:matrix', MatrixNodeData> = {\n    type: 'node:matrix',\n    category: 'data',\n    icon: MatrixNodeIcon,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'matrix',\n            type: 'property:matrix',\n            category: 'data',\n            accepts: ['property:matrix'],\n        },\n    ],\n    factory: data => {\n        return {\n            data: data?.data || [],\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties).matrix || []\n    },\n}\n","import styled from 'styled-components'\nimport { FiShare2 } from 'react-icons/fi'\nimport { NodeService } from '../../services_registry'\nimport registry from '../../registry'\nimport { getCategoryColor } from '../../theming'\n\nexport interface ValueLinksNodeData {\n    links: {\n        source: string\n        target: string\n        value: number\n    }[]\n}\n\nconst ValueLinksNodeIcon = ({ size, category }: { size: number; category: string }) => {\n    return (\n        <Icon\n            category={category}\n            style={{\n                width: size,\n                height: size,\n            }}\n        >\n            <FiShare2 />\n        </Icon>\n    )\n}\n\nconst Icon = styled.div<{\n    category: string\n}>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n\n    svg {\n        width: 70%;\n        height: 70%;\n    }\n`\n\nexport const ValueLinksNodeService: NodeService<'node:value_links', ValueLinksNodeData> = {\n    type: 'node:value_links',\n    description:\n        'An array of links between a source and a target plus a value bound to this relationship.',\n    category: 'data',\n    icon: ValueLinksNodeIcon,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'links',\n            type: 'property:array_value_link',\n            category: 'data',\n            accepts: ['property:array_value_link'],\n            hasOutput: true,\n        },\n    ],\n    // @ts-ignore\n    factory: (data = {}) => {\n        return {\n            // @ts-ignore\n            nodes: data?.nodes ? data.nodes.map(id => ({ id })) : [],\n            // @ts-ignore\n            links: data?.links ?? [],\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties).links\n    },\n}\n","import { ChangeEvent, Fragment, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { FiPlus } from 'react-icons/fi'\nimport { FaTimes } from 'react-icons/fa'\nimport { Property, useStore } from '../../../store'\nimport { Input } from '../../../components/ui'\n\nexport const ArrayStringPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:array_string', string[]>\n}) => {\n    const { updateProperty } = useStore()\n\n    const setValue = useCallback(\n        (value: string[]) => {\n            updateProperty(property.id, { data: value })\n        },\n        [updateProperty, property.id]\n    )\n\n    const handleChange = (itemIndex: number, event: ChangeEvent<HTMLInputElement>) => {\n        setValue(\n            property.data.map((item, index) => {\n                if (index !== itemIndex) return item\n\n                return event.target.value\n            })\n        )\n    }\n\n    const handleAdd = () => {\n        setValue([...property.data, ''])\n    }\n\n    const handleRemove = (index: number) => {\n        setValue(property.data.filter((_, i) => i !== index))\n    }\n\n    return (\n        <>\n            <Grid>\n                {property.data.map((item, index) => {\n                    return (\n                        <Fragment key={index}>\n                            <span>[{index}]</span>\n                            <Input\n                                type=\"text\"\n                                value={item}\n                                onChange={event => handleChange(index, event)}\n                                size={4}\n                            />\n                            <RemoveButton\n                                onClick={() => {\n                                    handleRemove(index)\n                                }}\n                            >\n                                <FaTimes />\n                            </RemoveButton>\n                        </Fragment>\n                    )\n                })}\n                <AddItemButton onClick={handleAdd}>\n                    <FiPlus /> Add item\n                </AddItemButton>\n            </Grid>\n        </>\n    )\n}\n\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: 28px 1fr 20px;\n    grid-column-gap: 6px;\n    grid-row-gap: 6px;\n    margin-bottom: 9px;\n    align-items: center;\n    font-size: 12px;\n`\n\nconst RemoveButton = styled.span`\n    width: 20px;\n    height: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 12px;\n    border-radius: 2px;\n    cursor: pointer;\n    color: #777777;\n\n    &:hover {\n        background-color: #333333;\n        color: ${props => props.theme.colors.accentColor};\n    }\n`\n\nconst AddItemButton = styled.div`\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    grid-column-start: 2;\n\n    svg {\n        margin-right: 9px;\n    }\n`\n","import { PropertyService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { ArrayStringPropertyControl } from './ArrayStringPropertyControl'\n\nexport const ArrayStringPropertyService: PropertyService<\n    'property:array_string',\n    string[],\n    never,\n    string[]\n> = {\n    type: 'property:array_string',\n    create: spec => ({\n        ...spec,\n        data: spec.data || [],\n    }),\n    getValue: property => {\n        return registry.resolvePropertyValue(property, property.data)\n    },\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ArrayStringPropertyControl,\n}\n","import { ChangeEvent } from 'react'\nimport styled from 'styled-components'\nimport { FiPlus } from 'react-icons/fi'\nimport { FaArrowRight } from 'react-icons/fa'\nimport { Property, useStore } from '../../../store'\nimport { ArrayValueLinkPropertyType } from './ArrayValueLinkPropertyService'\nimport { Input } from '../../../components/ui'\n\nexport const ArrayValueLinkPropertyControl = ({\n    property,\n}: {\n    property: Property<\n        ArrayValueLinkPropertyType,\n        {\n            source: string\n            target: string\n            value: number\n        }[]\n    >\n}) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (\n        itemIndex: number,\n        key: 'source' | 'target' | 'value',\n        event: ChangeEvent<HTMLInputElement>\n    ) => {\n        updateProperty(property.id, {\n            data: property.data.map((item, index) => {\n                if (index !== itemIndex) {\n                    return item\n                }\n\n                let value: string | number = event.target.value\n                if (key === 'value') {\n                    value = Number(value)\n                }\n\n                return {\n                    ...item,\n                    [key]: value,\n                }\n            }),\n        })\n    }\n\n    const handleAdd = () => {\n        updateProperty(property.id, {\n            data: [\n                ...property.data,\n                {\n                    source: '',\n                    target: '',\n                    value: 0,\n                },\n            ],\n        })\n    }\n\n    return (\n        <>\n            {property.data.map((item, index) => {\n                return (\n                    <ControlGroup key={index}>\n                        <Input\n                            type=\"text\"\n                            placeholder=\"source\"\n                            value={item.source}\n                            onChange={event => handleChange(index, 'source', event)}\n                        />\n                        <ToIcon>\n                            <FaArrowRight />\n                        </ToIcon>\n                        <Input\n                            type=\"text\"\n                            placeholder=\"target\"\n                            value={item.target}\n                            onChange={event => handleChange(index, 'target', event)}\n                        />\n                        <Input\n                            type=\"number\"\n                            value={item.value}\n                            onChange={event => handleChange(index, 'value', event)}\n                        />\n                    </ControlGroup>\n                )\n            })}\n            <ControlAddItemButton onClick={handleAdd}>\n                <FiPlus /> Add item\n            </ControlAddItemButton>\n        </>\n    )\n}\n\nconst ControlGroup = styled.div`\n    display: grid;\n    grid-template-columns: minmax(0, 1fr) 40px minmax(0, 1fr);\n    grid-row-gap: 4px;\n    font-size: 12px;\n    align-items: center;\n    margin-bottom: 9px;\n\n    input[type='number'] {\n        width: 60px;\n    }\n`\n\nconst ToIcon = styled.span`\n    display: flex;\n    justify-content: center;\n`\n\nconst ControlAddItemButton = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 3;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n\n    svg {\n        margin-right: 9px;\n    }\n`\n","import { PropertyService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { ArrayValueLinkPropertyControl } from './ArrayValueLinkPropertyControl'\n\nexport const arrayValueLinkPropertyType = 'property:array_value_link'\nexport type ArrayValueLinkPropertyType = typeof arrayValueLinkPropertyType\n\nexport const ArrayValueLinkPropertyService: PropertyService<\n    ArrayValueLinkPropertyType,\n    {\n        source: string\n        target: string\n        value: number\n    }[],\n    {},\n    {\n        source: string\n        target: string\n        value: number\n    }[]\n> = {\n    type: arrayValueLinkPropertyType,\n    create: spec => ({\n        ...spec,\n        data: spec.data || [],\n    }),\n    getValue: property => {\n        return registry.resolvePropertyValue(property, property.data)\n    },\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ArrayValueLinkPropertyControl,\n}\n","import { ChangeEvent, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { FiPlus } from 'react-icons/fi'\nimport { Property, useStore } from '../../../store'\nimport { ArrayXYPropertyType } from './ArrayXYPropertyService'\n\nexport const ArrayXYPropertyControl = ({\n    property,\n}: {\n    property: Property<\n        ArrayXYPropertyType,\n        {\n            x: number\n            y: number\n        }[]\n    >\n}) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (\n        itemIndex: number,\n        key: 'x' | 'y',\n        event: ChangeEvent<HTMLInputElement>\n    ) => {\n        updateProperty(property.id, {\n            data: property.data.map((item, index) => {\n                if (index !== itemIndex) {\n                    return item\n                }\n\n                return {\n                    ...item,\n                    [key]: Number(event.target.value),\n                }\n            }),\n        })\n    }\n\n    const handleAdd = () => {\n        updateProperty(property.id, {\n            data: [\n                ...property.data,\n                {\n                    x: 0,\n                    y: 0,\n                },\n            ],\n        })\n    }\n\n    return (\n        <ControlContainer>\n            {property.data.map((item, index) => {\n                return (\n                    <Fragment key={index}>\n                        x:{' '}\n                        <input\n                            type=\"number\"\n                            value={item.x}\n                            onChange={event => handleChange(index, 'x', event)}\n                            size={4}\n                        />\n                        y:{' '}\n                        <input\n                            type=\"number\"\n                            value={item.y}\n                            onChange={event => handleChange(index, 'y', event)}\n                        />\n                    </Fragment>\n                )\n            })}\n            <ControlAddItemButton onClick={handleAdd}>\n                <FiPlus /> Add item\n            </ControlAddItemButton>\n        </ControlContainer>\n    )\n}\n\nconst ControlContainer = styled.div`\n    display: grid;\n    grid-template-columns: 20px auto 20px auto;\n    grid-row-gap: 6px;\n\n    input {\n        width: 52px;\n    }\n`\n\nconst ControlAddItemButton = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 5;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n\n    svg {\n        margin-right: 9px;\n    }\n`\n","import { PropertyService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { ArrayXYPropertyControl } from './ArrayXYPropertyControl'\n\nexport const arrayXYPropertyType = 'property:array_xy'\nexport type ArrayXYPropertyType = typeof arrayXYPropertyType\n\nexport const ArrayXYPropertyService: PropertyService<\n    ArrayXYPropertyType,\n    {\n        x: number\n        y: number\n    }[],\n    {},\n    {\n        x: number\n        y: number\n    }[]\n> = {\n    type: arrayXYPropertyType,\n    create: spec => ({\n        ...spec,\n        data: spec.data || [],\n    }),\n    getValue: property => {\n        return registry.resolvePropertyValue(property, property.data)\n    },\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ArrayXYPropertyControl,\n}\n","import { ChangeEvent, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { Property, useStore } from '../../../store'\nimport { Input } from '../../../components/ui'\n\nexport const MatrixPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:matrix', number[][]>\n}) => {\n    const { updateProperty } = useStore()\n\n    const value = property.data\n\n    let xSize = 0\n    let ySize = 0\n    if (value.length > 0) {\n        ySize = value.length\n        if (Array.isArray(value[0])) {\n            xSize = value[0].length\n        }\n    }\n\n    const setValue = (valueUpdate: number[][]) => {\n        updateProperty(property.id, {\n            data: valueUpdate,\n        })\n    }\n\n    const handleSizeChange = (newXSize: number, newYSize: number) => {\n        let newValue = value.slice(0, newYSize)\n        for (let newRowIndex = 0; newRowIndex < newYSize - ySize; newRowIndex++) {\n            newValue.push(Array.from({ length: newXSize }).fill(0) as number[])\n        }\n        newValue = newValue.map(row => {\n            const newRow = row.slice(0, newXSize)\n            for (let newColumnIndex = 0; newColumnIndex < newXSize - xSize; newColumnIndex++) {\n                newRow.push(0)\n            }\n\n            return newRow\n        })\n\n        setValue(newValue)\n    }\n\n    const handleValueChange = (\n        targetRowIndex: number,\n        targetColumnIndex: number,\n        event: ChangeEvent<HTMLInputElement>\n    ) => {\n        setValue(\n            value.map((row, rowIndex) => {\n                if (targetRowIndex !== rowIndex) {\n                    return row\n                }\n\n                return row.map((cell, columnIndex) => {\n                    if (targetColumnIndex !== columnIndex) {\n                        return cell\n                    }\n\n                    return Number(event.target.value)\n                })\n            })\n        )\n    }\n\n    return (\n        <>\n            <SizeContainer>\n                x size\n                <Input\n                    type=\"number\"\n                    value={xSize}\n                    onChange={event => handleSizeChange(Number(event.target.value), ySize)}\n                />\n                y size\n                <Input\n                    type=\"number\"\n                    value={ySize}\n                    onChange={event => handleSizeChange(xSize, Number(event.target.value))}\n                />\n            </SizeContainer>\n            <MatrixWrapper>\n                <MatrixContainer columns={xSize} rows={ySize}>\n                    {value.map((row, rowIndex) => {\n                        return (\n                            <Fragment key={rowIndex}>\n                                {row.map((cell, columnIndex) => (\n                                    <Input\n                                        key={columnIndex}\n                                        type=\"number\"\n                                        value={cell}\n                                        onChange={event =>\n                                            handleValueChange(rowIndex, columnIndex, event)\n                                        }\n                                    />\n                                ))}\n                            </Fragment>\n                        )\n                    })}\n                </MatrixContainer>\n            </MatrixWrapper>\n        </>\n    )\n}\n\nconst SizeContainer = styled.div`\n    display: grid;\n    grid-template-columns: minmax(0, 1fr) minmax(0, 2fr) minmax(0, 1fr) minmax(0, 2fr);\n    grid-column-gap: 9px;\n    align-items: center;\n    font-size: 12px;\n    white-space: nowrap;\n    margin-bottom: 9px;\n`\n\nconst MatrixWrapper = styled.div`\n    overflow-x: scroll;\n`\n\nconst MatrixContainer = styled.div<{\n    columns: number\n    rows: number\n}>`\n    display: grid;\n    grid-template-columns: repeat(${props => props.columns}, minmax(50px, 1fr));\n    grid-template-rows: repeat(${props => props.rows}, 1fr);\n    grid-column-gap: 4px;\n    grid-row-gap: 4px;\n`\n","import { PropertyService } from '../../../services_registry'\nimport { MatrixPropertyControl } from './MatrixPropertyControl'\n\nexport const MatrixPropertyService: PropertyService<\n    'property:matrix',\n    number[][],\n    never,\n    number[][]\n> = {\n    type: 'property:matrix',\n    create: spec => ({\n        ...spec,\n        data: spec.data || [],\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: MatrixPropertyControl,\n}\n","import { PropertyService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { NumberPropertyOptions } from './types'\nimport { NumberPropertyControl } from './NumberPropertyControl'\n\nexport const NumberPropertyService: PropertyService<\n    'property:number',\n    number,\n    NumberPropertyOptions,\n    number\n> = {\n    type: 'property:number',\n    create: ({ options: partialOptions = {}, ...spec }) => {\n        const options = {\n            controlType: partialOptions.controlType || 'number',\n            min: partialOptions.min !== undefined ? partialOptions.min : undefined,\n            max: partialOptions.max !== undefined ? partialOptions.max : undefined,\n            step: partialOptions.step || 1,\n        }\n\n        return {\n            ...spec,\n            options,\n        }\n    },\n    getValue: property => {\n        return registry.resolvePropertyValue(property, property.data)\n    },\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: NumberPropertyControl,\n}\n","import { ChangeEvent } from 'react'\nimport { Property, useStore } from '../../../store'\nimport { Input } from '../../../components/ui'\nimport { NumberPropertyOptions } from './types'\n\nexport const NumberPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:number', number, NumberPropertyOptions>\n}) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        updateProperty(property.id, {\n            data: Number(event.target.value),\n        })\n    }\n\n    if (property.options.controlType === 'number') {\n        return (\n            <Input\n                type=\"number\"\n                value={property.data}\n                onChange={handleChange}\n                min={property.options.min}\n                max={property.options.max}\n                step={property.options.step}\n            />\n        )\n    }\n\n    return (\n        <Input\n            type=\"range\"\n            value={property.data}\n            onChange={handleChange}\n            min={property.options.min}\n            max={property.options.max}\n            step={property.options.step}\n        />\n    )\n}\n","import styled from 'styled-components'\n\nexport const Input = styled.input`\n    border: none;\n    padding: 3px 6px;\n    border-radius: 2px;\n    font-family: inherit;\n    background-color: ${props => props.theme.colors.inputBackground};\n    color: ${props => props.theme.colors.inputText};\n    font-size: 12px;\n    cursor: pointer;\n\n    &[type='number'] {\n        text-align: right;\n    }\n\n    &:focus {\n        outline: 0;\n        background-color: #bbbbbb;\n        color: #000000;\n        cursor: auto;\n    }\n`\n","import { memo, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { useSettings, useSetSettings } from '../store'\n\nexport const AppFooter = memo(() => {\n    const settings = useSettings()\n    const setSettings = useSetSettings()\n\n    const { animateLinks, discreteLinks } = settings\n\n    const toggleAnimateLinks = useCallback(\n        () =>\n            setSettings({\n                animateLinks: !animateLinks,\n            }),\n        [setSettings, animateLinks]\n    )\n\n    const toggleDiscreteLinks = useCallback(\n        () =>\n            setSettings({\n                discreteLinks: !discreteLinks,\n            }),\n        [setSettings, discreteLinks]\n    )\n\n    return (\n        <Container>\n            <SettingItem onClick={toggleAnimateLinks}>\n                <span>animate links</span>\n                <SettingItemButton>{animateLinks ? 'on' : 'off'}</SettingItemButton>\n            </SettingItem>\n            <SettingItem onClick={toggleDiscreteLinks}>\n                <span>discrete links</span>\n                <SettingItemButton>{discreteLinks ? 'on' : 'off'}</SettingItemButton>\n            </SettingItem>\n        </Container>\n    )\n})\n\nconst Container = styled.footer`\n    position: fixed;\n    display: flex;\n    align-items: center;\n    left: 64px;\n    bottom: 0;\n    width: calc(100% - 364px);\n    height: 36px;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n`\n\nconst SettingItem = styled.div`\n    user-select: none;\n    display: flex;\n    align-items: center;\n    height: 100%;\n    padding: 0 12px;\n    font-size: 11px;\n    color: ${props => props.theme.colors.textLight};\n    border-right: 1px solid ${props => props.theme.colors.lightBorder};\n    cursor: pointer;\n\n    &:hover {\n        background-color: ${props => props.theme.colors.topDepthBackground};\n        color: ${props => props.theme.colors.text};\n    }\n`\n\nconst SettingItemButton = styled.span`\n    padding: 3px 0;\n    display: flex;\n    justify-content: center;\n    width: 32px;\n    margin-left: 6px;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n    border-radius: 2px;\n    font-weight: 600;\n`\n","import styled from 'styled-components'\n\nexport const AppHeader = () => {\n    return <Header>{/*<Title>nivo graph editor</Title>*/}</Header>\n}\n\nconst Header = styled.header`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 46px;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n    display: flex;\n    align-items: center;\n    padding-left: 64px;\n`\n\n/*\nconst Title = styled.h1`\n    margin: 0;\n    padding: 0;\n    font-size: 14px;\n    color: ${props => props.theme.colors.accentColor};\n    text-transform: uppercase;\n`\n*/\n","import { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { FaChevronRight, FaCheck } from 'react-icons/fa'\nimport { useStore } from '../../store'\n\nconst ICON_SIZE = 24\nconst ICON_SPACING = 16\n\nexport const LinkingLayer = () => {\n    const { linking } = useStore()\n\n    if (!linking.isLinking) {\n        return null\n    }\n\n    let iconPosition: [number, number]\n    if (linking.type === 'source') {\n        iconPosition = [linking.position[0] + ICON_SPACING, linking.position[1] - ICON_SIZE / 2]\n    } else {\n        iconPosition = [\n            linking.position[0] - ICON_SIZE - ICON_SPACING,\n            linking.position[1] - ICON_SIZE / 2,\n        ]\n    }\n\n    let icon: ReactNode = <FaChevronRight />\n    if (linking.potentialId) {\n        icon = <FaCheck />\n    }\n\n    return (\n        <svg\n            style={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                pointerEvents: 'none',\n            }}\n        >\n            <Line\n                strokeLinecap=\"round\"\n                x1={linking.anchor[0]}\n                x2={linking.position[0]}\n                y1={linking.anchor[1]}\n                y2={linking.position[1]}\n            />\n            <Circle cx={linking.position[0]} cy={linking.position[1]} r={4} />\n            <foreignObject x={iconPosition[0]} y={iconPosition[1]} width={24} height={24}>\n                <Icon isValid={!!linking.potentialId}>{icon}</Icon>\n            </foreignObject>\n        </svg>\n    )\n}\n\nconst Line = styled.line`\n    stroke-width: 3px;\n    stroke: ${props => props.theme.colors.accentColor};\n`\n\nconst Circle = styled.circle`\n    fill: ${props => props.theme.colors.accentColor};\n`\n\nconst Icon = styled.div<{\n    isValid: boolean\n}>`\n    width: ${ICON_SIZE}px;\n    height: ${ICON_SIZE}px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n    color: ${props =>\n        props.isValid ? props.theme.colors.success : props.theme.colors.accentColor};\n    border: 2px solid\n        ${props => (props.isValid ? props.theme.colors.success : props.theme.colors.accentColor)};\n    border-radius: ${ICON_SIZE / 2}px;\n    font-size: 12px;\n`\n","import { ResolvedLink } from '../../store'\nimport { LinkWidget } from '../widgets'\n\nexport const LinksLayer = ({ links }: { links: ResolvedLink[] }) => {\n    return (\n        <svg\n            style={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                pointerEvents: 'none',\n            }}\n        >\n            {links.map(link => (\n                <LinkWidget key={link.id} link={link} />\n            ))}\n        </svg>\n    )\n}\n","import styled from 'styled-components'\nimport { ResolvedNode } from '../../store'\nimport { NodeWidget } from '../widgets'\n\nexport const NodesLayer = ({ nodes }: { nodes: ResolvedNode[] }) => {\n    return (\n        <Layer>\n            {nodes.map(node => (\n                <NodeWidget key={node.id} node={node} />\n            ))}\n        </Layer>\n    )\n}\n\nconst Layer = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n`\n","import {\n    ChangeEvent,\n    KeyboardEvent as ReactKeyboardEvent,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    memo,\n} from 'react'\nimport styled from 'styled-components'\nimport { MdEdit } from 'react-icons/md'\nimport { ElementId, useUpdateNode } from '../../store'\nimport { useDocumentEventListener } from '../../utils/useDocumentEventListener'\n\nexport const NodeName = memo(({ id, name: currentName }: { id: ElementId; name: string }) => {\n    const [isEditing, setIsEditing] = useState(false)\n    const [name, setName] = useState(currentName)\n    const updateNode = useUpdateNode()\n    const inputRef = useRef<HTMLInputElement | null>(null)\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current?.focus()\n        }\n    }, [isEditing, inputRef])\n\n    useEffect(() => {\n        setName(currentName)\n        setIsEditing(false)\n    }, [currentName, setName, setIsEditing])\n\n    const handleChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            setName(event.target.value)\n        },\n        [setName]\n    )\n\n    const handleEnter = (event: ReactKeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            updateNode(id, { name })\n            setIsEditing(false)\n        }\n    }\n\n    const handleEscape = useCallback(\n        (event: KeyboardEvent) => {\n            if (event.key === 'Escape') {\n                setIsEditing(false)\n            }\n        },\n        [setIsEditing]\n    )\n    useDocumentEventListener('keydown', handleEscape)\n\n    return (\n        <Container\n            onClick={() => {\n                if (!isEditing) {\n                    setIsEditing(true)\n                }\n            }}\n        >\n            {!isEditing && (\n                <>\n                    <Name>{currentName}</Name>\n                    <Icon>\n                        <MdEdit />\n                    </Icon>\n                </>\n            )}\n            {isEditing && (\n                <Input\n                    ref={inputRef}\n                    onKeyPress={handleEnter}\n                    type=\"text\"\n                    value={name}\n                    onChange={handleChange}\n                />\n            )}\n        </Container>\n    )\n})\n\nconst Icon = styled.span`\n    margin-left: 12px;\n    width: 24px;\n    height: 24px;\n    border-radius: 3px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #333333;\n    color: #999999;\n    cursor: pointer;\n    flex-shrink: 0;\n`\n\nconst Input = styled.input`\n    width: calc(100% - 32px);\n    height: 32px;\n    border: none;\n    padding: 5px 9px;\n    border-radius: 2px;\n    font-weight: 800;\n    font-family: inherit;\n    background-color: #aaaaaa;\n    font-size: 14px;\n\n    &:focus {\n        outline: 0;\n    }\n`\n\nconst Name = styled.span`\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n\nconst Container = styled.div`\n    height: 32px;\n    padding: 0;\n    margin: 0 32px 5px 0;\n    font-size: 16px;\n    font-weight: 800;\n    display: flex;\n    align-items: center;\n`\n","import { useEffect } from 'react'\n\n/**\n * This hook can be used to attach event listener to the document,\n * it will take care of removing/updating the listener if it changes,\n * and will also remove the listener when the component it's attached\n * to is unmounted.\n */\nexport const useDocumentEventListener = <K extends keyof DocumentEventMap>(\n    eventType: K,\n    listener: (this: Document, event: DocumentEventMap[K]) => any\n) => {\n    useEffect(() => {\n        document.addEventListener(eventType, listener)\n\n        return () => {\n            document.removeEventListener(eventType, listener)\n        }\n    }, [listener])\n}\n","import styled from 'styled-components'\nimport { ReactNode } from 'react'\n\nexport const ConfirmButtons = ({\n    confirmLabel = 'yes',\n    onConfirm,\n    cancelLabel = 'no',\n    onCancel,\n}: {\n    confirmLabel?: ReactNode\n    onConfirm: () => void\n    cancelLabel?: ReactNode\n    onCancel: () => void\n}) => {\n    return (\n        <Container>\n            <Button onClick={onConfirm}>{confirmLabel}</Button>\n            <Button onClick={onCancel}>{cancelLabel}</Button>\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    padding: 16px;\n    display: flex;\n    justify-content: center;\n`\n\nconst Button = styled.span`\n    padding: 9px 12px;\n    background-color: #000000;\n    border-radius: 2px;\n    margin-left: 12px;\n    cursor: pointer;\n    width: 80px;\n    text-align: center;\n\n    &:first-child {\n        margin-left: 0;\n    }\n`\n","import { ReactNode, KeyboardEvent } from 'react'\nimport { createPortal } from 'react-dom'\nimport styled from 'styled-components'\n\nexport const Modal = ({\n    children,\n    maxWidth,\n    onCloseRequest,\n}: {\n    children: ReactNode\n    maxWidth?: number\n    onCloseRequest(): void\n}) => {\n    const handleKeydown = (event: KeyboardEvent) => {}\n\n    return createPortal(\n        <Container role=\"dialog\" aria-modal=\"true\" onKeyDown={handleKeydown}>\n            <Background onClick={onCloseRequest} />\n            <Content maxWidth={maxWidth}>{children}</Content>\n        </Container>,\n        document.body\n    )\n}\n\nconst Container = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: auto;\n    padding: 12px;\n`\n\nconst Background = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 1;\n    background-color: ${props => props.theme.colors.overlay};\n`\n\nconst Content = styled.div<{\n    maxWidth?: number\n}>`\n    position: relative;\n    z-index: 2;\n    width: 100%;\n    background: ${props => props.theme.colors.topDepthBackground};\n    backdrop-filter: none;\n    max-width: ${props => (props.maxWidth ? `${props.maxWidth}px` : 'none')};\n    max-height: 100%;\n    overflow-y: scroll;\n    box-shadow: 0 0 0 5px ${props => props.theme.colors.border};\n`\n\nexport const ModalTitle = styled.h2`\n    margin: 0;\n    padding: 9px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n\n    svg {\n        color: ${props => props.theme.colors.accentColor};\n        margin-right: 12px;\n    }\n`\n","import { memo, useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { FiTrash2 } from 'react-icons/fi'\nimport { ResolvedNode, useRemoveNode } from '../../store'\nimport { ConfirmButtons } from '../ui/ConfirmButtons'\nimport { Modal, ModalTitle } from '../Modal'\n\nexport const NodeControls = memo(({ node }: { node: ResolvedNode }) => {\n    const nodeId = node.id\n\n    const removeNode = useRemoveNode()\n\n    const [isRemoving, setIsRemoving] = useState(false)\n\n    const initRemoval = useCallback(() => {\n        setIsRemoving(true)\n    }, [setIsRemoving])\n\n    const cancelRemoval = useCallback(() => {\n        setIsRemoving(false)\n    }, [setIsRemoving])\n\n    const handleRemoveNode = useCallback(() => {\n        removeNode(nodeId)\n    }, [removeNode, nodeId])\n\n    return (\n        <Container>\n            <Control onClick={initRemoval}>\n                <FiTrash2 />\n            </Control>\n            {isRemoving && (\n                <Modal onCloseRequest={cancelRemoval} maxWidth={500}>\n                    <ModalTitle>\n                        <FiTrash2 /> Remove node: {node.name}?\n                    </ModalTitle>\n                    <ConfirmButtons onConfirm={handleRemoveNode} onCancel={cancelRemoval} />\n                </Modal>\n            )}\n        </Container>\n    )\n})\n\nconst Container = styled.div`\n    height: 33px;\n    width: 100%;\n    display: flex;\n    justify-content: flex-end;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n`\n\nconst Control = styled.span`\n    width: 33px;\n    height: 32px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    border-left: 1px solid ${props => props.theme.colors.lightBorder};\n    font-size: 16px;\n\n    &:hover {\n        background-color: #222222;\n    }\n`\n","import { createElement, useCallback, memo } from 'react'\nimport styled from 'styled-components'\nimport { FaTimes } from 'react-icons/fa'\nimport { ElementId, ResolvedProperty, useSetSelectedNodeIds, useUnlink } from '../../store'\nimport registry from '../../registry'\n\nconst Relation = memo(\n    ({\n        ownId,\n        elementId,\n        nodeId,\n        name,\n        parentName,\n    }: {\n        ownId: ElementId\n        elementId: ElementId\n        nodeId: ElementId\n        name: string\n        parentName?: string\n    }) => {\n        const setSelectedNodeIds = useSetSelectedNodeIds()\n        const unlink = useUnlink()\n\n        const goToRelation = useCallback(() => {\n            setSelectedNodeIds([nodeId])\n        }, [setSelectedNodeIds, nodeId])\n\n        const handleUnlink = useCallback(() => {\n            unlink(elementId, ownId)\n        }, [unlink, ownId, elementId])\n\n        return (\n            <RelationContainer>\n                <RelationName onClick={goToRelation}>\n                    {parentName && <span>{parentName}.</span>}\n                    {name}\n                </RelationName>\n                <UnlinkIcon onClick={handleUnlink}>\n                    <FaTimes />\n                </UnlinkIcon>\n            </RelationContainer>\n        )\n    }\n)\n\nexport const PropertyItem = memo(({ property }: { property: ResolvedProperty }) => {\n    const propertyService = registry.getPropertyService(property.type)\n\n    const hasInput = property.input !== undefined\n\n    return (\n        <Container>\n            <PropertyHeader>\n                <PropertyName>{property.name}</PropertyName>\n                {hasInput && (\n                    <Relation\n                        ownId={property.id}\n                        elementId={property.input!.id}\n                        nodeId={\n                            property.input!.elementType === 'node'\n                                ? property.input!.id\n                                : (property.input! as any).node.id\n                        }\n                        name={property.input!.name}\n                        parentName={\n                            property.input!.elementType === 'property'\n                                ? (property.input! as any).node.name\n                                : undefined\n                        }\n                    />\n                )}\n            </PropertyHeader>\n            {!hasInput && 'control' in propertyService && propertyService.control !== undefined && (\n                <ControlContainer>\n                    {/* @ts-ignore */}\n                    {createElement(propertyService.control, { property })}\n                </ControlContainer>\n            )}\n        </Container>\n    )\n})\n\nconst Container = styled.div`\n    padding: 9px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.lightBorder};\n\n    &:last-child {\n        border-bottom: none;\n    }\n`\n\nconst PropertyHeader = styled.div`\n    display: grid;\n    grid-template-columns: 40% 60%;\n    align-items: center;\n`\n\nconst PropertyName = styled.h4`\n    margin: 0;\n    padding: 0;\n`\n\nconst RelationContainer = styled.div`\n    display: flex;\n    align-items: center;\n    height: 24px;\n    border-radius: 2px;\n    color: ${props => props.theme.colors.accentColor};\n`\n\nconst RelationName = styled.span`\n    padding: 0 6px;\n    height: 100%;\n    flex-grow: 1;\n    line-height: 24px;\n    cursor: pointer;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    background-color: ${props => props.theme.colors.badgeBackground};\n    font-weight: 600;\n    font-size: 11px;\n\n    &:hover {\n        background-color: #444444;\n    }\n`\n\nconst UnlinkIcon = styled.span`\n    width: 24px;\n    height: 24px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-shrink: 0;\n    background-color: #444444;\n    border-radius: 0 2px 2px 0;\n    font-size: 10px;\n    cursor: pointer;\n\n    &:hover {\n        background-color: #555555;\n    }\n`\n\nconst ControlContainer = styled.div`\n    margin-top: 6px;\n`\n","import { createElement, memo, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { MdClose } from 'react-icons/md'\nimport registry from '../../registry'\nimport { ResolvedNode, useSetSelectedNodeIds } from '../../store'\nimport { NodeName } from './NodeName'\nimport { NodeControls } from './NodeControls'\nimport { PropertyItem } from './PropertyItem'\n\nexport const NodeInfoPanel = memo(({ node }: { node: ResolvedNode }) => {\n    const nodeService = registry.getNodeService(node.type)\n    const setSelectedNodeIds = useSetSelectedNodeIds()\n    // @ts-ignore\n    const value: any = nodeService.getValue(node, registry)\n\n    const handleClose = useCallback(() => {\n        setSelectedNodeIds([])\n    }, [setSelectedNodeIds])\n\n    return (\n        <div>\n            <Header>\n                <NodeName id={node.id} name={node.name} />\n                <NodeTypeContainer hasIcon={!!nodeService.icon}>\n                    {nodeService.icon && (\n                        <NodeTypeIcon>\n                            {createElement(nodeService.icon, {\n                                size: 38,\n                                category: nodeService.category,\n                            })}\n                        </NodeTypeIcon>\n                    )}\n                    <Id>{node.type.replace('node:', '').replace('_', ' ')}</Id>\n                </NodeTypeContainer>\n                <Close onClick={handleClose}>\n                    <MdClose />\n                </Close>\n            </Header>\n            <NodeControls node={node} />\n            <Properties>\n                {node.properties.map(property => (\n                    <PropertyItem key={property.id} property={property} />\n                ))}\n            </Properties>\n            {value !== undefined && (\n                <>\n                    <NodeValueTitle>Node value</NodeValueTitle>\n                    {!value.$$typeof && <NodeValue>{JSON.stringify(value, null, '  ')}</NodeValue>}\n                    {value.$$typeof && (\n                        <NodeValue>{JSON.stringify(value.props, null, '  ')}</NodeValue>\n                    )}\n                </>\n            )}\n        </div>\n    )\n})\n\nconst Header = styled.header`\n    padding: 9px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n    position: relative;\n`\n\nconst Id = styled.div`\n    font-size: 12px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n\nconst NodeTypeContainer = styled.div<{\n    hasIcon: boolean\n}>`\n    position: relative;\n    min-height: ${props => (props.hasIcon ? '36px' : 'auto')};\n    padding-left: ${props => (props.hasIcon ? '50px' : 0)};\n    display: flex;\n    align-items: center;\n`\n\nconst NodeTypeIcon = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Close = styled.span`\n    position: absolute;\n    width: 32px;\n    height: 32px;\n    top: 9px;\n    right: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    font-size: 18px;\n    color: #999999;\n\n    &:hover {\n        color: #eeeeee;\n    }\n`\n\nconst Properties = styled.div``\n\nconst NodeValueTitle = styled.h4`\n    border-top: 1px solid ${props => props.theme.colors.border};\n    padding: 6px 12px;\n    margin: 0;\n`\n\nconst NodeValue = styled.pre`\n    padding: 12px;\n    font-size: 12px;\n    margin: 0;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n`\n","import {\n    ChangeEvent,\n    createElement,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react'\nimport styled from 'styled-components'\nimport { FaSearch, FaTimes } from 'react-icons/fa'\nimport registry from '../registry'\nimport { useCreateNode } from '../store'\nimport { NodeService } from '../services_registry'\nimport { getCategoryColor } from '../theming'\n\nconst NodeType = ({ type, onCreate }: { type: NodeService; onCreate: () => void }) => {\n    const createNode = useCreateNode()\n    const hasIcon = type.icon !== undefined\n\n    return (\n        <NodeTypeItem\n            category={type.category}\n            hasIcon={hasIcon}\n            onClick={() => {\n                createNode(type.type)\n                onCreate()\n            }}\n        >\n            {type.icon && (\n                <NodeTypeIcon>\n                    {createElement(type.icon, { size: 42, category: type.category })}\n                </NodeTypeIcon>\n            )}\n            <div>\n                <NodeTypeTitle category={type.category}>\n                    {type.type.replace('node:', '').replace('_', ' ')}\n                </NodeTypeTitle>\n                {type.description && <NodeTypeDescription>{type.description}</NodeTypeDescription>}\n            </div>\n        </NodeTypeItem>\n    )\n}\n\nconst Category = ({\n    category,\n    onCreate,\n}: {\n    category: {\n        category: string\n        types: NodeService[]\n    }\n    onCreate: () => void\n}) => {\n    return (\n        <div>\n            <CategoryTitle category={category.category}>\n                {category.category.replace('_', ' ')}\n            </CategoryTitle>\n            {category.types.map(type => (\n                <NodeType key={type.type} type={type} onCreate={onCreate} />\n            ))}\n        </div>\n    )\n}\n\nexport const NodeSelector = ({ onCreate }: { onCreate: () => void }) => {\n    const categories = useMemo(() => registry.getNodeServiceCategories(), [])\n    const [searchTerm, setSearchTerm] = useState('')\n    const searchInput = useRef<HTMLInputElement>(null)\n\n    useEffect(() => {\n        if (searchInput.current) {\n            searchInput.current.focus()\n        }\n    }, [searchInput])\n\n    const handleSearchTermChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            setSearchTerm(event.target.value)\n        },\n        [setSearchTerm]\n    )\n\n    const clearSearch = useCallback(() => {\n        setSearchTerm('')\n    }, [setSearchTerm])\n\n    const filtered = useMemo(() => {\n        if (!searchTerm) {\n            return categories\n        }\n\n        return categories\n            .map(category => {\n                return {\n                    ...category,\n                    types: category.types.filter(type => {\n                        return type.type.indexOf(searchTerm) !== -1\n                    }),\n                }\n            })\n            .filter(category => category.types.length > 0)\n    }, [categories, searchTerm])\n\n    return (\n        <>\n            <SearchBox>\n                <SearchInput\n                    ref={searchInput}\n                    type=\"text\"\n                    placeholder=\"search node type\"\n                    value={searchTerm}\n                    onChange={handleSearchTermChange}\n                />\n                <SearchIcon\n                    hasSearchTerm={!!searchTerm}\n                    onClick={searchTerm ? clearSearch : undefined}\n                >\n                    {searchTerm ? <FaTimes /> : <FaSearch />}\n                </SearchIcon>\n            </SearchBox>\n            <Container>\n                {filtered.length === 0 && (\n                    <NoResult>\n                        No node found matching: \"<strong>{searchTerm}</strong>\"\n                    </NoResult>\n                )}\n                {filtered.map(category => (\n                    // @ts-ignore\n                    <Category key={category.category} category={category} onCreate={onCreate} />\n                ))}\n            </Container>\n        </>\n    )\n}\n\nconst NoResult = styled.div`\n    padding: 16px 12px;\n    color: ${props => props.theme.colors.textLight};\n\n    strong {\n        color: ${props => props.theme.colors.text};\n        font-weight: 600;\n    }\n`\n\nconst SearchBox = styled.div`\n    position: relative;\n    height: 39px;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n`\n\nconst SearchInput = styled.input`\n    background-color: ${props => props.theme.colors.inputBackground};\n    color: ${props => props.theme.colors.inputText};\n    width: 100%;\n    height: 100%;\n    border: none;\n    padding: 9px 12px 9px 40px;\n    font-size: 14px;\n    font-family: inherit;\n\n    &:focus {\n        outline: none;\n    }\n`\n\nconst SearchIcon = styled.span<{\n    hasSearchTerm: boolean\n}>`\n    position: absolute;\n    z-index: 1;\n    top: 0;\n    left: 0;\n    font-size: ${props => (props.hasSearchTerm ? 12 : 16)}px;\n    color: ${props => props.theme.colors.inputText};\n    opacity: ${props => (props.hasSearchTerm ? 0.6 : 0.4)};\n    width: 38px;\n    height: 38px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: ${props => (props.hasSearchTerm ? 'pointer' : 'auto')};\n`\n\nconst Container = styled.div`\n    height: 600px;\n    overflow-y: auto;\n`\n\nconst CategoryTitle = styled.h3<{\n    category: string\n}>`\n    padding: 9px 12px;\n    margin: 0;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n    font-size: 16px;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n`\n\nconst NodeTypeIcon = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 64px;\n    height: 64px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    opacity: 0.6;\n`\n\nconst NodeTypeItem = styled.div<{\n    hasIcon: boolean\n    category: string\n}>`\n    position: relative;\n    min-height: ${props => (props.hasIcon ? '64px' : 'auto')};\n    padding: 12px 12px 12px ${props => (props.hasIcon ? 68 : 12)}px;\n    border-bottom: 1px solid ${props => props.theme.colors.lightBorder};\n    font-size: 14px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n\n    &:after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        display: block;\n        height: 100%;\n        width: 4px;\n        background-color: ${props => getCategoryColor(props.category, props.theme)};\n        opacity: 0;\n    }\n\n    &:last-child {\n        border-bottom: none;\n    }\n\n    &:hover {\n        ${NodeTypeIcon} {\n            opacity: 1;\n        }\n        \n        &:after {\n            opacity: 1;\n        }\n    }\n`\n\nconst NodeTypeTitle = styled.h4<{\n    category: string\n}>`\n    margin: 0;\n    padding: 0;\n    font-size: 14px;\n    font-weight: 600;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n`\n\nconst NodeTypeDescription = styled.div`\n    font-weight: 400;\n    font-size: 12px;\n    margin-top: 6px;\n    color: ${props => props.theme.colors.text};\n`\n","import { PropsWithChildren } from 'react'\nimport styled from 'styled-components'\n\nconst Button = styled.div`\n    width: 64px;\n    height: 64px;\n    cursor: pointer;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n    color: ${props => props.theme.colors.textLight};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 22px;\n\n    &:hover {\n        background-color: #222222;\n        color: ${props => props.theme.colors.text};\n    }\n`\n\nexport const SidebarButton = ({\n    children,\n    onClick,\n}: PropsWithChildren<{\n    onClick: () => void\n}>) => {\n    return <Button onClick={onClick}>{children}</Button>\n}\n","import { useState, memo, useCallback } from 'react'\nimport { MdLibraryAdd } from 'react-icons/md'\nimport { Modal, ModalTitle } from '../Modal'\nimport { NodeSelector } from '../NodeSelector'\nimport { SidebarButton } from './SidebarButton'\n\nexport const AddNodeButton = memo(() => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    const handleOpen = useCallback(() => {\n        setIsOpen(true)\n    }, [setIsOpen])\n\n    const handleClose = useCallback(() => {\n        setIsOpen(false)\n    }, [setIsOpen])\n\n    return (\n        <>\n            <SidebarButton onClick={handleOpen}>\n                <MdLibraryAdd />\n            </SidebarButton>\n            {isOpen && (\n                <Modal onCloseRequest={handleClose} maxWidth={600}>\n                    <ModalTitle>\n                        <MdLibraryAdd /> Add new node\n                    </ModalTitle>\n                    <NodeSelector onCreate={handleClose} />\n                </Modal>\n            )}\n        </>\n    )\n})\n","import { useCallback, useState, memo } from 'react'\nimport { MdNoteAdd } from 'react-icons/md'\nimport { useLoadGraph } from '../../store'\nimport { ConfirmButtons } from '../ui/ConfirmButtons'\nimport { Modal, ModalTitle } from '../Modal'\nimport { SidebarButton } from './SidebarButton'\n\nexport const NewGraph = memo(() => {\n    const [isOpen, setIsOpen] = useState(false)\n    const loadGraph = useLoadGraph()\n\n    const handleNewGraph = useCallback(() => {\n        loadGraph({ nodes: [], links: [] })\n        setIsOpen(false)\n    }, [loadGraph, setIsOpen])\n\n    return (\n        <>\n            <SidebarButton\n                onClick={() => {\n                    setIsOpen(true)\n                }}\n            >\n                <MdNoteAdd />\n            </SidebarButton>\n            {isOpen && (\n                <Modal\n                    onCloseRequest={() => {\n                        setIsOpen(false)\n                    }}\n                    maxWidth={300}\n                >\n                    <ModalTitle>\n                        <MdNoteAdd /> Create new graph?\n                    </ModalTitle>\n                    <ConfirmButtons\n                        onConfirm={handleNewGraph}\n                        onCancel={() => {\n                            setIsOpen(false)\n                        }}\n                    />\n                </Modal>\n            )}\n        </>\n    )\n})\n","import { fileOpen, fileSave } from 'browser-nativefs'\nimport { ResolvedLink, ResolvedNode, serializeElements } from './store'\n\nexport const saveAsJSON = async (nodes: ResolvedNode[], links: ResolvedLink[]) => {\n    const serialized = serializeElements(nodes, links)\n    const stringified = JSON.stringify(\n        {\n            type: 'nivo-graph',\n            version: 'beta',\n            ...serialized,\n        },\n        null,\n        2\n    )\n\n    const blob = new Blob([stringified], {\n        type: 'application/json',\n    })\n\n    const fileHandle = await fileSave(\n        blob,\n        {\n            fileName: 'graph',\n            description: 'Nivo graph',\n            extensions: ['.json'],\n        },\n        null //appState.fileHandle\n    )\n\n    return { fileHandle }\n}\n\nexport const parseFileContent = async (blob: Blob | File) => {\n    let content: string\n    if ('text' in Blob) {\n        content = await blob.text()\n    } else {\n        content = await new Promise(resolve => {\n            const reader = new FileReader()\n            reader.readAsText(blob, 'utf8')\n            reader.onloadend = () => {\n                if (reader.readyState === FileReader.DONE) {\n                    resolve(reader.result as string)\n                }\n            }\n        })\n    }\n\n    return JSON.parse(content)\n}\n\nexport const loadFromJSON = async () => {\n    const blob = await fileOpen({\n        description: 'Nivo graph files',\n        extensions: ['.json', '.nivo'],\n        mimeTypes: ['application/json'],\n    })\n\n    const content = await parseFileContent(blob)\n    if (content.type !== 'nivo-graph') {\n        throw new Error('graph file is invalid')\n    }\n\n    return content\n}\n","import { MdSave } from 'react-icons/md'\nimport { ResolvedLink, ResolvedNode } from '../../store'\nimport { saveAsJSON } from '../../fs'\nimport { SidebarButton } from './SidebarButton'\n\ninterface SaveProps {\n    nodes: ResolvedNode[]\n    links: ResolvedLink[]\n}\n\nexport const SaveGraph = ({ nodes, links }: SaveProps) => {\n    const handleSave = () => {\n        saveAsJSON(nodes, links)\n    }\n\n    return (\n        <SidebarButton onClick={handleSave}>\n            <MdSave />\n        </SidebarButton>\n    )\n}\n","import { useCallback } from 'react'\nimport { MdFolderOpen } from 'react-icons/md'\nimport { loadFromJSON } from '../../fs'\nimport { useStore } from '../../store'\nimport { SidebarButton } from './SidebarButton'\n\nexport const OpenGraph = () => {\n    const { loadGraph } = useStore()\n\n    const handleOpen = useCallback(() => {\n        loadFromJSON().then(graph => {\n            loadGraph(graph)\n        })\n    }, [loadGraph])\n\n    return (\n        <SidebarButton onClick={handleOpen}>\n            <MdFolderOpen />\n        </SidebarButton>\n    )\n}\n","import { memo, useState } from 'react'\nimport styled from 'styled-components'\nimport { MdSettings } from 'react-icons/md'\nimport { themes } from '../../theming'\nimport { useSetSettings, useSettings } from '../../store'\nimport { Modal, ModalTitle } from '../Modal'\nimport { SidebarButton } from './SidebarButton'\n\nexport const Settings = memo(() => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    const settings = useSettings()\n    const setSettings = useSetSettings()\n\n    return (\n        <>\n            <SidebarButton\n                onClick={() => {\n                    setIsOpen(true)\n                }}\n            >\n                <MdSettings />\n            </SidebarButton>\n            {isOpen && (\n                <Modal\n                    onCloseRequest={() => {\n                        setIsOpen(false)\n                    }}\n                    maxWidth={500}\n                >\n                    <ModalTitle>\n                        <MdSettings /> Settings\n                    </ModalTitle>\n                    <Container>\n                        <span>Theme</span>\n                        <select\n                            value={settings.themeId}\n                            onChange={event => {\n                                setSettings({\n                                    themeId: event.target.value,\n                                })\n                            }}\n                        >\n                            {themes.map(theme => {\n                                return (\n                                    <option key={theme.id} value={theme.id}>\n                                        {theme.name}\n                                    </option>\n                                )\n                            })}\n                        </select>\n                    </Container>\n                </Modal>\n            )}\n        </>\n    )\n})\n\nconst Container = styled.div`\n    padding: 12px;\n    display: grid;\n    grid-template-columns: 90px 1fr;\n`\n","import styled from 'styled-components'\nimport { ResolvedLink, ResolvedNode } from '../../store'\nimport { AddNodeButton } from './AddNodeButton'\nimport { NewGraph } from './NewGraph'\nimport { SaveGraph } from './SaveGraph'\nimport { OpenGraph } from './OpenGraph'\nimport { Settings } from './Settings'\n\nexport const Sidebar = ({ nodes, links }: { nodes: ResolvedNode[]; links: ResolvedLink[] }) => {\n    return (\n        <Container>\n            <AddNodeButton />\n            <SaveGraph nodes={nodes} links={links} />\n            <OpenGraph />\n            <NewGraph />\n            <Settings />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    position: fixed;\n    top: 46px;\n    left: 0;\n    width: 64px;\n    height: 100%;\n    background: ${props => props.theme.colors.topDepthBackground};\n`\n","import chordExample from './chord.json'\nimport sankeyExample from './sankey.json'\nimport seriesExample from './series.json'\n\nexport const examples = [\n    {\n        name: 'Chord diagram',\n        data: chordExample,\n    },\n    {\n        name: 'Sankey diagram',\n        data: sankeyExample,\n    },\n    {\n        name: 'XY series charts',\n        data: seriesExample,\n    },\n]\n","import styled from 'styled-components'\nimport { FaExternalLinkAlt } from 'react-icons/fa'\nimport { examples } from '../examples'\nimport { useStore } from '../store'\nimport { useCallback } from 'react'\n\nconst ExampleItem = ({\n    example,\n    onLoad,\n}: {\n    example: {\n        name: string\n        data: any\n    }\n    onLoad: () => void\n}) => {\n    const { loadGraph } = useStore()\n\n    const handleLoad = useCallback(() => {\n        loadGraph(example.data)\n        onLoad()\n    }, [loadGraph, example.data, onLoad])\n\n    return (\n        <ExampleItemContainer onClick={handleLoad}>\n            {example.name}\n            <FaExternalLinkAlt />\n        </ExampleItemContainer>\n    )\n}\n\nconst ExampleItemContainer = styled.div`\n    display: flex;\n    padding: 6px 9px 6px 12px;\n    align-items: center;\n    background-color: #000000;\n    border-radius: 2px;\n    color: ${props => props.theme.colors.accentColor};\n    cursor: pointer;\n    margin: 0 12px 9px 0;\n\n    svg {\n        margin-left: 12px;\n    }\n\n    &:hover {\n        box-shadow: 0 0 0 2px pink;\n    }\n`\n\nexport const ExampleLoader = ({ onLoad }: { onLoad: () => void }) => {\n    return (\n        <Container>\n            {examples.map(example => (\n                <ExampleItem key={example.name} example={example} onLoad={onLoad} />\n            ))}\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    margin: 12px 0 3px;\n`\n","import { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, ModalTitle } from './Modal'\nimport { ExampleLoader } from './ExampleLoader'\n\nexport const Welcome = () => {\n    const [isOpen, setIsOpen] = useState(true)\n\n    const handleClose = useCallback(() => {\n        setIsOpen(false)\n    }, [setIsOpen])\n\n    return (\n        <>\n            {isOpen && (\n                <Modal onCloseRequest={handleClose} maxWidth={500}>\n                    <ModalTitle>Welcome</ModalTitle>\n                    <Message>\n                        <p>\n                            Welcome to the new nivo graph editor! This application is currently an\n                            early prototype, so things might (and will) break ¯\\_(ツ)_/¯, sorry for\n                            that.\n                        </p>\n                        <p>\n                            The motivation behind this project is to provide a way to visually\n                            create charts, without code, allowing people without too much technical\n                            background to easily use nivo charts.\n                        </p>\n                        <p>In order to get started, you can have a look at one of the example:</p>\n                        <ExampleLoader onLoad={handleClose} />\n                        <p>Otherwise, you can just start form scratch and craft your own chart.</p>\n                        <div\n                            style={{\n                                display: 'flex',\n                                justifyContent: 'center',\n                                margin: '12px 0',\n                            }}\n                        >\n                            <span\n                                onClick={handleClose}\n                                style={{\n                                    padding: '9px 12px',\n                                    backgroundColor: '#000',\n                                    borderRadius: '2px',\n                                    cursor: 'pointer',\n                                }}\n                            >\n                                Start from scratch\n                            </span>\n                        </div>\n                        <p>\n                            We hope you'll enjoy using this tool as much as we enjoy building it!\n                            &lt;3\n                        </p>\n                    </Message>\n                </Modal>\n            )}\n        </>\n    )\n}\n\nconst Message = styled.div`\n    padding: 12px 12px 0;\n    font-size: 12px;\n\n    p {\n        margin: 0 0 12px;\n    }\n`\n","import { MouseEvent, useCallback } from 'react'\nimport styled, { ThemeProvider } from 'styled-components'\nimport { useStore, useSelectedNodes, useGraph } from './store'\nimport { useCurrentTheme, GlobalStyle } from './theming'\nimport {\n    AppHeader,\n    AppFooter,\n    NodesLayer,\n    LinkingLayer,\n    LinksLayer,\n    NodeInfoPanel,\n    Sidebar,\n    Welcome,\n} from './components'\n\nexport const App = () => {\n    const store = useStore()\n    const theme = useCurrentTheme()\n    const { nodes, links } = useGraph()\n    const selectedNodes = useSelectedNodes()\n\n    const { dragging, updateDrag, stopDrag, linking, updateLinking, stopLinking } = store\n    const handleMouseMove = useCallback(\n        (event: MouseEvent) => {\n            if (dragging.isDragging) {\n                updateDrag([event.clientX, event.clientY])\n            }\n            if (linking.isLinking) {\n                updateLinking([event.clientX, event.clientY])\n            }\n        },\n        [dragging.isDragging, updateDrag, linking.isLinking, updateLinking]\n    )\n    const handleMouseOut = useCallback(\n        (event: MouseEvent) => {\n            if (dragging.isDragging) {\n                stopDrag()\n            }\n            if (linking.isLinking) {\n                stopLinking()\n            }\n        },\n        [dragging.isDragging, stopDrag, linking.isLinking, stopLinking]\n    )\n\n    return (\n        <ThemeProvider theme={theme}>\n            <GlobalStyle />\n            <AppHeader />\n            <Sidebar nodes={nodes} links={links} />\n            <Canvas\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseOut}\n                onMouseLeave={handleMouseOut}\n            >\n                <LinksLayer links={links} />\n                <NodesLayer nodes={nodes} />\n                <LinkingLayer />\n            </Canvas>\n            <InfoPanel>\n                {selectedNodes.length === 1 && <NodeInfoPanel node={selectedNodes[0]} />}\n            </InfoPanel>\n            <AppFooter />\n            <Welcome />\n        </ThemeProvider>\n    )\n}\n\nconst Canvas = styled.div`\n    position: fixed;\n    top: 46px;\n    bottom: 52px;\n    left: 64px;\n    width: calc(100% - 424px);\n    height: calc(100% - 82px);\n    background: ${props => props.theme.colors.background};\n    overflow: hidden;\n`\n\nconst InfoPanel = styled.div`\n    position: fixed;\n    top: 46px;\n    right: 0;\n    width: 360px;\n    height: 100%;\n    background: ${props => props.theme.colors.topDepthBackground};\n    overflow-y: auto;\n`\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}