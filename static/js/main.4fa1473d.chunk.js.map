{"version":3,"sources":["state/generateElementId.ts","state/types.ts","services_registry.ts","node_services/AreaBumpNodeService.tsx","node_services/AxisNodeService.ts","node_services/BlendModeNodeService.ts","node_services/CanvasNodeService.tsx","node_services/ChordNodeService.tsx","node_services/ColorSchemeNodeService.ts","node_services/LineNodeService.tsx","node_services/MarginNodeService.tsx","node_services/ScatterPlotNodeService.tsx","node_services/SeriesXYNodeService.tsx","node_services/SerieXYNodeService.ts","components/ui/Input.tsx","property_services/AnglePropertyService.tsx","property_services/ArrayStringPropertyService.tsx","property_services/ArrayXYPropertyService.tsx","property_services/ChoicesPropertyService.tsx","property_services/BlendModePropertyService.tsx","property_services/MatrixPropertyService.tsx","property_services/NumberPropertyService.tsx","property_services/RefPropertyService.tsx","property_services/TextPropertyService.tsx","registry.ts","node_services/NivoThemeNodeService.tsx","node_services/SquareMatrixNodeService.tsx","state/store.ts","components/AppFooter.tsx","components/AppHeader.tsx","components/LinkingLayer.tsx","components/LinkWidget.tsx","components/LinksLayer.tsx","components/NodeInfoPanel/NodeName.tsx","utils/useDocumentEventListener.ts","components/NodeInfoPanel/PropertyItem.tsx","components/NodeInfoPanel/NodeInfoPanel.tsx","components/PortWidget.tsx","components/PropertyWidget.tsx","components/PropertiesWidget.tsx","components/NodeWidget.tsx","components/NodesLayer.tsx","components/Modal.tsx","components/SidebarButton.tsx","components/NodeSelector.tsx","components/AddNodeButton.tsx","components/NewGraph.tsx","fs.ts","components/SaveGraph.tsx","components/OpenGraph.tsx","components/Sidebar.tsx","examples/index.ts","components/ExampleLoader.tsx","components/Welcome.tsx","App.tsx","state/nodes.ts","reportWebVitals.js","index.tsx"],"names":["generateElementId","uuidV4","isProperty","element","elementType","isNode","isLink","ServiceRegistry","nodeServices","propertyServices","this","nodeService","type","nodeType","Error","grouped","Object","entries","groupBy","sortBy","group","map","category","types","propertyService","propertyType","property","ownValue","input","getPropertyService","getValue","getNodeService","AreaBumpNodeService","description","hasOutput","properties","name","hasInput","factory","data","width","height","spacing","xPadding","registry","value","forEach","isInteractive","AxisNodeService","tickSize","tickPadding","tickRotation","legend","legendOffset","propertyValues","keyBy","nodeValue","BlendModeNodeService","blendMode","node","CanvasNodeService","content","undefined","widget","props","style","backgroundColor","overflow","ChordNodeService","keys","innerRadiusRatio","innerRadiusOffset","Array","isArray","matrix","ColorSchemeNodeService","choices","label","scheme","find","LineNodeService","MarginNodeService","top","right","bottom","left","ScatterPlotNodeService","SeriesXYNodeService","SerieXYNodeService","id","Input","styled","AnglePropertyService","defaultValue","serialize","hydrate","control","onChange","event","console","log","target","ControlContainer","div","ControlAddItemButton","ArrayStringPropertyService","updateProperty","useStore","item","index","itemIndex","handleChange","size","onClick","ArrayXYPropertyService","key","Number","x","y","ChoicesPropertyControl","choice","ChoicesPropertyService","blendModeChoices","BlendModePropertyService","MatrixPropertyService","xSize","ySize","length","setValue","valueUpdate","handleSizeChange","newXSize","newYSize","newValue","slice","newRowIndex","push","from","fill","row","newRow","newColumnIndex","display","gridTemplateColumns","rowIndex","cell","columnIndex","targetRowIndex","targetColumnIndex","handleValueChange","NumberPropertyService","resolvePropertyValue","RefPropertyService","TextPropertyService","servicesRegistry","registerNodeService","fontFamily","fontSize","textColor","grid","line","stroke","tooltip","container","background","color","borderRadius","boxShadow","padding","registerPropertyService","updateNodePosition","elements","nodeId","offset","includes","create","set","selectedNodeIds","setSelectedNodeIds","createNode","state","newNode","replace","newProperties","newProperty","removeNode","filter","updateNode","patch","propertyId","loadGraph","graph","nodes","propertyIds","links","link","sourceId","targetId","drag","isDragging","elementId","initial","startDrag","updateDrag","position","stopDrag","linking","isLinking","anchor","previous","startLinking","updateLinking","setLinkingPotentialPort","potentialId","resetLinkingPotentialPort","stopLinking","unlink","serializeProperties","serializeElements","source","useGraph","useMemo","resolvedNodes","propertiesByNodeId","resolvedProperties","resolvedLinks","isSelected","propertyNode","dependencies","values","resolveGraph","AppFooter","Container","footer","AppHeader","Header","Title","header","h1","ICON_SIZE","LinkingLayer","iconPosition","icon","iconColor","pointerEvents","strokeWidth","strokeLinecap","x1","x2","y1","y2","cx","cy","r","Icon","borderColor","lineGenerator","d3Line","curve","curveBasis","LinkWidget","xDistance","shouldAddOffset","Math","abs","LINK_ENDINGS_OFFSET","points","yDistance","midPoint","d","LinksLayer","NodeName","useState","isEditing","setIsEditing","setName","inputRef","useRef","useEffect","current","focus","eventType","listener","useCallback","handleEscape","document","addEventListener","removeEventListener","Name","ref","onKeyPress","span","Relation","ownId","goToRelation","handleUnlink","RelationContainer","RelationName","UnlinkIcon","PropertyItem","PropertyHeader","PropertyName","createElement","h4","NodeInfoPanel","handleClose","Id","Close","Properties","NodeValueTitle","$$typeof","NodeValue","JSON","stringify","pre","PortWidget","handleLinking","stopPropagation","clientX","clientY","handleMouseEnter","handleMouseLeave","onMouseDown","onMouseEnter","onMouseLeave","Port","PORT_SIZE","CONTAINER_SIZE","PropertyWidget","PropertyContainer","PropertiesWidget","NodeContainer","NodeHeader","NodeWidget","hasCustomWidget","handleStartDrag","NodesLayer","Modal","children","maxWidth","onCloseRequest","createPortal","role","aria-modal","onKeyDown","Background","Content","body","ModalTitle","h2","Button","SidebarButton","CategoryTitle","h3","NodeTypeItem","NodeTypeDescription","NodeSelector","onCreate","categories","getNodeServiceCategories","AddNodeButton","isOpen","setIsOpen","NewGraph","handleNewGraph","ConfirmContainer","saveAsJSON","a","serialized","stringified","version","blob","Blob","fileSave","fileName","extensions","fileHandle","parseFileContent","text","Promise","resolve","reader","FileReader","readAsText","onloadend","readyState","DONE","result","parse","loadFromJSON","fileOpen","mimeTypes","SaveGraph","OpenGraph","handleOpen","then","Sidebar","examples","ExampleItem","example","onLoad","handleLoad","ExampleItemContainer","ExampleLoader","Welcome","Message","justifyContent","margin","cursor","App","store","selectedNodes","useSelectedNodes","handleMouseMove","handleMouseOut","Canvas","onMouseMove","onMouseUp","InfoPanel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4fa1473d.chunk.js","sourcesContent":["import { v4 as uuidV4 } from 'uuid'\nimport { ElementId } from './types'\n\nexport const generateElementId = (): ElementId => uuidV4()\n","export type ElementId = string\n\nexport interface CreateProperty {\n    type: string\n    name: string\n    hasInput?: boolean\n    hasOutput?: boolean\n}\n\nexport interface Property extends CreateProperty {\n    name: string\n    hasInput: boolean\n    hasOutput: boolean\n    id: ElementId\n    elementType: 'property'\n    nodeId: ElementId\n    x: number\n    y: number\n    width: number\n    height: number\n}\n\nexport interface ResolvedProperty extends Property {\n    node: ResolvedNode\n    dependencies: (ResolvedNode | ResolvedProperty)[]\n    input?: ResolvedNode | ResolvedProperty\n}\n\nexport const isProperty = (element: Element): element is Property =>\n    element.elementType === 'property'\n\nexport interface Node<Data = any> {\n    elementType: 'node'\n    type: string\n    id: ElementId\n    x: number\n    y: number\n    width: number\n    name: string\n    data: Data\n    height: number\n    properties: ElementId[]\n}\n\nexport interface ResolvedNode extends Omit<Node, 'properties'> {\n    isSelected: boolean\n    properties: ResolvedProperty[]\n}\n\nexport interface SerializedNode {\n    id: ElementId\n    type: string\n    name: string\n    x: number\n    y: number\n    width: number\n}\n\nexport interface SerializedElements {\n    nodes: SerializedNode[]\n    links: any[]\n}\n\nexport const isNode = (element: Element): element is Node => element.elementType === 'node'\n\nexport interface Link {\n    id: ElementId\n    elementType: 'link'\n    sourceId: ElementId\n    targetId: ElementId\n}\n\nexport const isLink = (element: Element): element is Link => element.elementType === 'link'\n\nexport interface ResolvedLink extends Link {\n    source: ResolvedNode | ResolvedProperty\n    target: ResolvedNode | ResolvedProperty\n}\n\nexport type Element = Node | Property | Link\n\nexport type State = {\n    // flat representation of all nodes/properties/links\n    elements: Element[]\n    selectedNodeIds: ElementId[]\n    setSelectedNodeIds: (ids: ElementId[]) => void\n    createNode: (type: string) => void\n    updateNode: (id: ElementId, patch: any) => void\n    removeNode: (id: ElementId) => void\n    updateProperty: (propertyId: ElementId, patch: any) => void\n    loadGraph: (graph: any) => void\n    //\n    // DRAGGING\n    //\n    drag: {\n        isDragging: boolean\n        elementId: ElementId | null\n        initial: [number, number]\n        offset: [number, number]\n    }\n    startDrag: (elementId: ElementId, initial: [number, number]) => void\n    updateDrag: (position: [number, number]) => void\n    stopDrag: () => void\n    //\n    // LINKING\n    //\n    linking: {\n        isLinking: boolean\n        elementId?: ElementId\n        potentialId?: ElementId\n        type: 'source' | 'target'\n        anchor: [number, number]\n        position: [number, number]\n        previous: [number, number]\n    }\n    startLinking: (props: {\n        elementId?: ElementId\n        type: 'source' | 'target'\n        anchor: [number, number]\n        initial: [number, number]\n    }) => void\n    updateLinking: (position: [number, number]) => void\n    setLinkingPotentialPort: (elementId: ElementId, type: 'source' | 'target') => void\n    resetLinkingPotentialPort: () => void\n    stopLinking: () => void\n    link: (sourceId: ElementId, targetId: ElementId) => void\n    unlink: (sourceId: ElementId, targetId: ElementId) => void\n}\n","import { groupBy, sortBy } from 'lodash'\nimport { CreateProperty, Property, ResolvedNode, ResolvedProperty } from './state'\n\nexport interface NodeService<Type extends string, Data> {\n    type: Type\n    category: string\n    description?: string\n    hasOutput: boolean\n    properties: CreateProperty[]\n    factory: (data?: Partial<Data>) => Data\n    getValue: (node: ResolvedNode, registry: ServiceRegistry) => any\n    widget?: (props: { node: ResolvedNode; registry: ServiceRegistry }) => JSX.Element\n}\n\nexport interface PropertyService<\n    Type extends string,\n    Options,\n    PropertyData = never,\n    Value = never\n> {\n    type: Type\n    factory: (options: Options) => CreateProperty\n    serialize: (property: ResolvedProperty) => any\n    hydrate: (property: Property, data: any) => Property\n    getValue: (property: PropertyData, registry: ServiceRegistry) => Value\n    widget?: (props: { property: Property & PropertyData }) => JSX.Element\n    control?: (props: { property: Property & PropertyData }) => JSX.Element\n}\n\nexport class ServiceRegistry {\n    nodeServices: Record<string, NodeService<string, any>>\n    propertyServices: Record<string, PropertyService<string, any, any, any>>\n\n    constructor() {\n        this.nodeServices = {}\n        this.propertyServices = {}\n    }\n\n    registerNodeService(nodeService: NodeService<string, any>) {\n        this.nodeServices[nodeService.type] = nodeService\n\n        return this\n    }\n\n    getNodeService(nodeType: string): NodeService<string, any> {\n        const nodeService = this.nodeServices[nodeType]\n        if (!nodeService) {\n            throw new Error(`no node service defined for: ${nodeType}`)\n        }\n\n        return nodeService\n    }\n\n    getNodeServiceCategories() {\n        const grouped = Object.entries(groupBy(this.nodeServices, 'category'))\n        const sorted = sortBy(grouped, group => group[0])\n\n        return sorted.map(group => ({\n            category: group[0],\n            types: sortBy(group[1], 'type'),\n        }))\n    }\n\n    registerPropertyService(propertyService: PropertyService<any, any, any, any>) {\n        this.propertyServices[propertyService.type] = propertyService\n\n        return this\n    }\n\n    getPropertyService(propertyType: string): PropertyService<any, any, any, any> {\n        const propertyService = this.propertyServices[propertyType]\n        if (!propertyService) {\n            throw new Error(`no property service defined for: ${propertyType}`)\n        }\n\n        return propertyService\n    }\n\n    resolvePropertyValue(property: ResolvedProperty, ownValue?: any) {\n        const { input } = property\n        if (!input) {\n            return ownValue\n        }\n\n        if (input.elementType === 'property') {\n            return this.getPropertyService(input.type).getValue(input, this)\n        }\n\n        if (input.elementType === 'node') {\n            return this.getNodeService(input.type).getValue(input, this)\n        }\n    }\n}\n","import { AreaBump } from '@nivo/bump'\nimport { NodeService } from '../services_registry'\n\nexport interface AreaBumpNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: any\n    spacing: number\n    xPadding: number\n    colors?: any\n    blendMode?: string\n    borderColor?: any\n    axisTop?: any\n    axisBottom?: any\n}\n\nexport const AreaBumpNodeService: NodeService<'area_bump', AreaBumpNodeData> = {\n    type: 'area_bump',\n    category: 'charts',\n    description: `An AreaBump chart from @nivo/bump package.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'ref',\n            name: 'data',\n            hasInput: true,\n        },\n        {\n            type: 'number',\n            name: 'width',\n            hasInput: true,\n            hasOutput: true,\n        },\n        {\n            type: 'number',\n            name: 'height',\n            hasInput: true,\n            hasOutput: true,\n        },\n        {\n            type: 'ref',\n            name: 'margin',\n            hasInput: true,\n        },\n        {\n            type: 'number',\n            name: 'spacing',\n        },\n        {\n            type: 'number',\n            name: 'xPadding',\n        },\n        {\n            type: 'ref',\n            name: 'theme',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'colors',\n            hasInput: true,\n        },\n        {\n            type: 'blend_mode',\n            name: 'blendMode',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'borderColor',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'axisTop',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'axisBottom',\n            hasInput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n            spacing: data?.spacing ?? 3,\n            xPadding: data?.xPadding ?? 0.6,\n        }\n    },\n    getValue: ({ properties }, registry) => {\n        const value: any = {}\n        properties.forEach(property => {\n            value[property.name] = registry\n                .getPropertyService(property.type)\n                .getValue(property, registry)\n        })\n\n        return <AreaBump {...value} isInteractive={false} />\n    },\n}\n","import { keyBy } from 'lodash'\nimport { NodeService } from '../services_registry'\n\nexport interface AxisNodeData {\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    legend?: string\n    legendOffset: number\n}\n\nexport const AxisNodeService: NodeService<'axis', AxisNodeData> = {\n    type: 'axis',\n    category: 'axis_grid',\n    description: `X or Y axis to be used in various chart types.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'number',\n            name: 'tickSize',\n            hasInput: true,\n        },\n        {\n            type: 'number',\n            name: 'tickPadding',\n            hasInput: true,\n        },\n        {\n            type: 'angle',\n            name: 'tickRotation',\n            hasInput: true,\n        },\n        {\n            type: 'text',\n            name: 'legend',\n        },\n        {\n            type: 'number',\n            name: 'legendOffset',\n            hasInput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            tickSize: data?.tickSize ?? 5,\n            tickPadding: data?.tickPadding ?? 5,\n            tickRotation: data?.tickRotation ?? 0,\n            legend: data?.legend,\n            legendOffset: data?.legendOffset ?? 0,\n        }\n    },\n    getValue: ({ properties }) => {\n        const propertyValues: any = keyBy(properties, 'name')\n\n        const nodeValue: any = {\n            tickSize: propertyValues.tickSize.value,\n            tickPadding: propertyValues.tickPadding.value,\n            tickRotation: propertyValues.tickRotation.value,\n            legendOffset: propertyValues.legendOffset.value,\n        }\n\n        if (propertyValues.legend.value) {\n            nodeValue.legend = propertyValues.legend.value\n        }\n\n        return nodeValue\n    },\n}\n","import { NodeService } from '../services_registry'\n\nexport interface BlendModeNodeData {\n    blendMode: string\n}\n\nexport const BlendModeNodeService: NodeService<'blend_mode', BlendModeNodeData> = {\n    type: 'blend_mode',\n    category: 'colors',\n    hasOutput: true,\n    properties: [\n        {\n            type: 'blend_mode',\n            name: 'blendMode',\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            blendMode: data?.blendMode ?? 'normal',\n        }\n    },\n    getValue: node => {\n        return (node.properties[0] as any).value\n    },\n}\n","import { ResolvedNode } from '../state'\nimport { NodeService, ServiceRegistry } from '../services_registry'\n\nconst CanvasNodeWidget = ({\n    node,\n    registry,\n}: {\n    node: ResolvedNode\n    registry: ServiceRegistry\n}) => {\n    const props: any = {}\n    node.properties.forEach(property => {\n        props[property.name] = registry\n            .getPropertyService(property.type)\n            .getValue(property, registry)\n    })\n\n    return (\n        <div\n            style={{\n                width: props.width,\n                height: props.height,\n                backgroundColor: '#000000',\n                overflow: 'hidden',\n            }}\n        >\n            {props.content}\n        </div>\n    )\n}\n\nexport interface CanvasNodeData {\n    content?: any\n    width: number\n    height: number\n}\n\nexport const CanvasNodeService: NodeService<'canvas', CanvasNodeData> = {\n    type: 'canvas',\n    category: 'render',\n    description: `A canvas to render a React node.`,\n    hasOutput: false,\n    properties: [\n        {\n            type: 'ref',\n            name: 'content',\n            hasInput: true,\n        },\n        {\n            type: 'number',\n            name: 'width',\n            hasInput: true,\n        },\n        {\n            type: 'number',\n            name: 'height',\n            hasInput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            content: undefined,\n            width: data?.width ?? 300,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: () => ({}),\n    widget: CanvasNodeWidget,\n}\n","import { Chord } from '@nivo/chord'\nimport { NodeService } from '../services_registry'\n\nexport interface ChordNodeData {\n    matrix?: any\n    keys?: any\n    width: number\n    height: number\n    margin?: any\n    innerRadiusRatio: number\n    innerRadiusOffset: number\n    theme?: any\n    colors?: any\n}\n\nexport const ChordNodeService: NodeService<'chord', ChordNodeData> = {\n    type: 'chord',\n    category: 'charts',\n    description: `An Chord diagram from @nivo/chord package.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'ref',\n            name: 'matrix',\n            hasInput: true,\n        },\n        {\n            type: 'array_string',\n            name: 'keys',\n            hasInput: true,\n        },\n        {\n            type: 'number',\n            name: 'width',\n            hasInput: true,\n            hasOutput: true,\n        },\n        {\n            type: 'number',\n            name: 'height',\n            hasInput: true,\n            hasOutput: true,\n        },\n        {\n            type: 'ref',\n            name: 'margin',\n            hasInput: true,\n        },\n        {\n            type: 'number',\n            name: 'innerRadiusRatio',\n        },\n        {\n            type: 'number',\n            name: 'innerRadiusOffset',\n        },\n        {\n            type: 'ref',\n            name: 'theme',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'colors',\n            hasInput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            keys: data?.keys ?? [],\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n            innerRadiusRatio: data?.innerRadiusRatio ?? 0.9,\n            innerRadiusOffset: data?.innerRadiusOffset ?? 0,\n        }\n    },\n    getValue: ({ properties }, registry) => {\n        const value: any = {}\n        properties.forEach(property => {\n            value[property.name] = registry\n                .getPropertyService(property.type)\n                .getValue(property, registry)\n        })\n\n        // check if the chart can be rendered\n        if (!Array.isArray(value.matrix) || !Array.isArray(value.keys)) {\n            return <div />\n        }\n\n        return <Chord {...value} isInteractive={true} />\n    },\n}\n","import { NodeService } from '../services_registry'\n\nconst schemeChoices = [\n    { label: 'nivo', value: 'nivo' },\n    { label: 'Category 10', value: 'category10' },\n    { label: 'Accent', value: 'accent' },\n    { label: 'Dark 2', value: 'dark2' },\n    { label: 'Paired', value: 'paired' },\n    { label: 'Pastel 1', value: 'pastel1' },\n    { label: 'Pastel 2', value: 'pastel2' },\n    { label: 'Set 1', value: 'set1' },\n    { label: 'Set 2', value: 'set2' },\n    { label: 'Set 3', value: 'set3' },\n    { label: 'Brown - Blue Green', value: 'brown_blueGreen' },\n    { label: 'Purple Red - Green', value: 'purpleRed_green' },\n    { label: 'Pink - Yellow Green', value: 'pink_yellowGreen' },\n    { label: 'Purple - Orange', value: 'purple_orange' },\n    { label: 'Red - Blue', value: 'red_blue' },\n    { label: 'Red - Grey', value: 'red_grey' },\n    { label: 'Red - Yellow - Blue', value: 'red_yellow_blue' },\n    { label: 'Red - Yellow - Green', value: 'red_yellow_green' },\n    { label: 'Spectral', value: 'spectral' },\n]\n\nexport interface ColorSchemeNodeData {\n    scheme: string\n}\n\nexport const ColorSchemeNodeService: NodeService<'color_scheme', ColorSchemeNodeData> = {\n    type: 'color_scheme',\n    category: 'colors',\n    description: `A predefined color scheme to be used with nivo charts.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'choices',\n            name: 'scheme',\n            choices: schemeChoices,\n        } as any,\n    ],\n    factory: (data = {}) => {\n        return {\n            scheme: data?.scheme ?? 'nivo',\n        }\n    },\n    getValue: node => {\n        const schemeProperty = node.properties.find(property => property.name === 'scheme') as any\n\n        return {\n            scheme: schemeProperty.value,\n        }\n    },\n}\n","import { Line } from '@nivo/line'\nimport { NodeService } from '../services_registry'\n\nexport interface LineNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: number\n    colors?: any\n    axisTop?: any\n    axisRight?: any\n    axisBottom?: any\n    axisLeft?: any\n}\n\nexport const LineNodeService: NodeService<'line', LineNodeData> = {\n    type: 'line',\n    category: 'charts',\n    description: `A Line chart from @nivo/line package.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'ref',\n            name: 'data',\n            hasInput: true,\n        },\n        {\n            type: 'number',\n            name: 'width',\n            hasInput: true,\n            hasOutput: true,\n        },\n        {\n            type: 'number',\n            name: 'height',\n            hasInput: true,\n            hasOutput: true,\n        },\n        {\n            type: 'ref',\n            name: 'margin',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'theme',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'colors',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'axisTop',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'axisRight',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'axisBottom',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'axisLeft',\n            hasInput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: ({ properties }, registry) => {\n        const value: any = {}\n        properties.forEach(property => {\n            value[property.name] = registry\n                .getPropertyService(property.type)\n                .getValue(property, registry)\n        })\n\n        return <Line {...value} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../services_registry'\n\nexport interface MarginNodeData {\n    top: number\n    right: number\n    bottom: number\n    left: number\n}\n\nexport const MarginNodeService: NodeService<'margin', MarginNodeData> = {\n    type: 'margin',\n    category: 'dimensions',\n    description: `Top/right/bottom/left margins for charts.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'number',\n            name: 'top',\n        },\n        {\n            type: 'number',\n            name: 'right',\n        },\n        {\n            type: 'number',\n            name: 'bottom',\n        },\n        {\n            type: 'number',\n            name: 'left',\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            top: data?.top ?? 0,\n            right: data?.right ?? 0,\n            bottom: data?.bottom ?? 0,\n            left: data?.left ?? 0,\n        }\n    },\n    getValue: ({ properties }, registry) => {\n        const value: any = {}\n        properties.forEach(property => {\n            value[property.name] = registry\n                .getPropertyService(property.type)\n                .getValue(property, registry)\n        })\n\n        return value\n    },\n}\n","import { ScatterPlot } from '@nivo/scatterplot'\nimport { NodeService } from '../services_registry'\n\nexport interface ScatterPlotNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: any\n    colors?: any\n    borderColor?: any\n    axisTop?: any\n    axisRight?: any\n    axisBottom?: any\n    axisLeft?: any\n}\n\nexport const ScatterPlotNodeService: NodeService<'scatterplot', ScatterPlotNodeData> = {\n    type: 'scatterplot',\n    category: 'charts',\n    description: `A ScatterPlot chart from @nivo/scatterplot package.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'ref',\n            name: 'data',\n            hasInput: true,\n        },\n        {\n            type: 'number',\n            name: 'width',\n            hasInput: true,\n            hasOutput: true,\n        },\n        {\n            type: 'number',\n            name: 'height',\n            hasInput: true,\n            hasOutput: true,\n        },\n        {\n            type: 'ref',\n            name: 'margin',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'theme',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'colors',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'borderColor',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'axisTop',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'axisRight',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'axisBottom',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'axisLeft',\n            hasInput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: ({ properties }, registry) => {\n        const value: any = {}\n        properties.forEach(property => {\n            value[property.name] = registry\n                .getPropertyService(property.type)\n                .getValue(property, registry)\n        })\n\n        return <ScatterPlot {...value} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../services_registry'\n\nconst SeriesXYNodeWidget = () => {\n    return <div>Custom</div>\n}\n\nexport const SeriesXYNodeService: NodeService<'series_xy', any> = {\n    type: 'series_xy',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            type: 'ref',\n            name: 'serie_0',\n            hasInput: true,\n        },\n        {\n            type: 'ref',\n            name: 'serie_1',\n            hasInput: true,\n        },\n    ],\n    factory: () => {\n        return {}\n    },\n    widget: SeriesXYNodeWidget,\n    getValue: (node, registry) => {\n        return node.properties.map(property => {\n            const propertyService = registry.getPropertyService(property.type)\n\n            return propertyService.getValue(property, registry)\n        })\n    },\n}\n","import { keyBy } from 'lodash'\nimport { NodeService } from '../services_registry'\n\nexport interface SerieXYNodeData {\n    id: string\n    data: {\n        x: number\n        y: number\n    }[]\n}\n\nexport const SerieXYNodeService: NodeService<'serie_xy', SerieXYNodeData> = {\n    type: 'serie_xy',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            type: 'text',\n            name: 'id',\n        },\n        {\n            type: 'array_xy',\n            name: 'data',\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            id: data?.id ?? '',\n            data: data?.data ?? [],\n        }\n    },\n    getValue: ({ properties }) => {\n        const propertyValues: any = keyBy(properties, 'name')\n\n        return {\n            id: propertyValues.id.value,\n            data: propertyValues.data.value,\n        }\n    },\n}\n","import styled from 'styled-components'\n\nexport const Input = styled.input`\n    border: none;\n    padding: 3px 6px;\n    border-radius: 2px;\n    font-family: inherit;\n    background-color: #333333;\n    color: #eeeeee;\n    font-size: 12px;\n    cursor: pointer;\n\n    &:focus {\n        outline: 0;\n        background-color: #bbbbbb;\n        color: #000000;\n        cursor: auto;\n    }\n`\n","import { ChangeEvent } from 'react'\nimport { PropertyService } from '../services_registry'\nimport { Input } from '../components/ui'\n\nexport type AnglePropertyOptions = {\n    name: string\n    defaultValue?: number\n    hasInput?: boolean\n    hasOutput?: boolean\n}\n\nexport type AngleProperty = {\n    value: number\n}\n\nexport const AnglePropertyService: PropertyService<\n    'angle',\n    AnglePropertyOptions,\n    AngleProperty,\n    number\n> = {\n    type: 'angle',\n    factory: ({\n        name,\n        defaultValue,\n        hasInput = false,\n        hasOutput = false,\n    }: AnglePropertyOptions) => {\n        return {\n            name,\n            type: 'angle',\n            value: defaultValue,\n            hasInput,\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    getValue: data => {\n        return data.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n        }\n    },\n    control: ({ property }) => {\n        const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            console.log(event.target.value)\n        }\n\n        return <Input type=\"number\" value={property.value} onChange={handleChange} />\n    },\n}\n","import { ChangeEvent } from 'react'\nimport styled from 'styled-components'\nimport { FiPlus } from 'react-icons/fi'\nimport { PropertyService } from '../services_registry'\nimport { Property, useStore } from '../state'\nimport { Input } from '../components/ui'\n\nexport type ArrayStringPropertyOptions = {\n    name: string\n    defaultValue?: string[]\n    hasInput?: boolean\n    hasOutput?: boolean\n}\n\nexport type ArrayStringProperty = {\n    value: string[]\n}\n\nconst ControlContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-row-gap: 6px;\n\n    input {\n        width: 52px;\n    }\n`\n\nconst ControlAddItemButton = styled.div`\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n\n    svg {\n        margin-right: 9px;\n    }\n`\n\nconst ArrayStringPropertyControl = ({ property }: { property: Property & ArrayStringProperty }) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (itemIndex: number, event: ChangeEvent<HTMLInputElement>) => {\n        updateProperty(property.id, {\n            value: property.value.map((item, index) => {\n                if (index !== itemIndex) {\n                    return item\n                }\n\n                return event.target.value\n            }),\n        })\n    }\n\n    const handleAdd = () => {\n        updateProperty(property.id, {\n            value: [...property.value, ''],\n        })\n    }\n\n    return (\n        <ControlContainer>\n            {property.value.map((item, index) => {\n                return (\n                    <Input\n                        key={index}\n                        type=\"text\"\n                        value={item}\n                        onChange={event => handleChange(index, event)}\n                        size={4}\n                    />\n                )\n            })}\n            <ControlAddItemButton onClick={handleAdd}>\n                <FiPlus /> Add item\n            </ControlAddItemButton>\n        </ControlContainer>\n    )\n}\n\nexport const ArrayStringPropertyService: PropertyService<\n    'array_string',\n    ArrayStringPropertyOptions,\n    ArrayStringProperty,\n    string[]\n> = {\n    type: 'array_string',\n    factory: ({\n        name,\n        defaultValue = [],\n        hasInput = false,\n        hasOutput = false,\n    }: ArrayStringPropertyOptions) => {\n        return {\n            name,\n            type: 'array_string',\n            value: defaultValue,\n            hasInput,\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data || [],\n        }\n    },\n    getValue: data => {\n        return data.value\n    },\n    control: ArrayStringPropertyControl,\n}\n","import { ChangeEvent, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { FiPlus } from 'react-icons/fi'\nimport { PropertyService } from '../services_registry'\nimport { Property, useStore } from '../state'\n\nexport type ArrayXYPropertyOptions = {\n    name: string\n    defaultValue?: {\n        x: number\n        y: number\n    }[]\n    hasInput?: boolean\n    hasOutput?: boolean\n}\n\nexport type ArrayXYProperty = {\n    value: {\n        x: number\n        y: number\n    }[]\n}\n\nconst ControlContainer = styled.div`\n    display: grid;\n    grid-template-columns: 20px auto 20px auto;\n    grid-row-gap: 6px;\n\n    input {\n        width: 52px;\n    }\n`\n\nconst ControlAddItemButton = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 5;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n\n    svg {\n        margin-right: 9px;\n    }\n`\n\nconst ArrayXYPropertyControl = ({ property }: { property: Property & ArrayXYProperty }) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (\n        itemIndex: number,\n        key: 'x' | 'y',\n        event: ChangeEvent<HTMLInputElement>\n    ) => {\n        updateProperty(property.id, {\n            value: property.value.map((item, index) => {\n                if (index !== itemIndex) {\n                    return item\n                }\n\n                return {\n                    ...item,\n                    [key]: Number(event.target.value),\n                }\n            }),\n        })\n    }\n\n    const handleAdd = () => {\n        updateProperty(property.id, {\n            value: [\n                ...property.value,\n                {\n                    x: 0,\n                    y: 0,\n                },\n            ],\n        })\n    }\n\n    return (\n        <ControlContainer>\n            {property.value.map((item, index) => {\n                return (\n                    <Fragment key={index}>\n                        x:{' '}\n                        <input\n                            type=\"number\"\n                            value={item.x}\n                            onChange={event => handleChange(index, 'x', event)}\n                            size={4}\n                        />\n                        y:{' '}\n                        <input\n                            type=\"number\"\n                            value={item.y}\n                            onChange={event => handleChange(index, 'y', event)}\n                        />\n                    </Fragment>\n                )\n            })}\n            <ControlAddItemButton onClick={handleAdd}>\n                <FiPlus /> Add item\n            </ControlAddItemButton>\n        </ControlContainer>\n    )\n}\n\nexport const ArrayXYPropertyService: PropertyService<\n    'array_xy',\n    ArrayXYPropertyOptions,\n    ArrayXYProperty,\n    {\n        x: number\n        y: number\n    }[]\n> = {\n    type: 'array_xy',\n    factory: ({\n        name,\n        defaultValue = [],\n        hasInput = false,\n        hasOutput = false,\n    }: ArrayXYPropertyOptions) => {\n        return {\n            name,\n            type: 'array_xy',\n            value: defaultValue,\n            hasInput,\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n        }\n    },\n    getValue: data => {\n        return data.value\n    },\n    control: ArrayXYPropertyControl,\n}\n","import { PropertyService } from '../services_registry'\nimport { useStore, Property } from '../state'\nimport { ChangeEvent } from 'react'\n\nexport type ChoiceProperty = {\n    choices: {\n        label: string\n        value: string | number\n    }[]\n    value: string | number\n}\n\nexport type ChoicesPropertyOptions = {\n    name: string\n    defaultValue?: ChoiceProperty['value']\n    choices: ChoiceProperty['choices']\n    hasInput?: boolean\n    hasOutput?: boolean\n}\n\nexport const ChoicesPropertyControl = ({ property }: { property: Property & ChoiceProperty }) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n        updateProperty(property.id, {\n            value: event.target.value,\n        })\n    }\n\n    return (\n        <select value={property.value} onChange={handleChange}>\n            {property.choices.map(choice => {\n                return (\n                    <option key={choice.value} value={choice.value}>\n                        {choice.label}\n                    </option>\n                )\n            })}\n        </select>\n    )\n}\n\nexport const ChoicesPropertyService: PropertyService<\n    'choices',\n    ChoicesPropertyOptions,\n    ChoiceProperty,\n    string | number\n> = {\n    type: 'choices',\n    factory: ({\n        name,\n        choices,\n        defaultValue,\n        hasInput = false,\n        hasOutput = false,\n    }: ChoicesPropertyOptions) => {\n        return {\n            name,\n            type: 'choices',\n            choices,\n            value: defaultValue,\n            hasInput,\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n        }\n    },\n    getValue: data => {\n        return data.value\n    },\n    control: ChoicesPropertyControl,\n}\n","import { PropertyService } from '../services_registry'\nimport {\n    ChoicesPropertyOptions,\n    ChoiceProperty,\n    ChoicesPropertyService,\n    ChoicesPropertyControl,\n} from './ChoicesPropertyService'\n\nconst blendModeChoices = [\n    { label: 'normal', value: 'normal' },\n    { label: 'multiply', value: 'multiply' },\n    { label: 'screen', value: 'screen' },\n    { label: 'overlay', value: 'overlay' },\n    { label: 'darken', value: 'darken' },\n    { label: 'lighten', value: 'lighten' },\n    { label: 'color-dodge', value: 'color-dodge' },\n    { label: 'color-burn', value: 'color-burn' },\n    { label: 'hard-light', value: 'hard-light' },\n    { label: 'soft-light', value: 'soft-light' },\n    { label: 'difference', value: 'difference' },\n    { label: 'exclusion', value: 'exclusion' },\n    { label: 'hue', value: 'hue' },\n    { label: 'saturation', value: 'saturation' },\n    { label: 'color', value: 'color' },\n    { label: 'luminosity', value: 'luminosity' },\n]\n\nexport const BlendModePropertyService: PropertyService<\n    'blend_mode',\n    ChoicesPropertyOptions,\n    ChoiceProperty,\n    string | number\n> = {\n    type: 'blend_mode',\n    factory: ({ name, defaultValue, hasInput = false, hasOutput = false }: any) =>\n        ChoicesPropertyService.factory({\n            name,\n            defaultValue,\n            hasInput,\n            hasOutput,\n            choices: blendModeChoices,\n        }),\n    serialize: ChoicesPropertyService.serialize,\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n            choices: blendModeChoices,\n        }\n    },\n    getValue: ChoicesPropertyService.getValue,\n    control: ChoicesPropertyControl,\n}\n","import { ChangeEvent, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { PropertyService } from '../services_registry'\nimport { Property, useStore } from '../state'\n\nexport type MatrixPropertyOptions = {\n    name: string\n    defaultValue?: number[][]\n    hasInput?: boolean\n    hasOutput?: boolean\n}\n\nexport type MatrixProperty = {\n    value: number[][]\n}\n\nconst MatrixPropertyControl = ({ property }: { property: Property & MatrixProperty }) => {\n    const { updateProperty } = useStore()\n\n    const value = property.value\n\n    let xSize = 0\n    let ySize = 0\n    if (value.length > 0) {\n        ySize = value.length\n        if (Array.isArray(value[0])) {\n            xSize = value[0].length\n        }\n    }\n\n    const setValue = (valueUpdate: number[][]) => {\n        updateProperty(property.id, {\n            value: valueUpdate,\n        })\n    }\n\n    const handleSizeChange = (newXSize: number, newYSize: number) => {\n        let newValue = value.slice(0, newYSize)\n        for (let newRowIndex = 0; newRowIndex < newYSize - ySize; newRowIndex++) {\n            newValue.push(Array.from({ length: newXSize }).fill(0) as number[])\n        }\n        newValue = newValue.map(row => {\n            const newRow = row.slice(0, newXSize)\n            for (let newColumnIndex = 0; newColumnIndex < newXSize - xSize; newColumnIndex++) {\n                newRow.push(0)\n            }\n\n            return newRow\n        })\n\n        setValue(newValue)\n    }\n\n    const handleValueChange = (\n        targetRowIndex: number,\n        targetColumnIndex: number,\n        event: ChangeEvent<HTMLInputElement>\n    ) => {\n        setValue(\n            value.map((row, rowIndex) => {\n                if (targetRowIndex !== rowIndex) {\n                    return row\n                }\n\n                return row.map((cell, columnIndex) => {\n                    if (targetColumnIndex !== columnIndex) {\n                        return cell\n                    }\n\n                    return Number(event.target.value)\n                })\n            })\n        )\n    }\n\n    return (\n        <div>\n            <div>\n                x size\n                <input\n                    type=\"number\"\n                    value={xSize}\n                    onChange={event => handleSizeChange(Number(event.target.value), ySize)}\n                />\n                y size\n                <input\n                    type=\"number\"\n                    value={ySize}\n                    onChange={event => handleSizeChange(xSize, Number(event.target.value))}\n                />\n            </div>\n            <div\n                style={{\n                    display: 'grid',\n                    gridTemplateColumns: `repeat(${xSize}, 1fr)`,\n                }}\n            >\n                {value.map((row, rowIndex) => {\n                    return (\n                        <Fragment key={rowIndex}>\n                            {row.map((cell, columnIndex) => (\n                                <input\n                                    key={columnIndex}\n                                    type=\"number\"\n                                    value={cell}\n                                    onChange={event =>\n                                        handleValueChange(rowIndex, columnIndex, event)\n                                    }\n                                />\n                            ))}\n                        </Fragment>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport const MatrixPropertyService: PropertyService<\n    'matrix',\n    MatrixPropertyOptions,\n    MatrixProperty,\n    number[][]\n> = {\n    type: 'matrix',\n    factory: ({\n        name,\n        defaultValue = [],\n        hasInput = false,\n        hasOutput = false,\n    }: MatrixPropertyOptions) => {\n        return {\n            name,\n            type: 'matrix',\n            value: defaultValue,\n            hasInput,\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n        }\n    },\n    getValue: data => {\n        return data.value\n    },\n    control: MatrixPropertyControl,\n}\n\nconst ControlContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-row-gap: 6px;\n\n    input {\n        width: 52px;\n    }\n`\n","import { ChangeEvent } from 'react'\nimport { PropertyService } from '../services_registry'\nimport { Property, useStore } from '../state'\nimport { Input } from '../components/ui'\n\nexport type NumberPropertyOptions = {\n    name: string\n    defaultValue?: number\n    hasInput?: boolean\n    hasOutput?: boolean\n}\n\nexport type NumberProperty = {\n    value: number\n}\n\nconst NumberPropertyControl = ({ property }: { property: Property & NumberProperty }) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        updateProperty(property.id, {\n            value: Number(event.target.value),\n        })\n    }\n\n    return <Input type=\"number\" value={property.value} onChange={handleChange} />\n}\n\nexport const NumberPropertyService: PropertyService<\n    'number',\n    NumberPropertyOptions,\n    NumberProperty,\n    number\n> = {\n    type: 'number',\n    factory: ({\n        name,\n        defaultValue = 0,\n        hasInput = false,\n        hasOutput = false,\n    }: NumberPropertyOptions) => {\n        return {\n            name,\n            type: 'number',\n            value: defaultValue,\n            hasInput,\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n        }\n    },\n    getValue: (property: any, registry) => {\n        return registry.resolvePropertyValue(property, property.value)\n    },\n    control: NumberPropertyControl,\n}\n","import { PropertyService } from '../services_registry'\n\nexport type RefPropertyOptions = {\n    name: string\n    hasInput?: boolean\n    hasOutput?: boolean\n}\n\nexport const RefPropertyService: PropertyService<'ref', RefPropertyOptions, any, any> = {\n    type: 'ref',\n    factory: ({ name, hasInput = false, hasOutput = false }: RefPropertyOptions) => {\n        return {\n            name,\n            type: 'ref',\n            hasInput,\n            hasOutput,\n        }\n    },\n    // refs are managed by links\n    serialize: () => undefined,\n    hydrate: property => property,\n    getValue: (property, registry) => {\n        return registry.resolvePropertyValue(property, undefined)\n    },\n}\n","import { PropertyService } from '../services_registry'\nimport { ChangeEvent } from 'react'\nimport { Property, useStore } from '../state'\nimport { Input } from '../components/ui'\n\nexport type TextPropertyOptions = {\n    name: string\n    defaultValue?: string\n    hasInput?: boolean\n    hasOutput?: boolean\n}\n\nexport type TextProperty = {\n    value: string\n}\n\nconst TextPropertyControl = ({ property }: { property: Property & TextProperty }) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        updateProperty(property.id, {\n            value: event.target.value,\n        })\n    }\n\n    return <Input type=\"text\" value={property.value} onChange={handleChange} />\n}\n\nexport const TextPropertyService: PropertyService<\n    'text',\n    TextPropertyOptions,\n    TextProperty,\n    string\n> = {\n    type: 'text',\n    factory: ({\n        name,\n        defaultValue = '',\n        hasInput = false,\n        hasOutput = false,\n    }: TextPropertyOptions) => {\n        return {\n            name,\n            type: 'text',\n            value: defaultValue,\n            hasInput,\n            hasOutput,\n        }\n    },\n    serialize: property => {\n        // @ts-ignore\n        return property.value\n    },\n    hydrate: (property, data) => {\n        return {\n            ...property,\n            value: data,\n        }\n    },\n    getValue: data => {\n        return data.value\n    },\n    control: TextPropertyControl,\n}\n","import { ServiceRegistry } from './services_registry'\nimport {\n    AreaBumpNodeService,\n    AxisNodeService,\n    BlendModeNodeService,\n    CanvasNodeService,\n    ChordNodeService,\n    ColorSchemeNodeService,\n    LineNodeService,\n    MarginNodeService,\n    NivoThemeNodeService,\n    ScatterPlotNodeService,\n    SerieXYNodeService,\n    SeriesXYNodeService,\n    SquareMatrixNodeService,\n} from './node_services'\nimport {\n    AnglePropertyService,\n    ArrayStringPropertyService,\n    ArrayXYPropertyService,\n    BlendModePropertyService,\n    ChoicesPropertyService,\n    MatrixPropertyService,\n    NumberPropertyService,\n    RefPropertyService,\n    TextPropertyService,\n} from './property_services'\n\nconst servicesRegistry = new ServiceRegistry()\n\nservicesRegistry\n    .registerNodeService(AreaBumpNodeService)\n    .registerNodeService(AxisNodeService)\n    .registerNodeService(BlendModeNodeService)\n    .registerNodeService(CanvasNodeService)\n    .registerNodeService(ChordNodeService)\n    .registerNodeService(ColorSchemeNodeService)\n    .registerNodeService(LineNodeService)\n    .registerNodeService(MarginNodeService)\n    .registerNodeService(NivoThemeNodeService)\n    .registerNodeService(ScatterPlotNodeService)\n    .registerNodeService(SerieXYNodeService)\n    .registerNodeService(SeriesXYNodeService)\n    .registerNodeService(SquareMatrixNodeService)\n\nservicesRegistry\n    .registerPropertyService(AnglePropertyService)\n    .registerPropertyService(ArrayStringPropertyService)\n    .registerPropertyService(ArrayXYPropertyService)\n    .registerPropertyService(BlendModePropertyService)\n    .registerPropertyService(ChoicesPropertyService)\n    .registerPropertyService(MatrixPropertyService)\n    .registerPropertyService(NumberPropertyService)\n    .registerPropertyService(RefPropertyService)\n    .registerPropertyService(TextPropertyService)\n\nexport default servicesRegistry\n","import { NodeService } from '../services_registry'\n\nexport const NivoThemeNodeService: NodeService<'nivo_theme', {}> = {\n    type: 'nivo_theme',\n    category: 'theming',\n    description: `A theme object to be used with nivo charts.`,\n    hasOutput: true,\n    properties: [],\n    factory: () => {\n        return {}\n    },\n    getValue: () => {\n        return {\n            fontFamily: `'IBM Plex Mono', monospace`,\n            fontSize: 11,\n            textColor: '#dddddd',\n            grid: {\n                line: {\n                    stroke: '#333333',\n                },\n            },\n            tooltip: {\n                container: {\n                    background: '#222222',\n                    color: 'inherit',\n                    fontSize: 'inherit',\n                    borderRadius: '2px',\n                    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.25)',\n                    padding: '5px 9px',\n                },\n            },\n        }\n    },\n}\n","import { NodeService } from '../services_registry'\n\nexport interface SquareMatrixNodeData {\n    data: number[][]\n}\n\nexport const SquareMatrixNodeService: NodeService<'square_matrix', SquareMatrixNodeData> = {\n    type: 'square_matrix',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            type: 'matrix',\n            name: 'matrix',\n        },\n    ],\n    factory: data => {\n        return {\n            data: data?.data || [],\n        }\n    },\n    getValue: ({ properties }, registry) => {\n        const value: any = {}\n        properties.forEach(property => {\n            value[property.name] = registry\n                .getPropertyService(property.type)\n                .getValue(property, registry)\n        })\n\n        return value.matrix || []\n    },\n}\n","import { useMemo } from 'react'\nimport create from 'zustand'\nimport {\n    Element,\n    ElementId,\n    State,\n    Node,\n    ResolvedNode,\n    isNode,\n    Property,\n    ResolvedProperty,\n    isProperty,\n    Link,\n    ResolvedLink,\n    isLink,\n    SerializedElements,\n} from './types'\nimport { generateElementId } from './generateElementId'\nimport registry from '../registry'\n\nconst DEFAULT_NODE_HEADER_HEIGHT = 24\nconst PROPERTY_HEIGHT = 20\n\nconst updateNodePosition = (\n    elements: Element[],\n    nodeId: ElementId | null,\n    offset: [number, number]\n): Element[] => {\n    if (nodeId === null) {\n        return elements\n    }\n\n    const node: Node | undefined = elements.find(\n        element => isNode(element) && element.id === nodeId\n    ) as any\n    if (!node) {\n        return elements\n    }\n\n    return elements.map(element => {\n        if (\n            (isNode(element) && element.id === node.id) ||\n            (isProperty(element) && node.properties.includes(element.id))\n        ) {\n            return {\n                ...element,\n                x: element.x + offset[0],\n                y: element.y + offset[1],\n            }\n        }\n\n        return element\n    })\n}\n\nexport const useStore = create<State>(set => ({\n    elements: [],\n    selectedNodeIds: [],\n    setSelectedNodeIds: selectedNodeIds => set(() => ({ selectedNodeIds })),\n    createNode: type =>\n        set(state => {\n            const nodeService = registry.getNodeService(type)\n\n            const newNode: Node = {\n                elementType: 'node',\n                id: generateElementId(),\n                type: type,\n                name: nodeService.type.replace('_', ' '),\n                x: 100,\n                y: 100,\n                width: 120,\n                height: 100,\n                properties: [],\n                data: nodeService.factory(),\n            }\n\n            const newProperties: Property[] = []\n            nodeService.properties.forEach(property => {\n                const propertyService = registry.getPropertyService(property.type)\n\n                const newProperty: Property = {\n                    ...property,\n                    elementType: 'property',\n                    id: generateElementId(),\n                    nodeId: newNode.id,\n                    name: property.name,\n                    x: newNode.x,\n                    y:\n                        newNode.y +\n                        DEFAULT_NODE_HEADER_HEIGHT +\n                        newProperties.length * PROPERTY_HEIGHT,\n                    height: PROPERTY_HEIGHT,\n                    width: newNode.width,\n                    hasInput: property.hasInput || false,\n                    hasOutput: property.hasOutput || false,\n                }\n\n                newProperties.push(\n                    propertyService.hydrate(newProperty, newNode.data[property.name])\n                )\n            })\n\n            newNode.properties = newProperties.map(property => property.id)\n\n            return {\n                elements: [...state.elements, ...newProperties, newNode],\n                selectedNodeIds: [newNode.id],\n            }\n        }),\n    removeNode: id =>\n        set(state => {\n            return {\n                elements: state.elements.filter(element => element.id !== id),\n            }\n        }),\n    updateNode: (id, patch) =>\n        set(state => {\n            const updatedElements = state.elements.map(element => {\n                if (!isNode(element) || element.id !== id) {\n                    return element\n                }\n\n                return {\n                    ...element,\n                    ...patch,\n                }\n            })\n\n            return {\n                elements: updatedElements,\n            }\n        }),\n    updateProperty: (propertyId, patch) =>\n        set(state => {\n            const updatedElements = state.elements.map(element => {\n                if (!isProperty(element) || element.id !== propertyId) {\n                    return element\n                }\n\n                return {\n                    ...element,\n                    ...patch,\n                }\n            })\n\n            return {\n                elements: updatedElements,\n            }\n        }),\n    loadGraph: graph =>\n        set(state => {\n            const elements: any[] = []\n\n            graph.nodes.forEach((node: any) => {\n                const nodeService = registry.getNodeService(node.type)\n                const propertyIds: ElementId[] = []\n\n                nodeService.properties.forEach(property => {\n                    const propertyService = registry.getPropertyService(property.type)\n\n                    const propertyId = node.data[property.name]\n                        ? node.data[property.name].id\n                        : generateElementId()\n\n                    let newProperty = {\n                        ...property,\n                        elementType: 'property',\n                        id: propertyId,\n                        nodeId: node.id,\n                        name: property.name,\n                        x: node.x,\n                        y:\n                            DEFAULT_NODE_HEADER_HEIGHT +\n                            node.y +\n                            propertyIds.length * PROPERTY_HEIGHT,\n                        width: node.width,\n                        height: PROPERTY_HEIGHT,\n                    } as Property\n\n                    if (node.data[property.name]) {\n                        newProperty = propertyService.hydrate(\n                            newProperty,\n                            node.data[property.name].data\n                        )\n                    }\n\n                    elements.push(newProperty)\n                    propertyIds.push(newProperty.id)\n                })\n\n                elements.push({\n                    elementType: 'node',\n                    id: node.id,\n                    type: node.type,\n                    name: node.name || node.type.replace('_', ' '),\n                    x: node.x,\n                    y: node.y,\n                    width: node.width,\n                    height: DEFAULT_NODE_HEADER_HEIGHT + propertyIds.length * PROPERTY_HEIGHT,\n                    properties: propertyIds,\n                })\n            })\n\n            graph.links.forEach((link: any) => {\n                elements.push({\n                    elementType: 'link',\n                    id: link.id,\n                    sourceId: link.sourceId,\n                    targetId: link.targetId,\n                })\n            })\n\n            return {\n                selectedNodeIds: [],\n                elements,\n                drag: {\n                    isDragging: false,\n                    elementId: null,\n                    initial: [0, 0],\n                    offset: [0, 0],\n                },\n            }\n        }),\n    //\n    // dragging\n    //\n    drag: {\n        isDragging: false,\n        elementId: null,\n        initial: [0, 0],\n        offset: [0, 0],\n    },\n    startDrag: (elementId, initial) =>\n        set(state => {\n            return {\n                drag: {\n                    isDragging: true,\n                    elementId: elementId,\n                    initial,\n                    offset: [0, 0],\n                },\n            }\n        }),\n    updateDrag: position =>\n        set(state => {\n            const offset: [number, number] = [\n                position[0] - state.drag.initial[0],\n                position[1] - state.drag.initial[1],\n            ]\n\n            return {\n                drag: {\n                    ...state.drag,\n                    offset,\n                    initial: [position[0], position[1]],\n                },\n                elements: updateNodePosition(state.elements, state.drag.elementId, offset),\n            }\n        }),\n    stopDrag: () =>\n        set(state => {\n            return {\n                drag: {\n                    isDragging: false,\n                    elementId: null,\n                    initial: [0, 0],\n                    offset: [0, 0],\n                },\n            }\n        }),\n    linking: {\n        isLinking: false,\n        elementId: undefined,\n        type: 'source',\n        anchor: [0, 0],\n        position: [0, 0],\n        previous: [0, 0],\n    },\n    startLinking: ({ elementId, type, anchor, initial }) =>\n        set(() => {\n            return {\n                linking: {\n                    isLinking: true,\n                    elementId,\n                    type,\n                    anchor,\n                    position: anchor,\n                    previous: initial,\n                },\n            }\n        }),\n    updateLinking: position =>\n        set(state => {\n            const offset = [\n                position[0] - state.linking.previous[0],\n                position[1] - state.linking.previous[1],\n            ]\n\n            return {\n                linking: {\n                    ...state.linking,\n                    position: [\n                        state.linking.position[0] + offset[0],\n                        state.linking.position[1] + offset[1],\n                    ],\n                    previous: position,\n                },\n            }\n        }),\n    setLinkingPotentialPort: (elementId, type) =>\n        set(state => {\n            if (\n                // no current linking\n                !state.linking.isLinking ||\n                // source & target are identical\n                elementId === state.linking.elementId ||\n                // both are sources or targets\n                state.linking.type === type\n            ) {\n                return state\n            }\n\n            return {\n                linking: {\n                    ...state.linking,\n                    potentialId: elementId,\n                },\n            }\n        }),\n    resetLinkingPotentialPort: () =>\n        set(state => {\n            return {\n                linking: {\n                    ...state.linking,\n                    potentialId: undefined,\n                },\n            }\n        }),\n    stopLinking: () =>\n        set(state => {\n            let elements = state.elements\n            if (state.linking.elementId !== undefined && state.linking.potentialId !== undefined) {\n                const link: Link = {\n                    id: generateElementId(),\n                    elementType: 'link',\n                    sourceId:\n                        state.linking.type === 'source'\n                            ? state.linking.elementId\n                            : state.linking.potentialId,\n                    targetId:\n                        state.linking.type === 'source'\n                            ? state.linking.potentialId\n                            : state.linking.elementId,\n                }\n\n                elements = [...elements, link]\n            }\n\n            return {\n                elements,\n                linking: {\n                    isLinking: false,\n                    type: 'source',\n                    anchor: [0, 0],\n                    position: [0, 0],\n                    previous: [0, 0],\n                },\n            }\n        }),\n    link: (sourceId: ElementId, targetId: ElementId) =>\n        set(state => {\n            const link: Link = {\n                id: generateElementId(),\n                elementType: 'link',\n                sourceId,\n                targetId,\n            }\n\n            return {\n                elements: [...state.elements, link],\n            }\n        }),\n    unlink: (sourceId: ElementId, targetId: ElementId) =>\n        set(state => {\n            return {\n                elements: state.elements.filter(element => {\n                    return (\n                        !isLink(element) ||\n                        element.sourceId !== sourceId ||\n                        element.targetId !== targetId\n                    )\n                }),\n            }\n        }),\n}))\n\nconst serializeProperties = (properties: ResolvedProperty[]) => {\n    const props: any = {}\n    properties.forEach(property => {\n        props[property.name] = {\n            id: property.id,\n            data: registry.getPropertyService(property.type).serialize(property),\n        }\n    })\n\n    return props\n}\n\nexport const serializeElements = (\n    nodes: ResolvedNode[],\n    links: ResolvedLink[]\n): SerializedElements => {\n    return {\n        nodes: nodes.map(node => {\n            return {\n                id: node.id,\n                type: node.type,\n                name: node.name,\n                x: node.x,\n                y: node.y,\n                width: node.width,\n                data: serializeProperties(node.properties),\n            }\n        }),\n        links: links.map(link => {\n            return {\n                id: link.id,\n                sourceId: link.source.id,\n                targetId: link.target.id,\n            }\n        }),\n    }\n}\n\nconst resolveGraph = (elements: Element[]) => {\n    const resolvedNodes: Record<ElementId, ResolvedNode> = {}\n    const propertiesByNodeId: Record<ElementId, ElementId[]> = {}\n    const resolvedProperties: Record<ElementId, ResolvedProperty> = {}\n    const resolvedLinks: Record<ElementId, ResolvedLink> = {}\n\n    const nodes = elements.filter(isNode)\n    const properties = elements.filter(isProperty)\n    const links = elements.filter(isLink)\n\n    // first pass to resolve nodes without resolving\n    // their properties.\n    nodes.forEach(node => {\n        propertiesByNodeId[node.id] = node.properties\n\n        resolvedNodes[node.id] = {\n            ...node,\n            isSelected: false,\n            properties: [],\n        }\n    })\n\n    // first pass to resolve properties without resolving\n    // dependencies.\n    properties.forEach(property => {\n        const propertyNode = resolvedNodes[property.nodeId]\n        if (!propertyNode) {\n            throw new Error(`unable to find property node: ${property.nodeId}`)\n        }\n\n        resolvedProperties[property.id] = {\n            ...property,\n            node: propertyNode,\n            dependencies: [],\n        }\n    })\n\n    // assign resolved properties to nodes.\n    Object.values(resolvedNodes).forEach(node => {\n        if (node.id in propertiesByNodeId) {\n            propertiesByNodeId[node.id].forEach(propertyId => {\n                const property = resolvedProperties[propertyId]\n                if (!property) {\n                    throw new Error(`unable to find property: ${propertyId}`)\n                }\n\n                node.properties.push(property)\n            })\n        }\n    })\n\n    links.forEach(link => {\n        const source: ResolvedNode | ResolvedProperty =\n            resolvedNodes[link.sourceId] || resolvedProperties[link.sourceId]\n        if (!source) {\n            throw new Error(`unable to find link source: ${link.sourceId}`)\n        }\n\n        const target: ResolvedNode | ResolvedProperty =\n            resolvedNodes[link.targetId] || resolvedProperties[link.targetId]\n        if (!target) {\n            throw new Error(`unable to find link target: ${link.sourceId}`)\n        }\n\n        // @ts-ignore\n        if (target.elementType === 'property') {\n            // @ts-ignore\n            target.input = source\n        }\n\n        resolvedLinks[link.id] = {\n            ...link,\n            source,\n            target,\n        }\n    })\n\n    return {\n        nodes: Object.values(resolvedNodes),\n        properties: Object.values(resolvedProperties),\n        links: Object.values(resolvedLinks),\n    }\n}\n\nexport const useGraph = () => {\n    const { elements, selectedNodeIds } = useStore()\n\n    const graph = useMemo(() => resolveGraph(elements), [elements])\n\n    useMemo(() => {\n        graph.nodes.forEach(node => {\n            node.isSelected = selectedNodeIds.includes(node.id)\n        })\n    }, [graph, selectedNodeIds])\n\n    return graph\n}\n","import styled from 'styled-components'\nimport { useStore } from '../state'\n\nexport const AppFooter = () => {\n    const { linking } = useStore()\n\n    return (\n        <Container>\n            {linking.isLinking && (\n                <div>\n                    from: {linking.anchor[0]},{linking.anchor[1]}\n                    to: {linking.position[0]},{linking.position[1]}\n                    potential ID: {linking.potentialId}\n                </div>\n            )}\n        </Container>\n    )\n}\n\nconst Container = styled.footer`\n    position: fixed;\n    left: 64px;\n    bottom: 0;\n    width: calc(100% - 364px);\n    height: 36px;\n    background-color: #222222;\n`\n","import styled from 'styled-components'\n\nexport const AppHeader = () => {\n    return (\n        <Header>\n            <Title>nivo graph editor</Title>\n        </Header>\n    )\n}\n\nconst Header = styled.header`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 46px;\n    background-color: #111111;\n    display: flex;\n    align-items: center;\n    padding-left: 64px;\n`\n\nconst Title = styled.h1`\n    margin: 0;\n    padding: 0;\n    font-size: 14px;\n    color: pink;\n    text-transform: uppercase;\n`\n","import styled from 'styled-components'\nimport { FaChevronRight, FaCheck } from 'react-icons/fa'\nimport { useStore } from '../state'\nimport { ReactNode } from 'react'\n\nconst ICON_SIZE = 24\nconst ICON_SPACING = 16\n\nexport const LinkingLayer = () => {\n    const { linking } = useStore()\n\n    if (!linking.isLinking) {\n        return null\n    }\n\n    let iconPosition: [number, number]\n    if (linking.type === 'source') {\n        iconPosition = [linking.position[0] + ICON_SPACING, linking.position[1] - ICON_SIZE / 2]\n    } else {\n        iconPosition = [\n            linking.position[0] - ICON_SIZE - ICON_SPACING,\n            linking.position[1] - ICON_SIZE / 2,\n        ]\n    }\n\n    let icon: ReactNode = <FaChevronRight />\n    let iconColor = 'pink'\n    if (linking.potentialId) {\n        icon = <FaCheck />\n        iconColor = '#65f7cf'\n    }\n\n    return (\n        <svg\n            style={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                pointerEvents: 'none',\n            }}\n        >\n            <line\n                strokeWidth={3}\n                stroke=\"pink\"\n                strokeLinecap=\"round\"\n                x1={linking.anchor[0]}\n                x2={linking.position[0]}\n                y1={linking.anchor[1]}\n                y2={linking.position[1]}\n            />\n            <circle cx={linking.position[0]} cy={linking.position[1]} r={4} fill=\"pink\" />\n            <foreignObject x={iconPosition[0]} y={iconPosition[1]} width={24} height={24}>\n                <Icon\n                    style={{\n                        color: iconColor,\n                        borderColor: iconColor,\n                    }}\n                >\n                    {icon}\n                </Icon>\n            </foreignObject>\n        </svg>\n    )\n}\n\nconst Icon = styled.div`\n    width: ${ICON_SIZE}px;\n    height: ${ICON_SIZE}px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #000000;\n    border: 2px solid;\n    border-radius: ${ICON_SIZE / 2}px;\n    font-size: 12px;\n`\n","import { line as d3Line, curveBasis } from 'd3-shape'\nimport { ResolvedLink } from '../state'\n\nconst LINK_ENDINGS_OFFSET = 32\n\nconst lineGenerator = d3Line().curve(curveBasis)\n\nexport const LinkWidget = ({ link }: { link: ResolvedLink }) => {\n    if (\n        link.source.x === undefined ||\n        link.source.width === undefined ||\n        link.source.y === undefined ||\n        link.source.height === undefined ||\n        link.target.x === undefined ||\n        link.target.y === undefined ||\n        link.target.height === undefined\n    ) {\n        return null\n    }\n\n    const xDistance = link.target.x - (link.source.x + +link.source.width)\n    const shouldAddOffset = Math.abs(xDistance) > LINK_ENDINGS_OFFSET * 2\n\n    const points: [number, number][] = []\n    points.push([link.source.x + link.source.width, link.source.y])\n\n    if (link.source.elementType === 'property') {\n        points[0][1] += link.source.height / 2\n    } else {\n        points[0][1] += 12\n    }\n\n    if (shouldAddOffset) {\n        points.push([points[0][0] + LINK_ENDINGS_OFFSET, points[0][1]])\n    }\n\n    const yDistance = link.target.y + link.target.height / 2 - points[0][1]\n    const midPoint: [number, number] = [points[0][0] + xDistance / 2, points[0][1] + yDistance / 2]\n    points.push(midPoint)\n\n    if (shouldAddOffset) {\n        points.push([link.target.x - LINK_ENDINGS_OFFSET, link.target.y + link.target.height / 2])\n    }\n\n    points.push([link.target.x, link.target.y + link.target.height / 2])\n\n    return (\n        <>\n            <path\n                fill=\"none\"\n                stroke=\"pink\"\n                strokeWidth={2}\n                d={lineGenerator(points) ?? undefined}\n            />\n            <circle cx={midPoint[0]} cy={midPoint[1]} r={5} stroke=\"pink\" strokeWidth={2} />\n        </>\n    )\n}\n","import { ResolvedLink } from '../state'\nimport { LinkWidget } from './LinkWidget'\n\nexport const LinksLayer = ({ links }: { links: ResolvedLink[] }) => {\n    return (\n        <svg\n            style={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                pointerEvents: 'none',\n            }}\n        >\n            {links.map(link => (\n                <LinkWidget key={link.id} link={link} />\n            ))}\n        </svg>\n    )\n}\n","import {\n    ChangeEvent,\n    KeyboardEvent as ReactKeyboardEvent,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react'\nimport styled from 'styled-components'\nimport { MdEdit } from 'react-icons/md'\nimport { ResolvedNode, useStore } from '../../state'\nimport { useDocumentEventListener } from '../../utils/useDocumentEventListener'\n\nexport const NodeName = ({ node }: { node: ResolvedNode }) => {\n    const [isEditing, setIsEditing] = useState(false)\n    const [name, setName] = useState(node.name)\n    const { updateNode } = useStore()\n    const inputRef = useRef<HTMLInputElement | null>(null)\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current?.focus()\n        }\n    }, [isEditing, inputRef])\n\n    useEffect(() => {\n        setName(node.name)\n        setIsEditing(false)\n    }, [node.name, setName, setIsEditing])\n\n    const handleChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            setName(event.target.value)\n        },\n        [setName]\n    )\n\n    const handleEnter = (event: ReactKeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            updateNode(node.id, { name })\n            setIsEditing(false)\n        }\n    }\n\n    const handleEscape = useCallback(\n        (event: KeyboardEvent) => {\n            if (event.key === 'Escape') {\n                setIsEditing(false)\n            }\n        },\n        [setIsEditing]\n    )\n    useDocumentEventListener('keydown', handleEscape)\n\n    return (\n        <Container\n            onClick={() => {\n                if (!isEditing) {\n                    setIsEditing(true)\n                }\n            }}\n        >\n            {!isEditing && (\n                <>\n                    <Name>{node.name}</Name>\n                    <Icon>\n                        <MdEdit />\n                    </Icon>\n                </>\n            )}\n            {isEditing && (\n                <Input\n                    ref={inputRef}\n                    onKeyPress={handleEnter}\n                    type=\"text\"\n                    value={name}\n                    onChange={handleChange}\n                />\n            )}\n        </Container>\n    )\n}\n\nconst Icon = styled.span`\n    margin-left: 12px;\n    width: 24px;\n    height: 24px;\n    border-radius: 3px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #333333;\n    color: #999999;\n    cursor: pointer;\n    flex-shrink: 0;\n`\n\nconst Input = styled.input`\n    width: calc(100% - 32px);\n    height: 32px;\n    border: none;\n    padding: 5px 9px;\n    border-radius: 2px;\n    font-weight: 800;\n    font-family: inherit;\n    background-color: #aaaaaa;\n    font-size: 14px;\n\n    &:focus {\n        outline: 0;\n    }\n`\n\nconst Name = styled.span`\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n\nconst Container = styled.div`\n    height: 32px;\n    padding: 0;\n    margin: 0 32px 9px 0;\n    font-size: 16px;\n    font-weight: 800;\n    display: flex;\n    align-items: center;\n`\n","import { useEffect } from 'react'\n\n/**\n * This hook can be used to attach event listener to the document,\n * it will take care of removing/updating the listener if it changes,\n * and will also remove the listener when the component it's attached\n * to is unmounted.\n */\nexport const useDocumentEventListener = <K extends keyof DocumentEventMap>(\n    eventType: K,\n    listener: (this: Document, event: DocumentEventMap[K]) => any\n) => {\n    useEffect(() => {\n        document.addEventListener(eventType, listener)\n\n        return () => {\n            document.removeEventListener(eventType, listener)\n        }\n    }, [listener])\n}\n","import { createElement, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { FaUnlink } from 'react-icons/fa'\nimport { ElementId, ResolvedProperty, useStore } from '../../state'\nimport registry from '../../registry'\n\nconst Relation = ({\n    ownId,\n    element,\n}: {\n    ownId: ElementId\n    element: Exclude<ResolvedProperty['input'], undefined>\n}) => {\n    const { setSelectedNodeIds, unlink } = useStore()\n\n    const goToRelation = useCallback(() => {\n        const nodeId = element.elementType === 'node' ? element.id : element.node.id\n        setSelectedNodeIds([nodeId])\n    }, [setSelectedNodeIds, element])\n\n    const handleUnlink = useCallback(() => {\n        unlink(element.id, ownId)\n    }, [ownId, element.id])\n\n    return (\n        <RelationContainer>\n            <RelationName onClick={goToRelation}>\n                {element.elementType === 'property' && <span>{element.node.name}.</span>}\n                {element.name}\n            </RelationName>\n            <UnlinkIcon onClick={handleUnlink}>\n                <FaUnlink />\n            </UnlinkIcon>\n        </RelationContainer>\n    )\n}\n\nexport const PropertyItem = ({ property }: { property: ResolvedProperty }) => {\n    const propertyService = registry.getPropertyService(property.type)\n\n    const hasInput = property.input !== undefined\n\n    return (\n        <Container>\n            <PropertyHeader>\n                <PropertyName>{property.name}</PropertyName>\n                {hasInput && <Relation ownId={property.id} element={property.input!} />}\n            </PropertyHeader>\n            {!hasInput && propertyService.control && (\n                <ControlContainer>\n                    {createElement(propertyService.control, { property })}\n                </ControlContainer>\n            )}\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    padding: 9px 12px;\n    border-bottom: 1px solid #333333;\n\n    &:last-child {\n        border-bottom: none;\n    }\n`\n\nconst PropertyHeader = styled.div`\n    display: grid;\n    grid-template-columns: 40% 60%;\n    align-items: center;\n`\n\nconst PropertyName = styled.h4`\n    margin: 0;\n    padding: 0;\n`\n\nconst RelationContainer = styled.div`\n    display: flex;\n    align-items: center;\n    height: 24px;\n    border-radius: 2px;\n    color: pink;\n`\n\nconst RelationName = styled.span`\n    padding: 0 6px;\n    height: 100%;\n    flex-grow: 1;\n    line-height: 24px;\n    cursor: pointer;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    background-color: #333333;\n    font-weight: 600;\n    font-size: 11px;\n\n    &:hover {\n        background-color: #444444;\n    }\n`\n\nconst UnlinkIcon = styled.span`\n    width: 24px;\n    height: 24px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-shrink: 0;\n    background-color: #444444;\n    border-radius: 0 2px 2px 0;\n    font-size: 10px;\n    cursor: pointer;\n\n    &:hover {\n        background-color: #555555;\n    }\n`\n\nconst ControlContainer = styled.div`\n    margin-top: 6px;\n`\n","import styled from 'styled-components'\nimport { MdClose } from 'react-icons/md'\nimport registry from '../../registry'\nimport { ResolvedNode, useStore } from '../../state'\nimport { NodeName } from './NodeName'\nimport { PropertyItem } from './PropertyItem'\nimport { useCallback } from 'react'\n\nexport const NodeInfoPanel = ({ node }: { node: ResolvedNode }) => {\n    const nodeService = registry.getNodeService(node.type)\n    const { setSelectedNodeIds } = useStore()\n    const value: any = nodeService.getValue(node, registry)\n\n    const handleClose = useCallback(() => {\n        setSelectedNodeIds([])\n    }, [setSelectedNodeIds])\n\n    return (\n        <div>\n            <Header>\n                <NodeName node={node} />\n                <Id>{node.type}</Id>\n                <Close onClick={handleClose}>\n                    <MdClose />\n                </Close>\n            </Header>\n            <Properties>\n                {node.properties.map(property => (\n                    <PropertyItem property={property} />\n                ))}\n            </Properties>\n            {value !== undefined && (\n                <>\n                    <NodeValueTitle>Node value</NodeValueTitle>\n                    {!value.$$typeof && <NodeValue>{JSON.stringify(value, null, '  ')}</NodeValue>}\n                    {value.$$typeof && (\n                        <NodeValue>{JSON.stringify(value.props, null, '  ')}</NodeValue>\n                    )}\n                </>\n            )}\n        </div>\n    )\n}\n\nconst Header = styled.header`\n    padding: 9px 12px;\n    border-bottom: 1px solid #555555;\n    position: relative;\n`\n\nconst Id = styled.div`\n    font-size: 12px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n\nconst Close = styled.span`\n    position: absolute;\n    width: 32px;\n    height: 32px;\n    top: 9px;\n    right: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    font-size: 18px;\n    color: #999999;\n\n    &:hover {\n        color: #eeeeee;\n    }\n`\n\nconst Properties = styled.div``\n\nconst NodeValueTitle = styled.h4`\n    border-top: 1px solid #555555;\n    padding: 6px 12px;\n    margin: 0;\n`\n\nconst NodeValue = styled.pre`\n    padding: 12px;\n    font-size: 12px;\n    margin: 0;\n    background-color: #000000;\n`\n","import { useCallback, MouseEvent } from 'react'\nimport styled from 'styled-components'\nimport { ElementId, useStore } from '../state'\n\nconst CONTAINER_SIZE = 20\nconst PORT_SIZE = 10\n\nexport const PortWidget = ({\n    type,\n    elementId,\n    position,\n}: {\n    type: 'source' | 'target'\n    elementId: ElementId\n    position: [number, number]\n}) => {\n    const { startLinking, setLinkingPotentialPort, resetLinkingPotentialPort } = useStore()\n\n    const [x, y] = position\n\n    const handleLinking = useCallback(\n        (event: MouseEvent) => {\n            event.stopPropagation()\n\n            startLinking({\n                elementId,\n                type,\n                anchor: [x, y],\n                initial: [event.clientX, event.clientY],\n            })\n        },\n        [startLinking, elementId, type, x, y]\n    )\n\n    const handleMouseEnter = useCallback(() => {\n        setLinkingPotentialPort(elementId, type)\n    }, [setLinkingPotentialPort, elementId, type])\n\n    const handleMouseLeave = useCallback(() => {\n        resetLinkingPotentialPort()\n    }, [resetLinkingPotentialPort])\n\n    return (\n        <Container\n            onMouseDown={handleLinking}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            style={{\n                left: type === 'target' ? 0 : '100%',\n            }}\n        >\n            <Port />\n        </Container>\n    )\n}\n\nconst Port = styled.div`\n    pointer-events: all;\n    width: ${PORT_SIZE}px;\n    height: ${PORT_SIZE}px;\n    border-radius: ${PORT_SIZE / 2}px;\n    background: #111111;\n    border: 2px solid pink;\n    box-shadow: 0 0 0 rgba(0, 0, 0, 0);\n    transition: transform 200ms, box-shadow 200ms;\n`\n\nconst Container = styled.div`\n    pointer-events: all;\n    position: absolute;\n    top: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${CONTAINER_SIZE}px;\n    height: ${CONTAINER_SIZE}px;\n    margin-top: -${CONTAINER_SIZE / 2}px;\n    margin-left: -${CONTAINER_SIZE / 2}px;\n    cursor: pointer;\n\n    &:hover {\n        ${Port} {\n            transform: scale(1.6);\n            box-shadow: 0 5px 5px rgba(0, 0, 0, 0.5);\n        }\n    }\n`\n","import styled from 'styled-components'\nimport { Property } from '../state'\nimport { PortWidget } from './PortWidget'\n\nexport const PropertyWidget = ({ property }: { property: Property }) => {\n    return (\n        <PropertyContainer>\n            <PropertyName>{property.name}</PropertyName>\n            {property.hasInput && (\n                <PortWidget\n                    type=\"target\"\n                    elementId={property.id}\n                    position={[property.x, property.y + property.height / 2]}\n                />\n            )}\n            {property.hasOutput && (\n                <PortWidget\n                    type=\"source\"\n                    elementId={property.id}\n                    position={[property.x + property.width, property.y + property.height / 2]}\n                />\n            )}\n        </PropertyContainer>\n    )\n}\n\nconst PropertyContainer = styled.div`\n    position: relative;\n    height: 20px;\n    user-select: none;\n    display: flex;\n    align-items: center;\n    padding: 0 12px;\n    background-color: #222222ee;\n    color: pink;\n    font-size: 11px;\n`\n\nconst PropertyName = styled.span`\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n","import { createElement } from 'react'\nimport { ResolvedProperty } from '../state'\nimport registry from '../registry'\nimport { PropertyWidget } from './PropertyWidget'\n\nexport const PropertiesWidget = ({ properties }: { properties: ResolvedProperty[] }) => {\n    return (\n        <>\n            {properties.map(property => {\n                const propertyService = registry.propertyServices[property.type]\n                const hasCustomWidget = propertyService && 'widget' in propertyService\n\n                if (!hasCustomWidget) {\n                    return <PropertyWidget key={property.name} property={property} />\n                }\n\n                return createElement(propertyService.widget!, { property })\n            })}\n        </>\n    )\n}\n","import { createElement, useCallback, MouseEvent } from 'react'\nimport styled from 'styled-components'\nimport { ResolvedNode, useStore } from '../state'\nimport registry from '../registry'\nimport { PropertiesWidget } from './PropertiesWidget'\nimport { PortWidget } from './PortWidget'\n\nconst NodeContainer = styled.div<{\n    isSelected: boolean\n}>`\n    user-select: none;\n    background-color: transparent;\n    color: pink;\n    position: absolute;\n    box-shadow: ${props => (props.isSelected ? '0 0 0 2px pink' : '0 0 0 1px rgba(0, 0, 0, 0.66)')};\n    cursor: move;\n    font-size: 12px;\n\n    &:hover {\n        box-shadow: ${props => (props.isSelected ? '0 0 0 2px pink' : '0 0 0 1px pink')};\n    }\n`\n\nconst NodeHeader = styled.header`\n    position: relative;\n    font-weight: 600;\n    background-color: #000000cc;\n    display: flex;\n    align-items: center;\n    height: 24px;\n    padding: 0 12px;\n\n    span {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n`\n\nexport const NodeWidget = ({ node }: { node: ResolvedNode }) => {\n    const nodeService = registry.getNodeService(node.type)\n    const hasCustomWidget = 'widget' in nodeService\n    const { setSelectedNodeIds, startDrag } = useStore()\n\n    const handleStartDrag = useCallback(\n        (event: MouseEvent) => {\n            setSelectedNodeIds([node.id])\n            startDrag(node.id, [event.clientX, event.clientY])\n        },\n        [setSelectedNodeIds, node.id, startDrag]\n    )\n\n    return (\n        <NodeContainer\n            onMouseDown={handleStartDrag}\n            isSelected={node.isSelected}\n            style={{\n                top: node.y,\n                left: node.x,\n                width: node.width,\n            }}\n        >\n            <NodeHeader>\n                <span>{node.name}</span>\n                {nodeService.hasOutput && (\n                    <PortWidget\n                        type=\"source\"\n                        elementId={node.id}\n                        position={[node.x + node.width, node.y + 12]}\n                    />\n                )}\n            </NodeHeader>\n            {!hasCustomWidget && <PropertiesWidget properties={node.properties} />}\n            {hasCustomWidget && createElement(nodeService.widget!, { node, registry })}\n        </NodeContainer>\n    )\n}\n","import { ResolvedNode } from '../state'\nimport { NodeWidget } from './NodeWidget'\n\nexport const NodesLayer = ({ nodes }: { nodes: ResolvedNode[] }) => {\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n            }}\n        >\n            {nodes.map(node => (\n                <NodeWidget key={node.id} node={node} />\n            ))}\n        </div>\n    )\n}\n","import { ReactNode, KeyboardEvent } from 'react'\nimport { createPortal } from 'react-dom'\nimport styled from 'styled-components'\n\nexport const Modal = ({\n    children,\n    maxWidth,\n    onCloseRequest,\n}: {\n    children: ReactNode\n    maxWidth?: number\n    onCloseRequest(): void\n}) => {\n    const handleKeydown = (event: KeyboardEvent) => {}\n\n    return createPortal(\n        <Container role=\"dialog\" aria-modal=\"true\" onKeyDown={handleKeydown}>\n            <Background onClick={onCloseRequest} />\n            <Content maxWidth={maxWidth}>{children}</Content>\n        </Container>,\n        document.body\n    )\n}\n\nconst Container = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: auto;\n    padding: 12px;\n`\n\nconst Background = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 1;\n    background-color: rgba(0, 0, 0, 0.66);\n    // backdrop-filter: blur(3px);\n`\n\nconst Content = styled.div<{\n    maxWidth?: number\n}>`\n    position: relative;\n    z-index: 2;\n    width: 100%;\n    background: #333333;\n    backdrop-filter: none;\n    max-width: ${props => (props.maxWidth ? `${props.maxWidth}px` : 'none')};\n    max-height: 100%;\n    overflow-y: scroll;\n    box-shadow: 0 0 0 5px rgba(0, 0, 0, 1);\n`\n\nexport const ModalTitle = styled.h2`\n    margin: 0;\n    padding: 9px 12px;\n    border-bottom: 1px solid #555555;\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n\n    svg {\n        color: pink;\n        margin-right: 12px;\n    }\n`\n","import { PropsWithChildren } from 'react'\nimport styled from 'styled-components'\n\nconst Button = styled.div`\n    width: 64px;\n    height: 64px;\n    cursor: pointer;\n    background-color: #000000;\n    color: #777777;\n    border-bottom: 1px solid #333333;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 22px;\n\n    &:hover {\n        background-color: #222222;\n        color: #eeeeee;\n    }\n`\n\nexport const SidebarButton = ({\n    children,\n    onClick,\n}: PropsWithChildren<{\n    onClick: () => void\n}>) => {\n    return <Button onClick={onClick}>{children}</Button>\n}\n","import { useMemo } from 'react'\nimport registry from '../registry'\nimport { useStore } from '../state'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n    max-height: 600px;\n    overflow-y: auto;\n`\n\nconst CategoryTitle = styled.h3`\n    padding: 9px 12px;\n    margin: 0;\n    background-color: #222222;\n    font-size: 16px;\n    color: pink;\n`\n\nconst NodeTypeItem = styled.div`\n    padding: 12px 12px;\n    border-bottom: 1px solid #444444;\n    font-size: 14px;\n    cursor: pointer;\n    font-weight: 600;\n\n    &:last-child {\n        border-bottom: none;\n    }\n\n    &:hover {\n        background-color: #444444;\n    }\n`\n\nconst NodeTypeDescription = styled.div`\n    font-weight: 400;\n    font-size: 12px;\n    margin-top: 6px;\n    color: #aaaaaa;\n`\n\nexport const NodeSelector = ({ onCreate }: { onCreate: () => void }) => {\n    const categories = useMemo(() => registry.getNodeServiceCategories(), [])\n\n    const { createNode } = useStore()\n\n    return (\n        <Container>\n            {categories.map(category => {\n                return (\n                    <div key={category.category}>\n                        <CategoryTitle>{category.category}</CategoryTitle>\n                        {category.types.map(type => {\n                            return (\n                                <NodeTypeItem\n                                    key={type.type}\n                                    onClick={() => {\n                                        createNode(type.type)\n                                        onCreate()\n                                    }}\n                                >\n                                    <div>{type.type}</div>\n                                    {type.description && (\n                                        <NodeTypeDescription>\n                                            {type.description}\n                                        </NodeTypeDescription>\n                                    )}\n                                </NodeTypeItem>\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </Container>\n    )\n}\n","import { useState } from 'react'\nimport styled from 'styled-components'\nimport { MdLibraryAdd } from 'react-icons/md'\nimport { Modal, ModalTitle } from './Modal'\nimport { SidebarButton } from './SidebarButton'\nimport { NodeSelector } from './NodeSelector'\n\nexport const AddNodeButton = () => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    return (\n        <>\n            <SidebarButton\n                onClick={() => {\n                    setIsOpen(true)\n                }}\n            >\n                <MdLibraryAdd />\n            </SidebarButton>\n            {isOpen && (\n                <Modal\n                    onCloseRequest={() => {\n                        setIsOpen(false)\n                    }}\n                    maxWidth={600}\n                >\n                    <ModalTitle>\n                        <MdLibraryAdd /> Add new node\n                    </ModalTitle>\n                    <NodeSelector\n                        onCreate={() => {\n                            setIsOpen(false)\n                        }}\n                    />\n                </Modal>\n            )}\n        </>\n    )\n}\n","import { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { MdNoteAdd } from 'react-icons/md'\nimport { useStore } from '../state'\nimport { Modal, ModalTitle } from './Modal'\nimport { SidebarButton } from './SidebarButton'\n\nexport const NewGraph = () => {\n    const [isOpen, setIsOpen] = useState(false)\n    const { loadGraph } = useStore()\n\n    const handleNewGraph = useCallback(() => {\n        loadGraph({ nodes: [], links: [] })\n        setIsOpen(false)\n    }, [loadGraph, setIsOpen])\n\n    return (\n        <>\n            <SidebarButton\n                onClick={() => {\n                    setIsOpen(true)\n                }}\n            >\n                <MdNoteAdd />\n            </SidebarButton>\n            {isOpen && (\n                <Modal\n                    onCloseRequest={() => {\n                        setIsOpen(false)\n                    }}\n                    maxWidth={300}\n                >\n                    <ModalTitle>\n                        <MdNoteAdd /> Create new graph?\n                    </ModalTitle>\n                    <ConfirmContainer>\n                        <Button onClick={handleNewGraph}>yes</Button>\n                        <Button\n                            onClick={() => {\n                                setIsOpen(false)\n                            }}\n                        >\n                            no\n                        </Button>\n                    </ConfirmContainer>\n                </Modal>\n            )}\n        </>\n    )\n}\n\nconst ConfirmContainer = styled.div`\n    padding: 16px;\n    display: flex;\n    justify-content: center;\n`\n\nconst Button = styled.span`\n    padding: 9px 12px;\n    background-color: #000000;\n    border-radius: 2px;\n    margin-left: 12px;\n    cursor: pointer;\n    width: 80px;\n    text-align: center;\n\n    &:first-child {\n        margin-left: 0;\n    }\n`\n","import { fileOpen, fileSave } from 'browser-nativefs'\nimport { ResolvedLink, ResolvedNode, serializeElements } from './state'\n\nexport const saveAsJSON = async (nodes: ResolvedNode[], links: ResolvedLink[]) => {\n    const serialized = serializeElements(nodes, links)\n    const stringified = JSON.stringify(\n        {\n            type: 'nivo-graph',\n            version: 'beta',\n            ...serialized,\n        },\n        null,\n        2\n    )\n\n    const blob = new Blob([stringified], {\n        type: 'application/json',\n    })\n\n    const fileHandle = await fileSave(\n        blob,\n        {\n            fileName: 'graph',\n            description: 'Nivo graph',\n            extensions: ['.json'],\n        },\n        null //appState.fileHandle\n    )\n\n    return { fileHandle }\n}\n\nexport const parseFileContent = async (blob: Blob | File) => {\n    let content: string\n    if ('text' in Blob) {\n        content = await blob.text()\n    } else {\n        content = await new Promise(resolve => {\n            const reader = new FileReader()\n            reader.readAsText(blob, 'utf8')\n            reader.onloadend = () => {\n                if (reader.readyState === FileReader.DONE) {\n                    resolve(reader.result as string)\n                }\n            }\n        })\n    }\n\n    return JSON.parse(content)\n}\n\nexport const loadFromJSON = async () => {\n    const blob = await fileOpen({\n        description: 'Nivo graph files',\n        extensions: ['.json', '.nivo'],\n        mimeTypes: ['application/json'],\n    })\n\n    const content = await parseFileContent(blob)\n    if (content.type !== 'nivo-graph') {\n        throw new Error('graph file is invalid')\n    }\n\n    return content\n}\n","import { MdSave } from 'react-icons/md'\nimport { ResolvedLink, ResolvedNode } from '../state'\nimport { saveAsJSON } from '../fs'\nimport { SidebarButton } from './SidebarButton'\n\ninterface SaveProps {\n    nodes: ResolvedNode[]\n    links: ResolvedLink[]\n}\n\nexport const SaveGraph = ({ nodes, links }: SaveProps) => {\n    const handleSave = () => {\n        saveAsJSON(nodes, links)\n    }\n\n    return (\n        <SidebarButton onClick={handleSave}>\n            <MdSave />\n        </SidebarButton>\n    )\n}\n","import { MdFolderOpen } from 'react-icons/md'\nimport { loadFromJSON } from '../fs'\nimport { useStore } from '../state'\nimport { SidebarButton } from './SidebarButton'\nimport { useCallback } from 'react'\n\nexport const OpenGraph = () => {\n    const { loadGraph } = useStore()\n\n    const handleOpen = useCallback(() => {\n        loadFromJSON().then(graph => {\n            loadGraph(graph)\n        })\n    }, [loadGraph])\n\n    return (\n        <SidebarButton onClick={handleOpen}>\n            <MdFolderOpen />\n        </SidebarButton>\n    )\n}\n","import styled from 'styled-components'\nimport { ResolvedLink, ResolvedNode } from '../state'\nimport { AddNodeButton } from './AddNodeButton'\nimport { NewGraph } from './NewGraph'\nimport { SaveGraph } from './SaveGraph'\nimport { OpenGraph } from './OpenGraph'\n\nconst Container = styled.div`\n    position: fixed;\n    top: 46px;\n    left: 0;\n    width: 64px;\n    height: 100%;\n    background: #000000;\n`\n\nexport const Sidebar = ({ nodes, links }: { nodes: ResolvedNode[]; links: ResolvedLink[] }) => {\n    return (\n        <Container>\n            <AddNodeButton />\n            <SaveGraph nodes={nodes} links={links} />\n            <OpenGraph />\n            <NewGraph />\n        </Container>\n    )\n}\n","import chordExample from './chord.json'\nimport seriesExample from './series.json'\n\nexport const examples = [\n    {\n        name: 'Chord diagram',\n        data: chordExample,\n    },\n    {\n        name: 'XY series charts',\n        data: seriesExample,\n    },\n]\n","import styled from 'styled-components'\nimport { FaExternalLinkAlt } from 'react-icons/fa'\nimport { examples } from '../examples'\nimport { useStore } from '../state'\nimport { useCallback } from 'react'\n\nconst ExampleItem = ({\n    example,\n    onLoad,\n}: {\n    example: {\n        name: string\n        data: any\n    }\n    onLoad: () => void\n}) => {\n    const { loadGraph } = useStore()\n\n    const handleLoad = useCallback(() => {\n        loadGraph(example.data)\n        onLoad()\n    }, [loadGraph, example.data, onLoad])\n\n    return (\n        <ExampleItemContainer onClick={handleLoad}>\n            {example.name}\n            <FaExternalLinkAlt />\n        </ExampleItemContainer>\n    )\n}\n\nconst ExampleItemContainer = styled.div`\n    display: flex;\n    padding: 6px 9px 6px 12px;\n    align-items: center;\n    background-color: #000000;\n    border-radius: 2px;\n    color: pink;\n    cursor: pointer;\n    margin: 0 12px 9px 0;\n\n    svg {\n        margin-left: 12px;\n    }\n\n    &:hover {\n        box-shadow: 0 0 0 2px pink;\n    }\n`\n\nexport const ExampleLoader = ({ onLoad }: { onLoad: () => void }) => {\n    return (\n        <Container>\n            {examples.map(example => (\n                <ExampleItem key={example.name} example={example} onLoad={onLoad} />\n            ))}\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    margin: 12px 0 3px;\n`\n","import { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, ModalTitle } from './Modal'\nimport { ExampleLoader } from './ExampleLoader'\n\nexport const Welcome = () => {\n    const [isOpen, setIsOpen] = useState(true)\n\n    const handleClose = useCallback(() => {\n        setIsOpen(false)\n    }, [setIsOpen])\n\n    return (\n        <>\n            {isOpen && (\n                <Modal onCloseRequest={handleClose} maxWidth={500}>\n                    <ModalTitle>Welcome</ModalTitle>\n                    <Message>\n                        <p>\n                            Welcome to the new nivo graph editor! This application is currently an\n                            early prototype, so things might (and will) break ¯\\_(ツ)_/¯, sorry for\n                            that.\n                        </p>\n                        <p>\n                            The motivation behind this project is to provide a way to visually\n                            create charts, without code, allowing people without too much technical\n                            background to easily use nivo charts.\n                        </p>\n                        <p>In order to get started, you can have a look at one of the example:</p>\n                        <ExampleLoader onLoad={handleClose} />\n                        <p>Otherwise, you can just start form scratch and craft your own chart.</p>\n                        <div\n                            style={{\n                                display: 'flex',\n                                justifyContent: 'center',\n                                margin: '12px 0',\n                            }}\n                        >\n                            <span\n                                onClick={handleClose}\n                                style={{\n                                    padding: '9px 12px',\n                                    backgroundColor: '#000',\n                                    borderRadius: '2px',\n                                    cursor: 'pointer',\n                                }}\n                            >\n                                Start from scratch\n                            </span>\n                        </div>\n                        <p>\n                            We hope you'll enjoy using this tool as much as we enjoy building it!\n                            &lt;3\n                        </p>\n                    </Message>\n                </Modal>\n            )}\n        </>\n    )\n}\n\nconst Message = styled.div`\n    padding: 12px 12px 0;\n    font-size: 12px;\n\n    p {\n        margin: 0 0 12px;\n    }\n`\n","import { MouseEvent, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { useStore, useSelectedNodes, useGraph } from './state'\nimport {\n    AppHeader,\n    AppFooter,\n    NodesLayer,\n    LinkingLayer,\n    LinksLayer,\n    NodeInfoPanel,\n    Sidebar,\n    Welcome,\n} from './components'\n\nexport const App = () => {\n    const store = useStore()\n    const { nodes, links } = useGraph()\n    const selectedNodes = useSelectedNodes()\n\n    const { drag, updateDrag, stopDrag, linking, updateLinking, stopLinking } = store\n    const handleMouseMove = useCallback(\n        (event: MouseEvent) => {\n            if (drag.isDragging) {\n                updateDrag([event.clientX, event.clientY])\n            }\n            if (linking.isLinking) {\n                updateLinking([event.clientX, event.clientY])\n            }\n        },\n        [drag.isDragging, updateDrag, linking.isLinking, updateLinking]\n    )\n    const handleMouseOut = useCallback(\n        (event: MouseEvent) => {\n            if (drag.isDragging) {\n                stopDrag()\n            }\n            if (linking.isLinking) {\n                stopLinking()\n            }\n        },\n        [drag.isDragging, stopDrag, linking.isLinking, stopLinking]\n    )\n\n    return (\n        <>\n            <AppHeader />\n            <Sidebar nodes={nodes} links={links} />\n            <Canvas\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseOut}\n                onMouseLeave={handleMouseOut}\n            >\n                <LinksLayer links={links} />\n                <NodesLayer nodes={nodes} />\n                <LinkingLayer />\n            </Canvas>\n            <InfoPanel>\n                {selectedNodes.length === 1 && <NodeInfoPanel node={selectedNodes[0]} />}\n            </InfoPanel>\n            <AppFooter />\n            <Welcome />\n        </>\n    )\n}\n\nconst Canvas = styled.div`\n    position: fixed;\n    top: 46px;\n    bottom: 52px;\n    left: 64px;\n    width: calc(100% - 364px);\n    height: calc(100% - 82px);\n    background: #292929;\n`\n\nconst InfoPanel = styled.div`\n    position: fixed;\n    top: 46px;\n    right: 0;\n    width: 300px;\n    height: 100%;\n    background: #111111;\n    overflow-y: auto;\n`\n","import { State, isNode } from './types'\nimport { useGraph, useStore } from './store'\n\nconst nodesSelector = (state: State) => state.elements.filter(isNode)\n\nexport const useNodes = () => useStore(nodesSelector)\n\nexport const useSelectedNodes = () => {\n    const state = useStore()\n    const { nodes } = useGraph()\n\n    if (state.selectedNodeIds.length === 0) {\n        return []\n    }\n\n    return nodes.filter(node => state.selectedNodeIds.includes(node.id))\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}