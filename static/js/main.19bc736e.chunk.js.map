{"version":3,"sources":["components/PortWidget.tsx","services_registry.ts","registry.ts","store/generateElementId.ts","store/types.ts","store/store.ts","store/linking.ts","store/nodes.ts","components/PropertyWidget.tsx","components/PropertiesWidget.tsx","services/properties/index.ts","services/properties/AnglePropertyService.tsx","services/properties/BlendModePropertyService.tsx","services/properties/ChoicesPropertyService.tsx","services/properties/CustomPropertyService.tsx","services/properties/MatrixPropertyService/index.ts","services/properties/NumberPropertyService/index.ts","services/index.ts","services/properties/RefPropertyService.tsx","services/properties/TextPropertyService.tsx","services/nodes/AreaBumpNodeService.tsx","services/nodes/AxisNodeService.ts","services/nodes/BlendModeNodeService.ts","services/nodes/CanvasNodeService.tsx","services/nodes/ChordNodeService.tsx","services/nodes/ColorSchemeNodeService.ts","services/nodes/LineNodeService.tsx","services/nodes/MarginNodeService.tsx","services/nodes/NivoThemeNodeService.tsx","services/nodes/ScatterPlotNodeService.tsx","services/nodes/SeriesXYNodeService.tsx","services/nodes/SerieXYNodeService.ts","services/nodes/MatrixNodeService.tsx","services/properties/ArrayStringPropertyService/ArrayStringPropertyControl.tsx","services/properties/ArrayStringPropertyService/ArrayStringPropertyService.tsx","services/properties/ArrayXYPropertyService/ArrayXYPropertyControl.tsx","services/properties/ArrayXYPropertyService/ArrayXYPropertyService.tsx","services/properties/MatrixPropertyService/MatrixPropertyControl.tsx","services/properties/MatrixPropertyService/MatrixPropertyService.tsx","services/properties/NumberPropertyService/NumberPropertyService.tsx","services/properties/NumberPropertyService/NumberPropertyControl.tsx","theming/GlobalStyle.tsx","theming/helpers.ts","theming/themes/index.ts","theming/themes/darkTheme.ts","theming/themes/lightTheme.ts","theming/hooks.ts","components/AppFooter.tsx","components/AppHeader.tsx","components/LinkingLayer.tsx","components/LinkWidget.tsx","components/LinksLayer.tsx","components/NodeInfoPanel/NodeName.tsx","utils/useDocumentEventListener.ts","components/ui/ConfirmButtons.tsx","components/Modal.tsx","components/NodeInfoPanel/NodeControls.tsx","components/NodeInfoPanel/PropertyItem.tsx","components/NodeInfoPanel/NodeInfoPanel.tsx","components/NodeWidget.tsx","components/NodesLayer.tsx","components/SidebarButton.tsx","components/NodeSelector.tsx","components/AddNodeButton.tsx","components/NewGraph.tsx","fs.ts","components/SaveGraph.tsx","components/OpenGraph.tsx","components/Settings.tsx","components/Sidebar.tsx","examples/index.ts","components/ExampleLoader.tsx","components/Welcome.tsx","App.tsx","reportWebVitals.js","index.tsx","components/ui/Input.tsx"],"names":["PortWidget","memo","type","elementId","x","y","category","useLinking","linkingType","isLinking","potentialId","useLinkingActions","startLinking","setLinkingPotentialPort","resetLinkingPotentialPort","handleLinking","useCallback","event","stopPropagation","anchor","initial","clientX","clientY","handleMouseEnter","handleMouseLeave","Container","onMouseDown","onMouseEnter","onMouseLeave","isHighlighted","style","left","Port","styled","div","PORT_SIZE","props","theme","colors","background","getCategoryColor","CONTAINER_SIZE","undefined","css","ServiceRegistry","properties","nodes","propertyServices","nodeServices","this","nodeType","nodeService","Error","grouped","Object","entries","groupBy","sortBy","group","map","types","propertyType","propertyService","propertySpec","getPropertyService","elementType","id","generateElementId","accepts","hasOutput","data","options","create","property","ownValue","input","getValue","getNodeService","resolved","forEach","name","servicesRegistry","service","uuidV4","isProperty","element","isNode","isLink","updateNodePosition","elements","nodeId","offset","node","find","includes","useStore","set","settings","themeId","setSettings","partialSettings","state","selectedNodeIds","setSelectedNodeIds","createNode","registry","newNode","replace","width","height","factory","newProperties","newProperty","createProperty","length","hydrate","push","removeNode","propertyIds","filter","nodeAndPropertyIds","sourceId","targetId","updateNode","patch","updateProperty","propertyId","loadGraph","graph","links","link","drag","isDragging","dragging","startDrag","updateDrag","position","stopDrag","linking","previous","updateLinking","currentElement","potentialElement","source","target","findLinkingPotentialPort","stopLinking","unlink","settingsSelector","useSettings","loadGraphSelector","useLoadGraph","createNodeSelector","useCreateNode","updateNodeSelector","useUpdateNode","removeNodeSelector","useRemoveNode","setSelectedNodeIdsSelector","useSetSelectedNodeIds","linkingSelector","shallow","unlinkSelector","useUnlink","serializeProperties","serialize","serializeElements","useGraph","useMemo","resolvedNodes","propertiesByNodeId","resolvedProperties","resolvedLinks","isSelected","propertyNode","dependencies","values","resolveGraph","useSelectedNodes","PropertyWidget","PropertyContainer","PropertyName","transparentize","nodeBackground","text","span","PropertiesWidget","createElement","widget","AnglePropertyService","spec","serialized","control","value","onChange","console","log","BlendModePropertyService","ChoicesPropertyService","choices","choice","label","CustomPropertyService","renderer","RefPropertyService","resolvePropertyValue","TextPropertyService","AreaBumpNodeService","description","spacing","xPadding","resolvePropertyValues","isInteractive","AxisNodeService","tickSize","tickPadding","tickRotation","legend","legendOffset","BlendModeNodeService","blendMode","CanvasNodeService","content","backgroundColor","overflow","ChordNodeService","controlType","min","max","step","keys","innerRadiusRatio","innerRadiusOffset","Array","isArray","matrix","ColorSchemeNodeService","scheme","LineNodeService","MarginNodeService","top","right","bottom","NivoThemeNodeService","fontFamily","fontSize","textColor","grid","line","stroke","tooltip","container","color","borderRadius","boxShadow","padding","ScatterPlotNodeService","SeriesXYNodeService","SerieXYNodeService","MatrixNodeService","Grid","RemoveButton","accentColor","AddItemButton","ArrayStringPropertyService","setValue","item","index","itemIndex","handleChange","size","onClick","_","i","handleRemove","ControlContainer","ControlAddItemButton","ArrayXYPropertyService","key","Number","SizeContainer","MatrixWrapper","MatrixContainer","columns","rows","MatrixPropertyService","xSize","ySize","valueUpdate","handleSizeChange","newXSize","newYSize","newValue","slice","newRowIndex","from","fill","row","newRow","newColumnIndex","rowIndex","cell","columnIndex","targetRowIndex","targetColumnIndex","handleValueChange","NumberPropertyService","partialOptions","GlobalStyle","createGlobalStyle","categories","themes","mediumDepthBackground","topDepthBackground","badgeBackground","inputBackground","inputText","textLight","border","lightBorder","nodeBorder","success","overlay","axis_grid","charts","colors_theming","dimensions","render","useCurrentTheme","AppFooter","join","footer","AppHeader","Header","header","ICON_SIZE","LinkingLayer","iconPosition","icon","pointerEvents","Line","strokeLinecap","x1","x2","y1","y2","Circle","cx","cy","r","Icon","isValid","circle","lineGenerator","d3Line","curve","curveBasis","UNLINK_BUTTON_SIZE","LinkWidget","sourceElementType","sourceX","sourceY","sourceWidth","sourceHeight","targetX","targetY","targetHeight","sourcePosition","targetPosition","xDistance","center","xOffset","Math","abs","points","path","useState","isHover","setIsHover","handleHover","handleOut","handleUnlink","Path","d","CapturePath","UnlinkButton","LinksLayer","NodeName","currentName","isEditing","setIsEditing","setName","inputRef","useRef","useEffect","current","focus","eventType","listener","handleEscape","document","addEventListener","removeEventListener","Name","Input","ref","onKeyPress","ConfirmButtons","confirmLabel","onConfirm","cancelLabel","onCancel","Button","Modal","children","maxWidth","onCloseRequest","createPortal","role","aria-modal","onKeyDown","Background","Content","body","ModalTitle","h2","NodeControls","isRemoving","setIsRemoving","initRemoval","cancelRemoval","handleRemoveNode","Control","Relation","ownId","parentName","goToRelation","RelationContainer","RelationName","UnlinkIcon","PropertyItem","hasInput","PropertyHeader","h4","NodeInfoPanel","handleClose","Id","Close","Properties","NodeValueTitle","$$typeof","NodeValue","JSON","stringify","pre","NodeWidget","hasCustomWidget","handleStartDrag","NodeContainer","transform","NodeHeader","NodesLayer","Layer","SidebarButton","NodeType","onCreate","NodeTypeItem","NodeTypeTitle","NodeTypeDescription","Category","CategoryTitle","NodeSelector","getNodeServiceCategories","h3","AddNodeButton","isOpen","setIsOpen","handleOpen","NewGraph","handleNewGraph","saveAsJSON","a","stringified","version","blob","Blob","fileSave","fileName","extensions","fileHandle","parseFileContent","Promise","resolve","reader","FileReader","readAsText","onloadend","readyState","DONE","result","parse","loadFromJSON","fileOpen","mimeTypes","SaveGraph","OpenGraph","then","Settings","Sidebar","examples","ExampleItem","example","onLoad","handleLoad","ExampleItemContainer","ExampleLoader","Welcome","Message","display","justifyContent","margin","cursor","App","store","selectedNodes","handleMouseMove","handleMouseOut","Canvas","onMouseMove","onMouseUp","InfoPanel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.19bc736e.chunk.js","sourcesContent":["import { useCallback, MouseEvent, memo } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ElementId, useLinkingActions, useLinking } from '../store'\nimport { getCategoryColor } from '../theming'\n\nconst CONTAINER_SIZE = 20\nconst PORT_SIZE = 10\n\nexport const PortWidget = memo(\n    ({\n        type,\n        elementId,\n        x,\n        y,\n        category = 'default',\n    }: {\n        type: 'source' | 'target'\n        elementId: ElementId\n        x: number\n        y: number\n        category?: string\n    }) => {\n        const { type: linkingType, isLinking, potentialId } = useLinking()\n        const {\n            startLinking,\n            setLinkingPotentialPort,\n            resetLinkingPotentialPort,\n        } = useLinkingActions()\n\n        const handleLinking = useCallback(\n            (event: MouseEvent) => {\n                event.stopPropagation()\n\n                startLinking({\n                    elementId,\n                    type,\n                    anchor: [x, y],\n                    initial: [event.clientX, event.clientY],\n                })\n            },\n            [startLinking, elementId, type, x, y]\n        )\n\n        const handleMouseEnter = useCallback(() => {\n            setLinkingPotentialPort(elementId, type)\n        }, [setLinkingPotentialPort, elementId, type])\n\n        const handleMouseLeave = useCallback(() => {\n            resetLinkingPotentialPort()\n        }, [resetLinkingPotentialPort])\n\n        return (\n            <Container\n                onMouseDown={handleLinking}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n                isLinking={isLinking}\n                isHighlighted={potentialId === elementId && linkingType !== type}\n                style={{\n                    left: type === 'target' ? 0 : '100%',\n                }}\n            >\n                <Port category={category} />\n            </Container>\n        )\n    }\n)\n\nconst Port = styled.div<{\n    category: string\n}>`\n    pointer-events: all;\n    width: ${PORT_SIZE}px;\n    height: ${PORT_SIZE}px;\n    border-radius: ${PORT_SIZE / 2}px;\n    background: ${props => props.theme.colors.background};\n    border: 2px solid ${props => getCategoryColor(props.category, props.theme)};\n    transition: transform 200ms;\n`\n\nconst Container = styled.div<{\n    isLinking: boolean\n    isHighlighted: boolean\n}>`\n    pointer-events: all;\n    position: absolute;\n    top: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${CONTAINER_SIZE}px;\n    height: ${CONTAINER_SIZE}px;\n    margin-top: -${CONTAINER_SIZE / 2}px;\n    margin-left: -${CONTAINER_SIZE / 2}px;\n    cursor: crosshair;\n\n    ${Port} {\n        transform: scale(${props => (props.isHighlighted ? 1.6 : 1)});\n    }\n\n    ${props =>\n        !props.isLinking\n            ? css`\n                  &:hover {\n                      transform: scale(1.6);\n                  }\n              `\n            : undefined};\n`\n","import { groupBy, sortBy } from 'lodash'\nimport {\n    CreateProperty,\n    generateElementId,\n    Property,\n    PropertySpec,\n    ResolvedNode,\n    ResolvedProperty,\n} from './store'\nimport { NodeType, NodeServiceMap, PropertyType, PropertyServiceMap } from './registry'\n\nexport interface NodeService<Type extends NodeType = NodeType, Data = any> {\n    type: Type\n    category: string\n    description?: string\n    hasOutput: boolean\n    properties: PropertySpec[]\n    factory: (data?: Partial<Data>) => Data\n    getValue: (node: ResolvedNode<Type>) => any\n    widget?: (props: { node: ResolvedNode<Type> }) => JSX.Element\n}\n\nexport interface PropertyService<\n    Type extends PropertyType = PropertyType,\n    Data = any,\n    Options = any,\n    Value = any,\n    SerializedValue = Value\n> {\n    type: Type\n    create: (propertySpec: PropertySpec<Type, Data, Options>) => PropertySpec<Type, Data, Options>\n    getValue: (property: ResolvedProperty<Type, Data, Options>) => Value\n    serialize: (property: ResolvedProperty<Type, Data, Options>) => SerializedValue\n    hydrate: (\n        property: Property<Type, Data, Options>,\n        serializedValue: SerializedValue\n    ) => Property<Type, Data, Options>\n    widget?: (props: { property: Property<Type, Data, Options> }) => JSX.Element\n    control?: (props: { property: Property<Type, Data, Options> }) => JSX.Element\n}\n\nexport class ServiceRegistry {\n    private readonly propertyServices: PropertyServiceMap\n    private readonly nodeServices: NodeServiceMap\n\n    constructor(properties: PropertyServiceMap, nodes: NodeServiceMap) {\n        this.propertyServices = properties\n        this.nodeServices = nodes\n    }\n\n    getNodeService(nodeType: NodeType): NodeServiceMap[NodeType] {\n        const nodeService = this.nodeServices[nodeType]\n        if (!nodeService) {\n            throw new Error(`no node service defined for: ${nodeType}`)\n        }\n\n        return nodeService\n    }\n\n    getNodeServiceCategories() {\n        const grouped = Object.entries(groupBy(this.nodeServices, 'category'))\n        const sorted = sortBy(grouped, group => group[0])\n\n        return sorted.map(group => ({\n            category: group[0],\n            types: sortBy(group[1], 'type'),\n        }))\n    }\n\n    getPropertyService<Type extends PropertyType = PropertyType>(\n        propertyType: Type\n    ): PropertyServiceMap[Type] {\n        const propertyService = this.propertyServices[propertyType]\n        if (!propertyService) {\n            throw new Error(`no property service defined for: ${propertyType}`)\n        }\n\n        return propertyService\n    }\n\n    createProperty(propertySpec: PropertySpec) {\n        const propertyService = this.getPropertyService(propertySpec.type)\n\n        const property: CreateProperty = {\n            elementType: 'property',\n            id: generateElementId(),\n            accepts: [],\n            hasOutput: false,\n            data: undefined,\n            options: {},\n            // @ts-ignore\n            ...propertyService.create(propertySpec),\n        }\n\n        return property\n    }\n\n    resolvePropertyValue<Type extends PropertyType = PropertyType>(\n        property: ResolvedProperty<Type>,\n        ownValue?: any\n    ) {\n        const { input } = property\n        if (!input) {\n            return ownValue\n        }\n\n        if (input.elementType === 'property') {\n            // @ts-ignore\n            return this.getPropertyService(input.type).getValue(input, this)\n        }\n\n        if (input.elementType === 'node') {\n            // @ts-ignore\n            return this.getNodeService(input.type).getValue(input, this)\n        }\n    }\n\n    resolvePropertyValues(properties: ResolvedProperty[]) {\n        const resolved: any = {}\n        properties.forEach(property => {\n            resolved[property.name] = this.getPropertyService(property.type)\n                // @ts-ignore\n                .getValue(property, this)\n        })\n\n        return resolved\n    }\n}\n","import { ServiceRegistry } from './services_registry'\nimport * as service from './services'\n\nconst propertyServiceMap = {\n    'property:angle': service.AnglePropertyService,\n    'property:array_string': service.ArrayStringPropertyService,\n    'property:array_xy': service.ArrayXYPropertyService,\n    'property:choices': service.ChoicesPropertyService,\n    'property:blend_mode': service.BlendModePropertyService,\n    'property:custom': service.CustomPropertyService,\n    'property:matrix': service.MatrixPropertyService,\n    'property:number': service.NumberPropertyService,\n    'property:ref': service.RefPropertyService,\n    'property:text': service.TextPropertyService,\n}\nexport type PropertyServiceMap = typeof propertyServiceMap\nexport type PropertyType = keyof PropertyServiceMap\n\nconst nodeServiceMap = {\n    'node:area_bump': service.AreaBumpNodeService,\n    'node:axis': service.AxisNodeService,\n    'node:blend_mode': service.BlendModeNodeService,\n    'node:canvas': service.CanvasNodeService,\n    'node:chord': service.ChordNodeService,\n    'node:color_scheme': service.ColorSchemeNodeService,\n    'node:line': service.LineNodeService,\n    'node:margin': service.MarginNodeService,\n    'node:matrix': service.MatrixNodeService,\n    'node:nivo_theme': service.NivoThemeNodeService,\n    'node:scatterplot': service.ScatterPlotNodeService,\n    'node:serie_xy': service.SerieXYNodeService,\n    'node:series_xy': service.SeriesXYNodeService,\n}\nexport type NodeServiceMap = typeof nodeServiceMap\nexport type NodeType = keyof NodeServiceMap\n\nconst servicesRegistry = new ServiceRegistry(propertyServiceMap, nodeServiceMap)\n\nexport default servicesRegistry\n","import { v4 as uuidV4 } from 'uuid'\nimport { ElementId } from './types'\n\nexport const generateElementId = (): ElementId => uuidV4()\n","import { PropertyType, NodeType } from '../registry'\n\nexport type ElementId = string\n\nexport interface CreateProperty<\n    Type extends PropertyType = PropertyType,\n    Data = any,\n    Options = any\n> {\n    elementType: 'property'\n    id: ElementId\n    type: Type\n    category: string\n    name: string\n    accepts: string[]\n    hasOutput: boolean\n    data: Data\n    options: Options\n}\n\nexport type PropertySpec<\n    Type extends PropertyType = PropertyType,\n    Data = any,\n    Options = any\n> = Pick<CreateProperty<Type, Data, Options>, 'type' | 'category' | 'name'> &\n    Partial<\n        Omit<\n            CreateProperty<Type, Data, Options>,\n            'elementType' | 'type' | 'category' | 'name' | 'id'\n        >\n    >\n\nexport interface Property<Type extends PropertyType = PropertyType, Data = any, Options = any>\n    extends CreateProperty<Type, Data, Options> {\n    nodeId: ElementId\n    x: number\n    y: number\n    width: number\n    height: number\n}\n\nexport interface ResolvedProperty<\n    Type extends PropertyType = PropertyType,\n    Data = any,\n    Options = any\n> extends Property<Type, Data, Options> {\n    node: ResolvedNode\n    dependencies: (ResolvedNode | ResolvedProperty)[]\n    input?: ResolvedNode | ResolvedProperty<Type>\n}\n\nexport const isProperty = <Type extends PropertyType = PropertyType>(\n    element: Element\n): element is Property<Type> => element.elementType === 'property'\n\nexport interface Node<Type extends NodeType = NodeType, Data = any> {\n    elementType: 'node'\n    type: Type\n    id: ElementId\n    x: number\n    y: number\n    width: number\n    name: string\n    data: Data\n    height: number\n    properties: ElementId[]\n}\n\nexport interface ResolvedNode<Type extends NodeType = NodeType>\n    extends Omit<Node<Type>, 'properties'> {\n    isSelected: boolean\n    properties: ResolvedProperty[]\n}\n\nexport interface SerializedNode<Type extends NodeType = NodeType> {\n    id: ElementId\n    type: Type\n    name: string\n    x: number\n    y: number\n    width: number\n}\n\nexport interface SerializedElements {\n    nodes: SerializedNode[]\n    links: any[]\n}\n\nexport const isNode = (element: Element): element is Node => element.elementType === 'node'\n\nexport interface Link {\n    id: ElementId\n    elementType: 'link'\n    sourceId: ElementId\n    targetId: ElementId\n}\n\nexport const isLink = (element: Element): element is Link => element.elementType === 'link'\n\nexport interface ResolvedLink extends Link {\n    source: ResolvedNode | ResolvedProperty\n    target: ResolvedNode | ResolvedProperty\n}\n\nexport type Element = Node | Property | Link\n\nexport interface AppSettings {\n    themeId: string\n}\n\nexport type State = {\n    settings: AppSettings\n    setSettings: (partialSettings: Partial<AppSettings>) => void\n    // flat representation of all nodes/properties/links\n    elements: Element[]\n    selectedNodeIds: ElementId[]\n    setSelectedNodeIds: (ids: ElementId[]) => void\n    createNode: (type: NodeType) => void\n    updateNode: (id: ElementId, patch: any) => void\n    removeNode: (id: ElementId) => void\n    updateProperty: (propertyId: ElementId, patch: any) => void\n    loadGraph: (graph: any) => void\n    //\n    // DRAGGING\n    //\n    dragging: {\n        isDragging: boolean\n        elementId: ElementId | null\n        initial: [number, number]\n        offset: [number, number]\n    }\n    startDrag: (elementId: ElementId, initial: [number, number]) => void\n    updateDrag: (position: [number, number]) => void\n    stopDrag: () => void\n    //\n    // LINKING\n    //\n    linking: {\n        isLinking: boolean\n        elementId?: ElementId\n        elementType?: string\n        accepts: string[]\n        potentialId?: ElementId\n        type: 'source' | 'target'\n        anchor: [number, number]\n        position: [number, number]\n        previous: [number, number]\n    }\n    startLinking: (props: {\n        elementId?: ElementId\n        type: 'source' | 'target'\n        anchor: [number, number]\n        initial: [number, number]\n    }) => void\n    updateLinking: (position: [number, number]) => void\n    setLinkingPotentialPort: (elementId: ElementId, type: 'source' | 'target') => void\n    resetLinkingPotentialPort: () => void\n    stopLinking: () => void\n    link: (sourceId: ElementId, targetId: ElementId) => void\n    unlink: (sourceId: ElementId, targetId: ElementId) => void\n}\n","import { useMemo } from 'react'\nimport create from 'zustand'\nimport shallow from 'zustand/shallow'\nimport {\n    Element,\n    ElementId,\n    State,\n    Node,\n    ResolvedNode,\n    isNode,\n    Property,\n    ResolvedProperty,\n    isProperty,\n    Link,\n    ResolvedLink,\n    isLink,\n    SerializedElements,\n} from './types'\nimport { generateElementId } from './generateElementId'\nimport registry, { NodeType } from '../registry'\nimport { findLinkingPotentialPort } from './linking'\n\nconst DEFAULT_NODE_HEADER_HEIGHT = 24\nconst PROPERTY_HEIGHT = 20\n\nconst updateNodePosition = (\n    elements: Element[],\n    nodeId: ElementId | null,\n    offset: [number, number]\n): Element[] => {\n    if (nodeId === null) {\n        return elements\n    }\n\n    const node: Node | undefined = elements.find(\n        element => isNode(element) && element.id === nodeId\n    ) as any\n    if (!node) {\n        return elements\n    }\n\n    return elements.map(element => {\n        if (\n            (isNode(element) && element.id === node.id) ||\n            (isProperty(element) && node.properties.includes(element.id))\n        ) {\n            return {\n                ...element,\n                x: element.x + offset[0],\n                y: element.y + offset[1],\n            }\n        }\n\n        return element\n    })\n}\n\nexport const useStore = create<State>(set => ({\n    settings: {\n        themeId: 'dark',\n    },\n    setSettings: partialSettings =>\n        set(state => {\n            return {\n                settings: {\n                    ...state.settings,\n                    ...partialSettings,\n                },\n            }\n        }),\n    elements: [],\n    selectedNodeIds: [],\n    setSelectedNodeIds: selectedNodeIds => set(() => ({ selectedNodeIds })),\n    createNode: (type: NodeType) =>\n        set(state => {\n            const nodeService = registry.getNodeService(type)\n\n            const newNode: Node = {\n                elementType: 'node',\n                id: generateElementId(),\n                type: type,\n                name: nodeService.type.replace('_', ' '),\n                x: 100,\n                y: 100,\n                width: 120,\n                height: 100,\n                properties: [],\n                data: nodeService.factory(),\n            }\n\n            const newProperties: Property[] = []\n            nodeService.properties.forEach(property => {\n                const propertyService = registry.getPropertyService(property.type)\n\n                let newProperty: Property = {\n                    ...registry.createProperty(property),\n                    nodeId: newNode.id,\n                    x: newNode.x,\n                    y:\n                        newNode.y +\n                        DEFAULT_NODE_HEADER_HEIGHT +\n                        newProperties.length * PROPERTY_HEIGHT,\n                    height: PROPERTY_HEIGHT,\n                    width: newNode.width,\n                }\n\n                if (newNode.data[property.name] !== undefined) {\n                    // @ts-ignore\n                    newProperty = propertyService.hydrate(newProperty, newNode.data[property.name])\n                }\n\n                newProperties.push(newProperty)\n            })\n\n            newNode.properties = newProperties.map(property => property.id)\n\n            return {\n                elements: [...state.elements, ...newProperties, newNode],\n                selectedNodeIds: [newNode.id],\n            }\n        }),\n    removeNode: id =>\n        set(state => {\n            const propertyIds = state.elements\n                .filter(element => element.elementType === 'property' && element.nodeId === id)\n                .map(property => property.id)\n            const nodeAndPropertyIds = [id, ...propertyIds]\n\n            return {\n                elements: state.elements.filter(element => {\n                    if (element.elementType === 'link') {\n                        return (\n                            !nodeAndPropertyIds.includes(element.sourceId) &&\n                            !nodeAndPropertyIds.includes(element.targetId)\n                        )\n                    }\n\n                    return !nodeAndPropertyIds.includes(element.id)\n                }),\n            }\n        }),\n    updateNode: (id, patch) =>\n        set(state => {\n            const updatedElements = state.elements.map(element => {\n                if (!isNode(element) || element.id !== id) {\n                    return element\n                }\n\n                return {\n                    ...element,\n                    ...patch,\n                }\n            })\n\n            return {\n                elements: updatedElements,\n            }\n        }),\n    updateProperty: (propertyId, patch) =>\n        set(state => {\n            const updatedElements = state.elements.map(element => {\n                if (!isProperty(element) || element.id !== propertyId) {\n                    return element\n                }\n\n                return {\n                    ...element,\n                    ...patch,\n                }\n            })\n\n            return {\n                elements: updatedElements,\n            }\n        }),\n    loadGraph: graph =>\n        set(state => {\n            const elements: any[] = []\n\n            graph.nodes.forEach((node: any) => {\n                const nodeService = registry.getNodeService(node.type)\n                const propertyIds: ElementId[] = []\n\n                nodeService.properties.forEach(property => {\n                    const propertyService = registry.getPropertyService(property.type)\n\n                    const propertyId = node.data[property.name]\n                        ? node.data[property.name].id\n                        : generateElementId()\n\n                    let newProperty: Property = {\n                        ...registry.createProperty(property),\n                        id: propertyId,\n                        nodeId: node.id,\n                        x: node.x,\n                        y:\n                            DEFAULT_NODE_HEADER_HEIGHT +\n                            node.y +\n                            propertyIds.length * PROPERTY_HEIGHT,\n                        width: node.width,\n                        height: PROPERTY_HEIGHT,\n                    }\n\n                    if (node.data[property.name]) {\n                        newProperty = propertyService.hydrate(\n                            // @ts-ignore\n                            newProperty,\n                            node.data[property.name].data\n                        )\n                    }\n\n                    elements.push(newProperty)\n                    propertyIds.push(newProperty.id)\n                })\n\n                elements.push({\n                    elementType: 'node',\n                    id: node.id,\n                    type: node.type,\n                    name: node.name || node.type.replace('_', ' '),\n                    x: node.x,\n                    y: node.y,\n                    width: node.width,\n                    height: DEFAULT_NODE_HEADER_HEIGHT + propertyIds.length * PROPERTY_HEIGHT,\n                    properties: propertyIds,\n                })\n            })\n\n            graph.links.forEach((link: any) => {\n                elements.push({\n                    elementType: 'link',\n                    id: link.id,\n                    sourceId: link.sourceId,\n                    targetId: link.targetId,\n                })\n            })\n\n            return {\n                selectedNodeIds: [],\n                elements,\n                drag: {\n                    isDragging: false,\n                    elementId: null,\n                    initial: [0, 0],\n                    offset: [0, 0],\n                },\n            }\n        }),\n    //\n    // dragging\n    //\n    dragging: {\n        isDragging: false,\n        elementId: null,\n        initial: [0, 0],\n        offset: [0, 0],\n    },\n    startDrag: (elementId, initial) =>\n        set(state => {\n            return {\n                dragging: {\n                    isDragging: true,\n                    elementId: elementId,\n                    initial,\n                    offset: [0, 0],\n                },\n            }\n        }),\n    updateDrag: position =>\n        set(state => {\n            const offset: [number, number] = [\n                position[0] - state.dragging.initial[0],\n                position[1] - state.dragging.initial[1],\n            ]\n\n            return {\n                dragging: {\n                    ...state.dragging,\n                    offset,\n                    initial: [position[0], position[1]],\n                },\n                elements: updateNodePosition(state.elements, state.dragging.elementId, offset),\n            }\n        }),\n    stopDrag: () =>\n        set(() => {\n            return {\n                dragging: {\n                    isDragging: false,\n                    elementId: null,\n                    initial: [0, 0],\n                    offset: [0, 0],\n                },\n            }\n        }),\n    //\n    // linking\n    //\n    linking: {\n        isLinking: false,\n        elementId: undefined,\n        accepts: [],\n        type: 'source',\n        anchor: [0, 0],\n        position: [0, 0],\n        previous: [0, 0],\n    },\n    startLinking: ({ elementId, type, anchor, initial }) =>\n        set(state => {\n            const element = state.elements.find(element => element.id === elementId)\n            let elementType: string | undefined = undefined\n            if (element && 'type' in element) {\n                elementType = element.type\n            }\n\n            let accepts: string[] = []\n            if (element && 'accepts' in element) {\n                accepts = element.accepts\n            }\n\n            return {\n                linking: {\n                    isLinking: true,\n                    elementId,\n                    elementType,\n                    accepts,\n                    type,\n                    anchor,\n                    position: anchor,\n                    previous: initial,\n                },\n            }\n        }),\n    updateLinking: position =>\n        set(state => {\n            const offset = [\n                position[0] - state.linking.previous[0],\n                position[1] - state.linking.previous[1],\n            ]\n\n            return {\n                linking: {\n                    ...state.linking,\n                    position: [\n                        state.linking.position[0] + offset[0],\n                        state.linking.position[1] + offset[1],\n                    ],\n                    previous: position,\n                },\n            }\n        }),\n    setLinkingPotentialPort: (elementId, type) =>\n        set(state => {\n            const potentialId = findLinkingPotentialPort(\n                state.linking,\n                state.elements,\n                elementId,\n                type\n            )\n            if (!potentialId) {\n                return {}\n            }\n\n            return {\n                linking: {\n                    ...state.linking,\n                    potentialId,\n                },\n            }\n        }),\n    resetLinkingPotentialPort: () =>\n        set(state => {\n            return {\n                linking: {\n                    ...state.linking,\n                    potentialId: undefined,\n                },\n            }\n        }),\n    stopLinking: () =>\n        set(state => {\n            let elements = state.elements\n            if (state.linking.elementId !== undefined && state.linking.potentialId !== undefined) {\n                const link: Link = {\n                    id: generateElementId(),\n                    elementType: 'link',\n                    sourceId:\n                        state.linking.type === 'source'\n                            ? state.linking.elementId\n                            : state.linking.potentialId,\n                    targetId:\n                        state.linking.type === 'source'\n                            ? state.linking.potentialId\n                            : state.linking.elementId,\n                }\n\n                elements = [...elements, link]\n            }\n\n            return {\n                elements,\n                linking: {\n                    isLinking: false,\n                    accepts: [],\n                    type: 'source',\n                    anchor: [0, 0],\n                    position: [0, 0],\n                    previous: [0, 0],\n                },\n            }\n        }),\n    link: (sourceId: ElementId, targetId: ElementId) =>\n        set(state => {\n            const link: Link = {\n                id: generateElementId(),\n                elementType: 'link',\n                sourceId,\n                targetId,\n            }\n\n            return {\n                elements: [...state.elements, link],\n            }\n        }),\n    unlink: (sourceId: ElementId, targetId: ElementId) =>\n        set(state => {\n            return {\n                elements: state.elements.filter(element => {\n                    return (\n                        !isLink(element) ||\n                        element.sourceId !== sourceId ||\n                        element.targetId !== targetId\n                    )\n                }),\n            }\n        }),\n}))\n\nconst settingsSelector = (state: State) => state.settings\nexport const useSettings = () => useStore(settingsSelector)\n\nconst loadGraphSelector = (state: State) => state.loadGraph\nexport const useLoadGraph = () => useStore(loadGraphSelector)\n\nconst createNodeSelector = (state: State) => state.createNode\nexport const useCreateNode = () => useStore(createNodeSelector)\n\nconst updateNodeSelector = (state: State) => state.updateNode\nexport const useUpdateNode = () => useStore(updateNodeSelector)\n\nconst removeNodeSelector = (state: State) => state.removeNode\nexport const useRemoveNode = () => useStore(removeNodeSelector)\n\nconst setSelectedNodeIdsSelector = (state: State) => state.setSelectedNodeIds\nexport const useSetSelectedNodeIds = () => useStore(setSelectedNodeIdsSelector)\n\nconst linkingSelector = (state: State) => state.linking\nexport const useLinking = () => useStore(linkingSelector)\n\nexport const useLinkingActions = () =>\n    useStore(\n        state => ({\n            startLinking: state.startLinking,\n            updateLinking: state.updateLinking,\n            setLinkingPotentialPort: state.setLinkingPotentialPort,\n            resetLinkingPotentialPort: state.resetLinkingPotentialPort,\n        }),\n        shallow\n    )\n\nconst linkSelector = (state: State) => state.link\nexport const useLink = () => useStore(linkSelector)\n\nconst unlinkSelector = (state: State) => state.unlink\nexport const useUnlink = () => useStore(unlinkSelector)\n\nconst serializeProperties = (properties: ResolvedProperty[]) => {\n    const props: any = {}\n    properties.forEach(property => {\n        props[property.name] = {\n            id: property.id,\n            // @ts-ignore\n            data: registry.getPropertyService(property.type).serialize(property),\n        }\n    })\n\n    return props\n}\n\nexport const serializeElements = (\n    nodes: ResolvedNode[],\n    links: ResolvedLink[]\n): SerializedElements => {\n    return {\n        nodes: nodes.map(node => {\n            return {\n                id: node.id,\n                type: node.type,\n                name: node.name,\n                x: node.x,\n                y: node.y,\n                width: node.width,\n                data: serializeProperties(node.properties),\n            }\n        }),\n        links: links.map(link => {\n            return {\n                id: link.id,\n                sourceId: link.source.id,\n                targetId: link.target.id,\n            }\n        }),\n    }\n}\n\nconst resolveGraph = (elements: Element[]) => {\n    const resolvedNodes: Record<ElementId, ResolvedNode> = {}\n    const propertiesByNodeId: Record<ElementId, ElementId[]> = {}\n    const resolvedProperties: Record<ElementId, ResolvedProperty> = {}\n    const resolvedLinks: Record<ElementId, ResolvedLink> = {}\n\n    const nodes = elements.filter(isNode)\n    const properties = elements.filter(isProperty)\n    const links = elements.filter(isLink)\n\n    // first pass to resolve nodes without resolving\n    // their properties.\n    nodes.forEach(node => {\n        propertiesByNodeId[node.id] = node.properties\n\n        resolvedNodes[node.id] = {\n            ...node,\n            isSelected: false,\n            properties: [],\n        }\n    })\n\n    // first pass to resolve properties without resolving\n    // dependencies.\n    properties.forEach(property => {\n        const propertyNode = resolvedNodes[property.nodeId]\n        if (!propertyNode) {\n            throw new Error(`unable to find property node: ${property.nodeId}`)\n        }\n\n        resolvedProperties[property.id] = {\n            ...property,\n            node: propertyNode,\n            dependencies: [],\n        }\n    })\n\n    // assign resolved properties to nodes.\n    Object.values(resolvedNodes).forEach(node => {\n        if (node.id in propertiesByNodeId) {\n            propertiesByNodeId[node.id].forEach(propertyId => {\n                const property = resolvedProperties[propertyId]\n                if (!property) {\n                    throw new Error(`unable to find property: ${propertyId}`)\n                }\n\n                node.properties.push(property)\n            })\n        }\n    })\n\n    links.forEach(link => {\n        const source: ResolvedNode | ResolvedProperty =\n            resolvedNodes[link.sourceId] || resolvedProperties[link.sourceId]\n        if (!source) {\n            throw new Error(`unable to find link source: ${link.sourceId}`)\n        }\n\n        const target: ResolvedNode | ResolvedProperty =\n            resolvedNodes[link.targetId] || resolvedProperties[link.targetId]\n        if (!target) {\n            throw new Error(`unable to find link target: ${link.sourceId}`)\n        }\n\n        // @ts-ignore\n        if (target.elementType === 'property') {\n            // @ts-ignore\n            target.input = source\n        }\n\n        resolvedLinks[link.id] = {\n            ...link,\n            source,\n            target,\n        }\n    })\n\n    return {\n        nodes: Object.values(resolvedNodes),\n        properties: Object.values(resolvedProperties),\n        links: Object.values(resolvedLinks),\n    }\n}\n\nexport const useGraph = () => {\n    const { elements, selectedNodeIds } = useStore()\n\n    const graph = useMemo(() => resolveGraph(elements), [elements])\n\n    useMemo(() => {\n        graph.nodes.forEach(node => {\n            node.isSelected = selectedNodeIds.includes(node.id)\n        })\n    }, [graph, selectedNodeIds])\n\n    return graph\n}\n","import { ElementId, State } from './types'\n\n/**\n * Find eligible port depending on current element,\n * which can be either a node or a property.\n *\n * The following conditions must be met:\n * - should currently be linking\n * - current element ID should be different from target\n * - should be from a source to a target or the other way\n * - element should have a defined type\n * - target element should contain source type in its\n *   accepts list\n *\n * @todo: prevent circular dependencies\n */\nexport const findLinkingPotentialPort = (\n    linking: State['linking'],\n    elements: State['elements'],\n    elementId: ElementId,\n    type: 'source' | 'target'\n) => {\n    if (\n        // no current linking\n        !linking.isLinking ||\n        // source & target are identical\n        elementId === linking.elementId ||\n        // both are sources or targets\n        linking.type === type ||\n        // no element type so we cannot define\n        // eligible elements\n        !linking.elementType\n    )\n        return\n\n    const currentElement = elements.find(element => element.id === linking.elementId)\n    const potentialElement = elements.find(element => element.id === elementId)\n    if (!currentElement || !potentialElement) return\n\n    const source = type === 'target' ? currentElement : potentialElement\n    const target = type === 'target' ? potentialElement : currentElement\n\n    const link = elements.find(\n        element =>\n            element.elementType === 'link' &&\n            element.sourceId === source.id &&\n            element.targetId === target.id\n    )\n    if (link) return\n\n    if (!('type' in source) || !('accepts' in target)) return\n    if (target.accepts.includes(source.type)) {\n        return elementId\n    }\n}\n","import { State, isNode, Element, ElementId, Node, isProperty } from './types'\nimport { useGraph, useStore } from './store'\n\nexport const updateNodePosition = (\n    elements: Element[],\n    nodeId: ElementId | null,\n    offset: [number, number]\n): Element[] => {\n    if (nodeId === null) {\n        return elements\n    }\n\n    const node: Node | undefined = elements.find(\n        element => isNode(element) && element.id === nodeId\n    ) as any\n    if (!node) {\n        return elements\n    }\n\n    return elements.map(element => {\n        if (\n            (isNode(element) && element.id === node.id) ||\n            (isProperty(element) && node.properties.includes(element.id))\n        ) {\n            return {\n                ...element,\n                x: element.x + offset[0],\n                y: element.y + offset[1],\n            }\n        }\n\n        return element\n    })\n}\n\nconst nodesSelector = (state: State) => state.elements.filter(isNode)\nexport const useNodes = () => useStore(nodesSelector)\n\nexport const useSelectedNodes = () => {\n    const state = useStore()\n    const { nodes } = useGraph()\n\n    if (state.selectedNodeIds.length === 0) {\n        return []\n    }\n\n    return nodes.filter(node => state.selectedNodeIds.includes(node.id))\n}\n","import { memo } from 'react'\nimport styled from 'styled-components'\nimport { transparentize } from 'polished'\nimport { Property } from '../store'\nimport { PortWidget } from './PortWidget'\n\nexport const PropertyWidget = memo(({ property }: { property: Property }) => {\n    return (\n        <PropertyContainer>\n            <PropertyName>{property.name}</PropertyName>\n            {property.accepts.length > 0 && (\n                <PortWidget\n                    type=\"target\"\n                    elementId={property.id}\n                    x={property.x}\n                    y={property.y + property.height / 2}\n                    category={property.category}\n                />\n            )}\n            {property.hasOutput && (\n                <PortWidget\n                    type=\"source\"\n                    elementId={property.id}\n                    x={property.x + property.width}\n                    y={property.y + property.height / 2}\n                    category={property.category}\n                />\n            )}\n        </PropertyContainer>\n    )\n})\n\nconst PropertyContainer = styled.div`\n    position: relative;\n    height: 20px;\n    user-select: none;\n    display: flex;\n    align-items: center;\n    padding: 0 12px;\n    background-color: ${props => transparentize(0.15, props.theme.colors.nodeBackground)};\n    color: ${props => props.theme.colors.text};\n    font-size: 11px;\n`\n\nconst PropertyName = styled.span`\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n","import { createElement, memo } from 'react'\nimport { ResolvedProperty } from '../store'\nimport registry from '../registry'\nimport { PropertyWidget } from './PropertyWidget'\n\nexport const PropertiesWidget = memo(({ properties }: { properties: ResolvedProperty[] }) => {\n    return (\n        <>\n            {properties.map(property => {\n                const propertyService = registry.getPropertyService(property.type)\n\n                if (!('widget' in propertyService)) {\n                    return <PropertyWidget key={property.name} property={property} />\n                }\n\n                // @ts-ignore\n                return createElement(propertyService.widget, { property })\n            })}\n        </>\n    )\n})\n","export * from './AnglePropertyService'\nexport * from './ArrayStringPropertyService'\nexport * from './ArrayXYPropertyService'\nexport * from './BlendModePropertyService'\nexport * from './ChoicesPropertyService'\nexport * from './CustomPropertyService'\nexport * from './MatrixPropertyService'\nexport * from './NumberPropertyService'\nexport * from './RefPropertyService'\nexport * from './TextPropertyService'\n","import { ChangeEvent } from 'react'\nimport { PropertyService } from '../../services_registry'\nimport { Input } from '../../components/ui'\n\nexport const anglePropertyType = 'property:angle'\nexport type AnglePropertyType = typeof anglePropertyType\n\nexport const AnglePropertyService: PropertyService<AnglePropertyType, number, any, number> = {\n    type: anglePropertyType,\n    create: spec => ({\n        ...spec,\n        data: spec.data !== undefined ? spec.data : 0,\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ({ property }) => {\n        const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            console.log(event.target.value)\n        }\n\n        return <Input type=\"number\" value={property.data} onChange={handleChange} />\n    },\n}\n","import { PropertyService } from '../../services_registry'\n\nconst blendModeChoices = [\n    { label: 'normal', value: 'normal' },\n    { label: 'multiply', value: 'multiply' },\n    { label: 'screen', value: 'screen' },\n    { label: 'overlay', value: 'overlay' },\n    { label: 'darken', value: 'darken' },\n    { label: 'lighten', value: 'lighten' },\n    { label: 'color-dodge', value: 'color-dodge' },\n    { label: 'color-burn', value: 'color-burn' },\n    { label: 'hard-light', value: 'hard-light' },\n    { label: 'soft-light', value: 'soft-light' },\n    { label: 'difference', value: 'difference' },\n    { label: 'exclusion', value: 'exclusion' },\n    { label: 'hue', value: 'hue' },\n    { label: 'saturation', value: 'saturation' },\n    { label: 'color', value: 'color' },\n    { label: 'luminosity', value: 'luminosity' },\n]\n\nexport const BlendModePropertyService: PropertyService<\n    'property:blend_mode',\n    string,\n    {},\n    string\n> = {\n    type: 'property:blend_mode',\n    create: spec => ({\n        ...spec,\n        data: 'normal',\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: () => <div>BlendModePropertyControl</div>,\n}\n","import { ChangeEvent } from 'react'\nimport { PropertyService } from '../../services_registry'\nimport { useStore, Property } from '../../store'\n\nexport type ChoicePropertyOptions = {\n    choices: {\n        label: string\n        value: string | number\n    }[]\n}\n\nexport const ChoicesPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:choices', string, ChoicePropertyOptions>\n}) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n        updateProperty(property.id, {\n            data: event.target.value,\n        })\n    }\n\n    return (\n        <select value={property.data} onChange={handleChange}>\n            {property.options.choices.map(choice => {\n                return (\n                    <option key={choice.value} value={choice.value}>\n                        {choice.label}\n                    </option>\n                )\n            })}\n        </select>\n    )\n}\n\nexport const ChoicesPropertyService: PropertyService<\n    'property:choices',\n    string,\n    ChoicePropertyOptions,\n    string\n> = {\n    type: 'property:choices',\n    create: spec => ({\n        ...spec,\n        data: '',\n        options: spec.options || {\n            choices: [],\n        },\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ChoicesPropertyControl,\n}\n","import { PropertyService } from '../../services_registry'\nimport { createElement } from 'react'\n\nexport type CustomPropertyOptions = {\n    renderer: any\n}\n\nexport const CustomPropertyService: PropertyService<\n    'property:custom',\n    undefined,\n    CustomPropertyOptions,\n    undefined\n> = {\n    type: 'property:custom',\n    create: spec => spec,\n    getValue: () => undefined,\n    serialize: () => undefined,\n    hydrate: property => property,\n    widget: ({ property }) => createElement(property.options.renderer, { property }),\n}\n","export * from './MatrixPropertyService'\nexport * from './types'\n","export * from './NumberPropertyService'\nexport * from './types'\n","export * from './nodes'\nexport * from './properties'\n","import { PropertyService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport const RefPropertyService: PropertyService<'property:ref', never, never, undefined> = {\n    type: 'property:ref',\n    create: spec => spec,\n    getValue: property => registry.resolvePropertyValue(property, undefined),\n    // refs are managed by links\n    serialize: () => undefined,\n    hydrate: property => property,\n}\n","import { ChangeEvent } from 'react'\nimport { PropertyService } from '../../services_registry'\nimport { Property, useStore } from '../../store'\nimport { Input } from '../../components/ui'\n\nconst TextPropertyControl = ({ property }: { property: Property<'property:text', string> }) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        updateProperty(property.id, {\n            data: event.target.value,\n        })\n    }\n\n    return <Input type=\"text\" value={property.data} onChange={handleChange} />\n}\n\nexport const TextPropertyService: PropertyService<'property:text', string, never, string> = {\n    type: 'property:text',\n    create: spec => ({\n        ...spec,\n        data: spec.data || '',\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: TextPropertyControl,\n}\n","import { AreaBump } from '@nivo/bump'\nimport { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport type AreaBumpNodeType = 'node:area_bump'\n\nexport interface AreaBumpNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: any\n    spacing: number\n    xPadding: number\n    colors?: any\n    blendMode?: string\n    borderColor?: any\n    axisTop?: any\n    axisBottom?: any\n}\n\nexport const AreaBumpNodeService: NodeService<AreaBumpNodeType, AreaBumpNodeData> = {\n    type: 'node:area_bump',\n    category: 'charts',\n    description: `An AreaBump chart from @nivo/bump package.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'data',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:series_xy'],\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'spacing',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'xPadding',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            name: 'blendMode',\n            type: 'property:blend_mode',\n            category: 'colors_theming',\n            accepts: ['node:blend_mode'],\n        },\n        {\n            name: 'borderColor',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: [],\n        },\n        {\n            name: 'axisTop',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisBottom',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n            spacing: data?.spacing ?? 3,\n            xPadding: data?.xPadding ?? 0.6,\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        return <AreaBump {...props} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport type AxisNodeType = 'node:axis'\n\nexport interface AxisNodeData {\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    legend?: string\n    legendOffset: number\n}\n\nexport const AxisNodeService: NodeService<AxisNodeType, AxisNodeData> = {\n    type: 'node:axis',\n    category: 'axis_grid',\n    description: `X or Y axis to be used in various chart types.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'tickSize',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'tickPadding',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'tickRotation',\n            type: 'property:angle',\n            category: 'dimensions',\n            accepts: ['property:angle'],\n            hasOutput: true,\n        },\n        {\n            name: 'legend',\n            type: 'property:text',\n            category: 'data',\n            accepts: ['property:text'],\n            hasOutput: true,\n        },\n        {\n            name: 'legendOffset',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            tickSize: data?.tickSize ?? 5,\n            tickPadding: data?.tickPadding ?? 5,\n            tickRotation: data?.tickRotation ?? 0,\n            legend: data?.legend,\n            legendOffset: data?.legendOffset ?? 0,\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport type BlendModeNodeType = 'node:blend_mode'\n\nexport interface BlendModeNodeData {\n    blendMode: string\n}\n\nexport const BlendModeNodeService: NodeService<BlendModeNodeType, BlendModeNodeData> = {\n    type: 'node:blend_mode',\n    category: 'colors_theming',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'blendMode',\n            type: 'property:blend_mode',\n            category: 'colors_theming',\n            accepts: ['property:blend_mode'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            blendMode: data?.blendMode ?? 'normal',\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties).blendMode\n    },\n}\n","import { ResolvedNode } from '../../store'\nimport { NodeService } from '../../services_registry'\nimport { PropertiesWidget } from '../../components/PropertiesWidget'\nimport registry from '../../registry'\n\nconst CanvasNodeWidget = ({ node }: { node: ResolvedNode }) => {\n    const props = registry.resolvePropertyValues(node.properties)\n\n    return (\n        <>\n            <PropertiesWidget properties={node.properties} />\n            <div\n                style={{\n                    width: props.width,\n                    height: props.height,\n                    backgroundColor: '#000000',\n                    overflow: 'hidden',\n                }}\n            >\n                {props.content}\n            </div>\n        </>\n    )\n}\n\nexport interface CanvasNodeData {\n    content?: any\n    width: number\n    height: number\n}\n\nexport const CanvasNodeService: NodeService<'node:canvas', CanvasNodeData> = {\n    type: 'node:canvas',\n    category: 'render',\n    description: `A canvas to render a React node.`,\n    hasOutput: false,\n    properties: [\n        {\n            name: 'content',\n            type: 'property:ref',\n            category: 'render',\n            accepts: ['node:area_bump', 'node:chord', 'node:line', 'node:scatterplot'],\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            content: undefined,\n            width: data?.width ?? 300,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: () => ({}),\n    widget: CanvasNodeWidget,\n}\n","import { Chord } from '@nivo/chord'\nimport { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface ChordNodeData {\n    matrix?: any\n    keys?: any\n    width: number\n    height: number\n    margin?: any\n    innerRadiusRatio: number\n    innerRadiusOffset: number\n    theme?: any\n    colors?: any\n}\n\nexport const ChordNodeService: NodeService<'node:chord', ChordNodeData> = {\n    type: 'node:chord',\n    category: 'charts',\n    description: `An Chord diagram from @nivo/chord package.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'matrix',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:matrix'],\n        },\n        {\n            name: 'keys',\n            type: 'property:array_string',\n            category: 'data',\n            accepts: ['property:array_string'],\n            hasOutput: true,\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'innerRadiusRatio',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n            options: {\n                controlType: 'range',\n                min: 0,\n                max: 1,\n                step: 0.01,\n            },\n        },\n        {\n            name: 'innerRadiusOffset',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n            options: {\n                controlType: 'range',\n                min: 0,\n                max: 1,\n                step: 0.01,\n            },\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            keys: data?.keys ?? [],\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n            innerRadiusRatio: data?.innerRadiusRatio ?? 0.9,\n            innerRadiusOffset: data?.innerRadiusOffset ?? 0,\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        // check if the chart can be rendered\n        if (!Array.isArray(props.matrix) || !Array.isArray(props.keys)) {\n            return <div />\n        }\n\n        return <Chord {...props} isInteractive={true} />\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nconst schemeChoices = [\n    { label: 'nivo', value: 'nivo' },\n    { label: 'Category 10', value: 'category10' },\n    { label: 'Accent', value: 'accent' },\n    { label: 'Dark 2', value: 'dark2' },\n    { label: 'Paired', value: 'paired' },\n    { label: 'Pastel 1', value: 'pastel1' },\n    { label: 'Pastel 2', value: 'pastel2' },\n    { label: 'Set 1', value: 'set1' },\n    { label: 'Set 2', value: 'set2' },\n    { label: 'Set 3', value: 'set3' },\n    { label: 'Brown - Blue Green', value: 'brown_blueGreen' },\n    { label: 'Purple Red - Green', value: 'purpleRed_green' },\n    { label: 'Pink - Yellow Green', value: 'pink_yellowGreen' },\n    { label: 'Purple - Orange', value: 'purple_orange' },\n    { label: 'Red - Blue', value: 'red_blue' },\n    { label: 'Red - Grey', value: 'red_grey' },\n    { label: 'Red - Yellow - Blue', value: 'red_yellow_blue' },\n    { label: 'Red - Yellow - Green', value: 'red_yellow_green' },\n    { label: 'Spectral', value: 'spectral' },\n]\n\nexport interface ColorSchemeNodeData {\n    scheme: string\n}\n\nexport const ColorSchemeNodeService: NodeService<'node:color_scheme', ColorSchemeNodeData> = {\n    type: 'node:color_scheme',\n    category: 'colors_theming',\n    description: `A predefined color scheme to be used with nivo charts.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'scheme',\n            type: 'property:choices',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n            options: {\n                choices: schemeChoices,\n            },\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            scheme: data?.scheme ?? 'nivo',\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n}\n","import { Line } from '@nivo/line'\nimport { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface LineNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: number\n    colors?: any\n    axisTop?: any\n    axisRight?: any\n    axisBottom?: any\n    axisLeft?: any\n}\n\nexport const LineNodeService: NodeService<'node:line', LineNodeData> = {\n    type: 'node:line',\n    category: 'charts',\n    description: `A Line chart from @nivo/line package.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'data',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:series_xy'],\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            name: 'axisTop',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisRight',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisBottom',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisLeft',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        return <Line {...props} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface MarginNodeData {\n    top: number\n    right: number\n    bottom: number\n    left: number\n}\n\nexport const MarginNodeService: NodeService<'node:margin', MarginNodeData> = {\n    type: 'node:margin',\n    category: 'dimensions',\n    description: `Top/right/bottom/left margins for charts.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:number',\n            category: 'dimensions',\n            name: 'top',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            category: 'dimensions',\n            name: 'right',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            category: 'dimensions',\n            name: 'bottom',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            category: 'dimensions',\n            name: 'left',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            top: data?.top ?? 0,\n            right: data?.right ?? 0,\n            bottom: data?.bottom ?? 0,\n            left: data?.left ?? 0,\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n}\n","import { NodeService } from '../../services_registry'\n\nexport const NivoThemeNodeService: NodeService<'node:nivo_theme', {}> = {\n    type: 'node:nivo_theme',\n    category: 'colors_theming',\n    description: `A theme object to be used with nivo charts.`,\n    hasOutput: true,\n    properties: [],\n    factory: () => ({}),\n    getValue: () => {\n        return {\n            fontFamily: `'IBM Plex Mono', monospace`,\n            fontSize: 11,\n            textColor: '#dddddd',\n            grid: {\n                line: {\n                    stroke: '#333333',\n                },\n            },\n            tooltip: {\n                container: {\n                    background: '#222222',\n                    color: 'inherit',\n                    fontSize: 'inherit',\n                    borderRadius: '2px',\n                    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.25)',\n                    padding: '5px 9px',\n                },\n            },\n        }\n    },\n}\n","import { ScatterPlot } from '@nivo/scatterplot'\nimport { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface ScatterPlotNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: any\n    colors?: any\n    borderColor?: any\n    axisTop?: any\n    axisRight?: any\n    axisBottom?: any\n    axisLeft?: any\n}\n\nexport const ScatterPlotNodeService: NodeService<'node:scatterplot', ScatterPlotNodeData> = {\n    type: 'node:scatterplot',\n    category: 'charts',\n    description: `A ScatterPlot chart from @nivo/scatterplot package.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'data',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:series_xy'],\n        },\n        {\n            type: 'property:number',\n            name: 'width',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            name: 'height',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            name: 'borderColor',\n            type: 'property:ref',\n            category: 'colors_theming',\n        },\n        {\n            name: 'axisTop',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisRight',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisBottom',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisLeft',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        return <ScatterPlot {...props} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nconst SeriesXYNodeWidget = () => {\n    return <div>Custom</div>\n}\n\nexport const SeriesXYNodeService: NodeService<'node:series_xy', any> = {\n    type: 'node:series_xy',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'serie_0',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:serie_xy'],\n        },\n        {\n            name: 'serie_1',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:serie_xy'],\n        },\n    ],\n    factory: () => {\n        return {}\n    },\n    //widget: SeriesXYNodeWidget,\n    getValue: node => {\n        return node.properties.map(property => {\n            const propertyService = registry.getPropertyService(property.type)\n\n            // @ts-ignore\n            return propertyService.getValue(property, registry)\n        })\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface SerieXYNodeData {\n    id: string\n    data: {\n        x: number\n        y: number\n    }[]\n}\n\nexport const SerieXYNodeService: NodeService<'node:serie_xy', SerieXYNodeData> = {\n    type: 'node:serie_xy',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'id',\n            type: 'property:text',\n            category: 'data',\n            accepts: ['property:text'],\n            hasOutput: true,\n        },\n        {\n            name: 'data',\n            type: 'property:array_xy',\n            category: 'data',\n            accepts: ['property:array_xy'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            id: data?.id ?? '',\n            data: data?.data ?? [],\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface MatrixNodeData {\n    data: number[][]\n}\n\nexport const MatrixNodeService: NodeService<'node:matrix', MatrixNodeData> = {\n    type: 'node:matrix',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'matrix',\n            type: 'property:matrix',\n            category: 'data',\n            accepts: ['property:matrix'],\n        },\n    ],\n    factory: data => {\n        return {\n            data: data?.data || [],\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties).matrix || []\n    },\n}\n","import { ChangeEvent, Fragment, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { FiPlus } from 'react-icons/fi'\nimport { FaTimes } from 'react-icons/fa'\nimport { Property, useStore } from '../../../store'\nimport { Input } from '../../../components/ui'\n\nexport const ArrayStringPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:array_string', string[]>\n}) => {\n    const { updateProperty } = useStore()\n\n    const setValue = useCallback(\n        (value: string[]) => {\n            updateProperty(property.id, { data: value })\n        },\n        [updateProperty, property.id]\n    )\n\n    const handleChange = (itemIndex: number, event: ChangeEvent<HTMLInputElement>) => {\n        setValue(\n            property.data.map((item, index) => {\n                if (index !== itemIndex) return item\n\n                return event.target.value\n            })\n        )\n    }\n\n    const handleAdd = () => {\n        setValue([...property.data, ''])\n    }\n\n    const handleRemove = (index: number) => {\n        setValue(property.data.filter((_, i) => i !== index))\n    }\n\n    return (\n        <>\n            <Grid>\n                {property.data.map((item, index) => {\n                    return (\n                        <Fragment key={index}>\n                            <span>[{index}]</span>\n                            <Input\n                                type=\"text\"\n                                value={item}\n                                onChange={event => handleChange(index, event)}\n                                size={4}\n                            />\n                            <RemoveButton\n                                onClick={() => {\n                                    handleRemove(index)\n                                }}\n                            >\n                                <FaTimes />\n                            </RemoveButton>\n                        </Fragment>\n                    )\n                })}\n                <AddItemButton onClick={handleAdd}>\n                    <FiPlus /> Add item\n                </AddItemButton>\n            </Grid>\n        </>\n    )\n}\n\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: 28px 1fr 20px;\n    grid-column-gap: 6px;\n    grid-row-gap: 6px;\n    margin-bottom: 9px;\n    align-items: center;\n    font-size: 12px;\n`\n\nconst RemoveButton = styled.span`\n    width: 20px;\n    height: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 12px;\n    border-radius: 2px;\n    cursor: pointer;\n    color: #777777;\n\n    &:hover {\n        background-color: #333333;\n        color: ${props => props.theme.colors.accentColor};\n    }\n`\n\nconst AddItemButton = styled.div`\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    grid-column-start: 2;\n\n    svg {\n        margin-right: 9px;\n    }\n`\n","import { PropertyService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { ArrayStringPropertyControl } from './ArrayStringPropertyControl'\n\nexport const ArrayStringPropertyService: PropertyService<\n    'property:array_string',\n    string[],\n    never,\n    string[]\n> = {\n    type: 'property:array_string',\n    create: spec => ({\n        ...spec,\n        data: spec.data || [],\n    }),\n    getValue: property => {\n        return registry.resolvePropertyValue(property, property.data)\n    },\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ArrayStringPropertyControl,\n}\n","import { ChangeEvent, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { FiPlus } from 'react-icons/fi'\nimport { Property, useStore } from '../../../store'\nimport { ArrayXYPropertyType } from './ArrayXYPropertyService'\n\nexport const ArrayXYPropertyControl = ({\n    property,\n}: {\n    property: Property<\n        ArrayXYPropertyType,\n        {\n            x: number\n            y: number\n        }[]\n    >\n}) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (\n        itemIndex: number,\n        key: 'x' | 'y',\n        event: ChangeEvent<HTMLInputElement>\n    ) => {\n        updateProperty(property.id, {\n            data: property.data.map((item, index) => {\n                if (index !== itemIndex) {\n                    return item\n                }\n\n                return {\n                    ...item,\n                    [key]: Number(event.target.value),\n                }\n            }),\n        })\n    }\n\n    const handleAdd = () => {\n        updateProperty(property.id, {\n            data: [\n                ...property.data,\n                {\n                    x: 0,\n                    y: 0,\n                },\n            ],\n        })\n    }\n\n    return (\n        <ControlContainer>\n            {property.data.map((item, index) => {\n                return (\n                    <Fragment key={index}>\n                        x:{' '}\n                        <input\n                            type=\"number\"\n                            value={item.x}\n                            onChange={event => handleChange(index, 'x', event)}\n                            size={4}\n                        />\n                        y:{' '}\n                        <input\n                            type=\"number\"\n                            value={item.y}\n                            onChange={event => handleChange(index, 'y', event)}\n                        />\n                    </Fragment>\n                )\n            })}\n            <ControlAddItemButton onClick={handleAdd}>\n                <FiPlus /> Add item\n            </ControlAddItemButton>\n        </ControlContainer>\n    )\n}\n\nconst ControlContainer = styled.div`\n    display: grid;\n    grid-template-columns: 20px auto 20px auto;\n    grid-row-gap: 6px;\n\n    input {\n        width: 52px;\n    }\n`\n\nconst ControlAddItemButton = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 5;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n\n    svg {\n        margin-right: 9px;\n    }\n`\n","import { PropertyService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { ArrayXYPropertyControl } from './ArrayXYPropertyControl'\n\nexport const arrayXYPropertyType = 'property:array_xy'\nexport type ArrayXYPropertyType = typeof arrayXYPropertyType\n\nexport const ArrayXYPropertyService: PropertyService<\n    ArrayXYPropertyType,\n    {\n        x: number\n        y: number\n    }[],\n    {},\n    {\n        x: number\n        y: number\n    }[]\n> = {\n    type: arrayXYPropertyType,\n    create: spec => ({\n        ...spec,\n        data: spec.data || [],\n    }),\n    getValue: property => {\n        return registry.resolvePropertyValue(property, property.data)\n    },\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ArrayXYPropertyControl,\n}\n","import { ChangeEvent, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { Property, useStore } from '../../../store'\nimport { Input } from '../../../components/ui'\n\nexport const MatrixPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:matrix', number[][]>\n}) => {\n    const { updateProperty } = useStore()\n\n    const value = property.data\n\n    let xSize = 0\n    let ySize = 0\n    if (value.length > 0) {\n        ySize = value.length\n        if (Array.isArray(value[0])) {\n            xSize = value[0].length\n        }\n    }\n\n    const setValue = (valueUpdate: number[][]) => {\n        updateProperty(property.id, {\n            value: valueUpdate,\n        })\n    }\n\n    const handleSizeChange = (newXSize: number, newYSize: number) => {\n        let newValue = value.slice(0, newYSize)\n        for (let newRowIndex = 0; newRowIndex < newYSize - ySize; newRowIndex++) {\n            newValue.push(Array.from({ length: newXSize }).fill(0) as number[])\n        }\n        newValue = newValue.map(row => {\n            const newRow = row.slice(0, newXSize)\n            for (let newColumnIndex = 0; newColumnIndex < newXSize - xSize; newColumnIndex++) {\n                newRow.push(0)\n            }\n\n            return newRow\n        })\n\n        setValue(newValue)\n    }\n\n    const handleValueChange = (\n        targetRowIndex: number,\n        targetColumnIndex: number,\n        event: ChangeEvent<HTMLInputElement>\n    ) => {\n        setValue(\n            value.map((row, rowIndex) => {\n                if (targetRowIndex !== rowIndex) {\n                    return row\n                }\n\n                return row.map((cell, columnIndex) => {\n                    if (targetColumnIndex !== columnIndex) {\n                        return cell\n                    }\n\n                    return Number(event.target.value)\n                })\n            })\n        )\n    }\n\n    return (\n        <>\n            <SizeContainer>\n                x size\n                <Input\n                    type=\"number\"\n                    value={xSize}\n                    onChange={event => handleSizeChange(Number(event.target.value), ySize)}\n                />\n                y size\n                <Input\n                    type=\"number\"\n                    value={ySize}\n                    onChange={event => handleSizeChange(xSize, Number(event.target.value))}\n                />\n            </SizeContainer>\n            <MatrixWrapper>\n                <MatrixContainer columns={xSize} rows={ySize}>\n                    {value.map((row, rowIndex) => {\n                        return (\n                            <Fragment key={rowIndex}>\n                                {row.map((cell, columnIndex) => (\n                                    <Input\n                                        key={columnIndex}\n                                        type=\"number\"\n                                        value={cell}\n                                        onChange={event =>\n                                            handleValueChange(rowIndex, columnIndex, event)\n                                        }\n                                    />\n                                ))}\n                            </Fragment>\n                        )\n                    })}\n                </MatrixContainer>\n            </MatrixWrapper>\n        </>\n    )\n}\n\nconst SizeContainer = styled.div`\n    display: grid;\n    grid-template-columns: minmax(0, 1fr) minmax(0, 2fr) minmax(0, 1fr) minmax(0, 2fr);\n    grid-column-gap: 9px;\n    align-items: center;\n    font-size: 12px;\n    white-space: nowrap;\n    margin-bottom: 9px;\n`\n\nconst MatrixWrapper = styled.div`\n    overflow-x: scroll;\n`\n\nconst MatrixContainer = styled.div<{\n    columns: number\n    rows: number\n}>`\n    display: grid;\n    grid-template-columns: repeat(${props => props.columns}, minmax(50px, 1fr));\n    grid-template-rows: repeat(${props => props.rows}, 1fr);\n    grid-column-gap: 4px;\n    grid-row-gap: 4px;\n`\n","import { PropertyService } from '../../../services_registry'\nimport { MatrixPropertyControl } from './MatrixPropertyControl'\n\nexport const MatrixPropertyService: PropertyService<\n    'property:matrix',\n    number[][],\n    never,\n    number[][]\n> = {\n    type: 'property:matrix',\n    create: spec => ({\n        ...spec,\n        data: spec.data || [],\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: MatrixPropertyControl,\n}\n","import { PropertyService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { NumberPropertyOptions } from './types'\nimport { NumberPropertyControl } from './NumberPropertyControl'\n\nexport const NumberPropertyService: PropertyService<\n    'property:number',\n    number,\n    NumberPropertyOptions,\n    number\n> = {\n    type: 'property:number',\n    create: ({ options: partialOptions = {}, ...spec }) => {\n        const options = {\n            controlType: partialOptions.controlType || 'number',\n            min: partialOptions.min !== undefined ? partialOptions.min : undefined,\n            max: partialOptions.max !== undefined ? partialOptions.max : undefined,\n            step: partialOptions.step || 1,\n        }\n\n        return {\n            ...spec,\n            options,\n        }\n    },\n    getValue: property => {\n        return registry.resolvePropertyValue(property, property.data)\n    },\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: NumberPropertyControl,\n}\n","import { ChangeEvent } from 'react'\nimport { Property, useStore } from '../../../store'\nimport { Input } from '../../../components/ui'\nimport { NumberPropertyOptions } from './types'\n\nexport const NumberPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:number', number, NumberPropertyOptions>\n}) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        updateProperty(property.id, {\n            data: Number(event.target.value),\n        })\n    }\n\n    if (property.options.controlType === 'number') {\n        return (\n            <Input\n                type=\"number\"\n                value={property.data}\n                onChange={handleChange}\n                min={property.options.min}\n                max={property.options.max}\n                step={property.options.step}\n            />\n        )\n    }\n\n    return (\n        <Input\n            type=\"range\"\n            value={property.data}\n            onChange={handleChange}\n            min={property.options.min}\n            max={property.options.max}\n            step={property.options.step}\n        />\n    )\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n    body {\n        margin: 0;\n        font-family: 'IBM Plex Mono', monospace;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        font-size: 14px;\n        color: ${props => props.theme.colors.text};\n    }\n    \n    code {\n        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n    }\n    \n    * {\n        box-sizing: border-box;\n    }\n    \n    .App {\n        position: fixed;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n`\n","import { DefaultTheme } from 'styled-components'\n\nexport const getCategoryColor = (category: string, theme: DefaultTheme) => {\n    if (category in theme.colors.categories) {\n        return theme.colors.categories[category as keyof DefaultTheme['colors']['categories']]\n    }\n\n    return theme.colors.accentColor\n}\n","import { darkTheme } from './darkTheme'\nimport { lightTheme } from './lightTheme'\n\nexport const themes = [\n    {\n        id: 'dark',\n        name: 'Dark theme',\n        theme: darkTheme,\n    },\n    {\n        id: 'light',\n        name: 'Light theme',\n        theme: lightTheme,\n    },\n]\n","import { DefaultTheme } from 'styled-components'\nimport { transparentize } from 'polished'\n\nexport const darkTheme: DefaultTheme = {\n    colors: {\n        background: '#292929',\n        mediumDepthBackground: '#111111',\n        topDepthBackground: '#000000',\n        nodeBackground: '#202020',\n        badgeBackground: '#333333',\n        inputBackground: '#333333',\n        inputText: '#eeeeee',\n        text: '#eeeeee',\n        textLight: '#aaaaaa',\n        accentColor: 'pink',\n        border: '#555555',\n        lightBorder: '#222222',\n        nodeBorder: '#111111',\n        success: '#65f7cf',\n        overlay: transparentize(0.2, '#333333'),\n        categories: {\n            axis_grid: '#837ec4',\n            charts: '#f19494',\n            colors_theming: '#e37e49',\n            data: '#759d61',\n            dimensions: '#608cb7',\n            render: '#d78080',\n        },\n    },\n}\n","import { DefaultTheme } from 'styled-components'\nimport { transparentize } from 'polished'\n\nexport const lightTheme: DefaultTheme = {\n    colors: {\n        background: '#ececec',\n        mediumDepthBackground: '#f5f3f3',\n        topDepthBackground: '#ffffff',\n        nodeBackground: '#f2f2f2',\n        badgeBackground: '#eeeeee',\n        inputBackground: '#eeeeee',\n        inputText: '#444444',\n        text: '#333333',\n        textLight: '#777777',\n        accentColor: '#1a8cc3',\n        border: '#dddddd',\n        lightBorder: '#eeeeee',\n        nodeBorder: '#cccccc',\n        success: '#0ab537',\n        overlay: transparentize(0.3, '#eeeeee'),\n        categories: {\n            axis_grid: '#60399b',\n            charts: '#006dcd',\n            colors_theming: '#d2702d',\n            data: '#3da914',\n            dimensions: '#288fa5',\n            render: '#c3931a',\n        },\n    },\n}\n","import { useMemo } from 'react'\nimport { useSettings } from '../store'\nimport { themes } from './themes'\n\nexport const useCurrentTheme = () => {\n    const { themeId } = useSettings()\n\n    return useMemo(() => {\n        const theme = themes.find(theme => theme.id === themeId)\n        if (!theme) {\n            throw new Error(`no theme found matching id: ${themeId}`)\n        }\n\n        return theme.theme\n    }, [themeId])\n}\n","import styled from 'styled-components'\nimport { useLinking } from '../store'\n\nexport const AppFooter = () => {\n    const linking = useLinking()\n\n    return (\n        <Container>\n            {linking.isLinking && (\n                <div>\n                    [{linking.type}]&nbsp;| type: {linking.elementType}&nbsp;|&nbsp;\n                    {linking.anchor[0]},{linking.anchor[1]} –&gt; {linking.position[0]},\n                    {linking.position[1]}&nbsp;| accepts: {linking.accepts.join(', ')}&nbsp;|\n                    potential ID: {linking.potentialId}\n                </div>\n            )}\n        </Container>\n    )\n}\n\nconst Container = styled.footer`\n    position: fixed;\n    display: flex;\n    align-items: center;\n    font-size: 12px;\n    left: 64px;\n    bottom: 0;\n    width: calc(100% - 364px);\n    height: 36px;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n`\n","import styled from 'styled-components'\n\nexport const AppHeader = () => {\n    return <Header>{/*<Title>nivo graph editor</Title>*/}</Header>\n}\n\nconst Header = styled.header`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 46px;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n    display: flex;\n    align-items: center;\n    padding-left: 64px;\n`\n\n/*\nconst Title = styled.h1`\n    margin: 0;\n    padding: 0;\n    font-size: 14px;\n    color: ${props => props.theme.colors.accentColor};\n    text-transform: uppercase;\n`\n*/\n","import styled from 'styled-components'\nimport { FaChevronRight, FaCheck } from 'react-icons/fa'\nimport { useStore } from '../store'\nimport { ReactNode } from 'react'\n\nconst ICON_SIZE = 24\nconst ICON_SPACING = 16\n\nexport const LinkingLayer = () => {\n    const { linking } = useStore()\n\n    if (!linking.isLinking) {\n        return null\n    }\n\n    let iconPosition: [number, number]\n    if (linking.type === 'source') {\n        iconPosition = [linking.position[0] + ICON_SPACING, linking.position[1] - ICON_SIZE / 2]\n    } else {\n        iconPosition = [\n            linking.position[0] - ICON_SIZE - ICON_SPACING,\n            linking.position[1] - ICON_SIZE / 2,\n        ]\n    }\n\n    let icon: ReactNode = <FaChevronRight />\n    if (linking.potentialId) {\n        icon = <FaCheck />\n    }\n\n    return (\n        <svg\n            style={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                pointerEvents: 'none',\n            }}\n        >\n            <Line\n                strokeLinecap=\"round\"\n                x1={linking.anchor[0]}\n                x2={linking.position[0]}\n                y1={linking.anchor[1]}\n                y2={linking.position[1]}\n            />\n            <Circle cx={linking.position[0]} cy={linking.position[1]} r={4} />\n            <foreignObject x={iconPosition[0]} y={iconPosition[1]} width={24} height={24}>\n                <Icon isValid={!!linking.potentialId}>{icon}</Icon>\n            </foreignObject>\n        </svg>\n    )\n}\n\nconst Line = styled.line`\n    stroke-width: 3px;\n    stroke: ${props => props.theme.colors.accentColor};\n`\n\nconst Circle = styled.circle`\n    fill: ${props => props.theme.colors.accentColor};\n`\n\nconst Icon = styled.div<{\n    isValid: boolean\n}>`\n    width: ${ICON_SIZE}px;\n    height: ${ICON_SIZE}px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n    color: ${props =>\n        props.isValid ? props.theme.colors.success : props.theme.colors.accentColor};\n    border: 2px solid\n        ${props => (props.isValid ? props.theme.colors.success : props.theme.colors.accentColor)};\n    border-radius: ${ICON_SIZE / 2}px;\n    font-size: 12px;\n`\n","import { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { line as d3Line, curveBasis } from 'd3-shape'\nimport { FaTimes } from 'react-icons/fa'\nimport { ResolvedLink, useStore } from '../store'\nimport { getCategoryColor } from '../theming'\nimport registry from '../registry'\n\nconst lineGenerator = d3Line().curve(curveBasis)\n\nconst UNLINK_BUTTON_SIZE = 18\n\nexport const LinkWidget = ({ link }: { link: ResolvedLink }) => {\n    const { source, target } = link\n\n    const sourceElementType = source.elementType\n\n    const sourceX = source.x\n    const sourceY = source.y\n    const sourceWidth = source.width\n    const sourceHeight = source.height\n\n    const targetX = target.x\n    const targetY = target.y\n    const targetHeight = target.height\n\n    const [path, center] = useMemo(() => {\n        if (\n            sourceX === undefined ||\n            sourceY === undefined ||\n            sourceWidth === undefined ||\n            sourceHeight === undefined ||\n            targetX === undefined ||\n            targetY === undefined ||\n            targetHeight === undefined\n        ) {\n            return [null, null]\n        }\n\n        const sourcePosition: [number, number] = [\n            sourceX + sourceWidth,\n            sourceY + (sourceElementType === 'property' ? sourceHeight / 2 : 12),\n        ]\n        const targetPosition: [number, number] = [targetX, targetY + targetHeight / 2]\n\n        const xDistance = targetPosition[0] - sourcePosition[0]\n        const yDistance = targetPosition[1] - sourcePosition[1]\n\n        const center: [number, number] = [\n            sourcePosition[0] + xDistance / 2,\n            sourcePosition[1] + yDistance / 2,\n        ]\n\n        const xOffset = Math.max(6, Math.min(42, Math.abs(xDistance) * 0.2))\n\n        const points: [number, number][] = [sourcePosition]\n        points.push([sourcePosition[0] + xOffset, sourcePosition[1]])\n        points.push(center)\n        points.push([targetPosition[0] - xOffset, targetPosition[1]])\n        points.push(targetPosition)\n\n        return [lineGenerator(points), center]\n    }, [\n        sourceElementType,\n        sourceX,\n        sourceY,\n        sourceWidth,\n        sourceHeight,\n        targetX,\n        targetY,\n        targetHeight,\n    ])\n\n    const [isHover, setIsHover] = useState(false)\n    const handleHover = useCallback(() => {\n        setIsHover(true)\n    }, [setIsHover])\n    const handleOut = useCallback(() => {\n        setIsHover(false)\n    }, [setIsHover])\n\n    const { unlink } = useStore()\n    const sourceId = source.id\n    const targetId = target.id\n    const handleUnlink = useCallback(() => {\n        unlink(sourceId, targetId)\n    }, [unlink, sourceId, targetId])\n\n    if (!path || !center) {\n        return null\n    }\n\n    let category: string = 'default'\n    if (source.elementType === 'property') {\n        if (source.category) {\n            category = source.category\n        }\n    } else if (source.elementType === 'node') {\n        const nodeService = registry.getNodeService(source.type)\n        if (nodeService) {\n            category = nodeService.category\n        }\n    }\n\n    return (\n        <>\n            <Path d={path} category={category} isHover={isHover} />\n            {!isHover && <Circle cx={center[0]} cy={center[1]} r={4} category={category} />}\n            <CapturePath d={path} onMouseEnter={handleHover} onMouseLeave={handleOut} />\n            {isHover && (\n                <foreignObject\n                    x={center[0] - UNLINK_BUTTON_SIZE / 2}\n                    y={center[1] - UNLINK_BUTTON_SIZE / 2}\n                    width={UNLINK_BUTTON_SIZE}\n                    height={UNLINK_BUTTON_SIZE}\n                >\n                    <UnlinkButton\n                        onMouseEnter={handleHover}\n                        onMouseLeave={handleOut}\n                        onClick={handleUnlink}\n                        category={category}\n                    >\n                        <FaTimes />\n                    </UnlinkButton>\n                </foreignObject>\n            )}\n        </>\n    )\n}\n\nconst CapturePath = styled.path`\n    pointer-events: all;\n    fill: none;\n    stroke: rgba(255, 255, 255, 0);\n    stroke-width: 8px;\n`\n\nconst Path = styled.path<{\n    category: string\n    isHover: boolean\n}>`\n    fill: none;\n    stroke: ${props => getCategoryColor(props.category, props.theme)};\n    stroke-width: ${props => (props.isHover ? 3 : 1)}px;\n`\n\nconst UnlinkButton = styled.div<{\n    category: string\n}>`\n    pointer-events: all;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${UNLINK_BUTTON_SIZE}px;\n    height: ${UNLINK_BUTTON_SIZE}px;\n    border-radius: ${UNLINK_BUTTON_SIZE / 2}px;\n    cursor: pointer;\n    background-color: ${props => props.theme.colors.background};\n    color: ${props => getCategoryColor(props.category, props.theme)};\n    border: 2px solid ${props => getCategoryColor(props.category, props.theme)};\n    font-size: 10px;\n`\n\nconst Circle = styled.circle<{\n    category: string\n}>`\n    fill: ${props => props.theme.colors.background};\n    stroke: ${props => getCategoryColor(props.category, props.theme)};\n    stroke-width: 2px;\n`\n","import { ResolvedLink } from '../store'\nimport { LinkWidget } from './LinkWidget'\n\nexport const LinksLayer = ({ links }: { links: ResolvedLink[] }) => {\n    return (\n        <svg\n            style={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                pointerEvents: 'none',\n            }}\n        >\n            {links.map(link => (\n                <LinkWidget key={link.id} link={link} />\n            ))}\n        </svg>\n    )\n}\n","import {\n    ChangeEvent,\n    KeyboardEvent as ReactKeyboardEvent,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    memo,\n} from 'react'\nimport styled from 'styled-components'\nimport { MdEdit } from 'react-icons/md'\nimport { ElementId, useUpdateNode } from '../../store'\nimport { useDocumentEventListener } from '../../utils/useDocumentEventListener'\n\nexport const NodeName = memo(({ id, name: currentName }: { id: ElementId; name: string }) => {\n    const [isEditing, setIsEditing] = useState(false)\n    const [name, setName] = useState(currentName)\n    const updateNode = useUpdateNode()\n    const inputRef = useRef<HTMLInputElement | null>(null)\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current?.focus()\n        }\n    }, [isEditing, inputRef])\n\n    useEffect(() => {\n        setName(currentName)\n        setIsEditing(false)\n    }, [currentName, setName, setIsEditing])\n\n    const handleChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            setName(event.target.value)\n        },\n        [setName]\n    )\n\n    const handleEnter = (event: ReactKeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            updateNode(id, { name })\n            setIsEditing(false)\n        }\n    }\n\n    const handleEscape = useCallback(\n        (event: KeyboardEvent) => {\n            if (event.key === 'Escape') {\n                setIsEditing(false)\n            }\n        },\n        [setIsEditing]\n    )\n    useDocumentEventListener('keydown', handleEscape)\n\n    return (\n        <Container\n            onClick={() => {\n                if (!isEditing) {\n                    setIsEditing(true)\n                }\n            }}\n        >\n            {!isEditing && (\n                <>\n                    <Name>{currentName}</Name>\n                    <Icon>\n                        <MdEdit />\n                    </Icon>\n                </>\n            )}\n            {isEditing && (\n                <Input\n                    ref={inputRef}\n                    onKeyPress={handleEnter}\n                    type=\"text\"\n                    value={name}\n                    onChange={handleChange}\n                />\n            )}\n        </Container>\n    )\n})\n\nconst Icon = styled.span`\n    margin-left: 12px;\n    width: 24px;\n    height: 24px;\n    border-radius: 3px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #333333;\n    color: #999999;\n    cursor: pointer;\n    flex-shrink: 0;\n`\n\nconst Input = styled.input`\n    width: calc(100% - 32px);\n    height: 32px;\n    border: none;\n    padding: 5px 9px;\n    border-radius: 2px;\n    font-weight: 800;\n    font-family: inherit;\n    background-color: #aaaaaa;\n    font-size: 14px;\n\n    &:focus {\n        outline: 0;\n    }\n`\n\nconst Name = styled.span`\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n\nconst Container = styled.div`\n    height: 32px;\n    padding: 0;\n    margin: 0 32px 9px 0;\n    font-size: 16px;\n    font-weight: 800;\n    display: flex;\n    align-items: center;\n`\n","import { useEffect } from 'react'\n\n/**\n * This hook can be used to attach event listener to the document,\n * it will take care of removing/updating the listener if it changes,\n * and will also remove the listener when the component it's attached\n * to is unmounted.\n */\nexport const useDocumentEventListener = <K extends keyof DocumentEventMap>(\n    eventType: K,\n    listener: (this: Document, event: DocumentEventMap[K]) => any\n) => {\n    useEffect(() => {\n        document.addEventListener(eventType, listener)\n\n        return () => {\n            document.removeEventListener(eventType, listener)\n        }\n    }, [listener])\n}\n","import styled from 'styled-components'\nimport { ReactNode } from 'react'\n\nexport const ConfirmButtons = ({\n    confirmLabel = 'yes',\n    onConfirm,\n    cancelLabel = 'no',\n    onCancel,\n}: {\n    confirmLabel?: ReactNode\n    onConfirm: () => void\n    cancelLabel?: ReactNode\n    onCancel: () => void\n}) => {\n    return (\n        <Container>\n            <Button onClick={onConfirm}>{confirmLabel}</Button>\n            <Button onClick={onCancel}>{cancelLabel}</Button>\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    padding: 16px;\n    display: flex;\n    justify-content: center;\n`\n\nconst Button = styled.span`\n    padding: 9px 12px;\n    background-color: #000000;\n    border-radius: 2px;\n    margin-left: 12px;\n    cursor: pointer;\n    width: 80px;\n    text-align: center;\n\n    &:first-child {\n        margin-left: 0;\n    }\n`\n","import { ReactNode, KeyboardEvent } from 'react'\nimport { createPortal } from 'react-dom'\nimport styled from 'styled-components'\n\nexport const Modal = ({\n    children,\n    maxWidth,\n    onCloseRequest,\n}: {\n    children: ReactNode\n    maxWidth?: number\n    onCloseRequest(): void\n}) => {\n    const handleKeydown = (event: KeyboardEvent) => {}\n\n    return createPortal(\n        <Container role=\"dialog\" aria-modal=\"true\" onKeyDown={handleKeydown}>\n            <Background onClick={onCloseRequest} />\n            <Content maxWidth={maxWidth}>{children}</Content>\n        </Container>,\n        document.body\n    )\n}\n\nconst Container = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: auto;\n    padding: 12px;\n`\n\nconst Background = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 1;\n    background-color: ${props => props.theme.colors.overlay};\n`\n\nconst Content = styled.div<{\n    maxWidth?: number\n}>`\n    position: relative;\n    z-index: 2;\n    width: 100%;\n    background: ${props => props.theme.colors.topDepthBackground};\n    backdrop-filter: none;\n    max-width: ${props => (props.maxWidth ? `${props.maxWidth}px` : 'none')};\n    max-height: 100%;\n    overflow-y: scroll;\n    box-shadow: 0 0 0 5px ${props => props.theme.colors.border};\n`\n\nexport const ModalTitle = styled.h2`\n    margin: 0;\n    padding: 9px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n\n    svg {\n        color: ${props => props.theme.colors.accentColor};\n        margin-right: 12px;\n    }\n`\n","import { memo, useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { FiTrash2 } from 'react-icons/fi'\nimport { ResolvedNode, useRemoveNode } from '../../store'\nimport { ConfirmButtons } from '../ui/ConfirmButtons'\nimport { Modal, ModalTitle } from '../Modal'\n\nexport const NodeControls = memo(({ node }: { node: ResolvedNode }) => {\n    const nodeId = node.id\n\n    const removeNode = useRemoveNode()\n\n    const [isRemoving, setIsRemoving] = useState(false)\n\n    const initRemoval = useCallback(() => {\n        setIsRemoving(true)\n    }, [setIsRemoving])\n\n    const cancelRemoval = useCallback(() => {\n        setIsRemoving(false)\n    }, [setIsRemoving])\n\n    const handleRemoveNode = useCallback(() => {\n        removeNode(nodeId)\n    }, [removeNode, nodeId])\n\n    return (\n        <Container>\n            <Control onClick={initRemoval}>\n                <FiTrash2 />\n            </Control>\n            {isRemoving && (\n                <Modal onCloseRequest={cancelRemoval} maxWidth={500}>\n                    <ModalTitle>\n                        <FiTrash2 /> Remove node: {node.name}?\n                    </ModalTitle>\n                    <ConfirmButtons onConfirm={handleRemoveNode} onCancel={cancelRemoval} />\n                </Modal>\n            )}\n        </Container>\n    )\n})\n\nconst Container = styled.div`\n    height: 33px;\n    width: 100%;\n    display: flex;\n    justify-content: flex-end;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n`\n\nconst Control = styled.span`\n    width: 33px;\n    height: 32px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    border-left: 1px solid ${props => props.theme.colors.lightBorder};\n    font-size: 16px;\n\n    &:hover {\n        background-color: #222222;\n    }\n`\n","import { createElement, useCallback, memo } from 'react'\nimport styled from 'styled-components'\nimport { FaTimes } from 'react-icons/fa'\nimport { ElementId, ResolvedProperty, useSetSelectedNodeIds, useUnlink } from '../../store'\nimport registry from '../../registry'\n\nconst Relation = memo(\n    ({\n        ownId,\n        elementId,\n        nodeId,\n        name,\n        parentName,\n    }: {\n        ownId: ElementId\n        elementId: ElementId\n        nodeId: ElementId\n        name: string\n        parentName?: string\n    }) => {\n        const setSelectedNodeIds = useSetSelectedNodeIds()\n        const unlink = useUnlink()\n\n        const goToRelation = useCallback(() => {\n            setSelectedNodeIds([nodeId])\n        }, [setSelectedNodeIds, nodeId])\n\n        const handleUnlink = useCallback(() => {\n            unlink(elementId, ownId)\n        }, [unlink, ownId, elementId])\n\n        return (\n            <RelationContainer>\n                <RelationName onClick={goToRelation}>\n                    {parentName && <span>{parentName}.</span>}\n                    {name}\n                </RelationName>\n                <UnlinkIcon onClick={handleUnlink}>\n                    <FaTimes />\n                </UnlinkIcon>\n            </RelationContainer>\n        )\n    }\n)\n\nexport const PropertyItem = memo(({ property }: { property: ResolvedProperty }) => {\n    const propertyService = registry.getPropertyService(property.type)\n\n    const hasInput = property.input !== undefined\n\n    return (\n        <Container>\n            <PropertyHeader>\n                <PropertyName>{property.name}</PropertyName>\n                {hasInput && (\n                    <Relation\n                        ownId={property.id}\n                        elementId={property.input!.id}\n                        nodeId={\n                            property.input!.elementType === 'node'\n                                ? property.input!.id\n                                : (property.input! as any).node.id\n                        }\n                        name={property.input!.name}\n                        parentName={\n                            property.input!.elementType === 'property'\n                                ? (property.input! as any).node.name\n                                : undefined\n                        }\n                    />\n                )}\n            </PropertyHeader>\n            {!hasInput && 'control' in propertyService && propertyService.control !== undefined && (\n                <ControlContainer>\n                    {/* @ts-ignore */}\n                    {createElement(propertyService.control, { property })}\n                </ControlContainer>\n            )}\n        </Container>\n    )\n})\n\nconst Container = styled.div`\n    padding: 9px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.lightBorder};\n\n    &:last-child {\n        border-bottom: none;\n    }\n`\n\nconst PropertyHeader = styled.div`\n    display: grid;\n    grid-template-columns: 40% 60%;\n    align-items: center;\n`\n\nconst PropertyName = styled.h4`\n    margin: 0;\n    padding: 0;\n`\n\nconst RelationContainer = styled.div`\n    display: flex;\n    align-items: center;\n    height: 24px;\n    border-radius: 2px;\n    color: ${props => props.theme.colors.accentColor};\n`\n\nconst RelationName = styled.span`\n    padding: 0 6px;\n    height: 100%;\n    flex-grow: 1;\n    line-height: 24px;\n    cursor: pointer;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    background-color: ${props => props.theme.colors.badgeBackground};\n    font-weight: 600;\n    font-size: 11px;\n\n    &:hover {\n        background-color: #444444;\n    }\n`\n\nconst UnlinkIcon = styled.span`\n    width: 24px;\n    height: 24px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-shrink: 0;\n    background-color: #444444;\n    border-radius: 0 2px 2px 0;\n    font-size: 10px;\n    cursor: pointer;\n\n    &:hover {\n        background-color: #555555;\n    }\n`\n\nconst ControlContainer = styled.div`\n    margin-top: 6px;\n`\n","import { memo, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { MdClose } from 'react-icons/md'\nimport registry from '../../registry'\nimport { ResolvedNode, useSetSelectedNodeIds } from '../../store'\nimport { NodeName } from './NodeName'\nimport { NodeControls } from './NodeControls'\nimport { PropertyItem } from './PropertyItem'\n\nexport const NodeInfoPanel = memo(({ node }: { node: ResolvedNode }) => {\n    const nodeService = registry.getNodeService(node.type)\n    const setSelectedNodeIds = useSetSelectedNodeIds()\n    // @ts-ignore\n    const value: any = nodeService.getValue(node, registry)\n\n    const handleClose = useCallback(() => {\n        setSelectedNodeIds([])\n    }, [setSelectedNodeIds])\n\n    return (\n        <div>\n            <Header>\n                <NodeName id={node.id} name={node.name} />\n                <Id>{node.type}</Id>\n                <Close onClick={handleClose}>\n                    <MdClose />\n                </Close>\n            </Header>\n            <NodeControls node={node} />\n            <Properties>\n                {node.properties.map(property => (\n                    <PropertyItem key={property.id} property={property} />\n                ))}\n            </Properties>\n            {value !== undefined && (\n                <>\n                    <NodeValueTitle>Node value</NodeValueTitle>\n                    {!value.$$typeof && <NodeValue>{JSON.stringify(value, null, '  ')}</NodeValue>}\n                    {value.$$typeof && (\n                        <NodeValue>{JSON.stringify(value.props, null, '  ')}</NodeValue>\n                    )}\n                </>\n            )}\n        </div>\n    )\n})\n\nconst Header = styled.header`\n    padding: 9px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n    position: relative;\n`\n\nconst Id = styled.div`\n    font-size: 12px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n\nconst Close = styled.span`\n    position: absolute;\n    width: 32px;\n    height: 32px;\n    top: 9px;\n    right: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    font-size: 18px;\n    color: #999999;\n\n    &:hover {\n        color: #eeeeee;\n    }\n`\n\nconst Properties = styled.div``\n\nconst NodeValueTitle = styled.h4`\n    border-top: 1px solid ${props => props.theme.colors.border};\n    padding: 6px 12px;\n    margin: 0;\n`\n\nconst NodeValue = styled.pre`\n    padding: 12px;\n    font-size: 12px;\n    margin: 0;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n`\n","import { createElement, useCallback, MouseEvent, memo } from 'react'\nimport styled from 'styled-components'\nimport { transparentize } from 'polished'\nimport { ResolvedNode, useStore } from '../store'\nimport registry, { NodeType } from '../registry'\nimport { PropertiesWidget } from './PropertiesWidget'\nimport { PortWidget } from './PortWidget'\nimport { getCategoryColor } from '../theming'\n\nexport const NodeWidget = memo(({ node }: { node: ResolvedNode }) => {\n    const nodeService = registry.getNodeService(node.type)\n    const hasCustomWidget = 'widget' in nodeService\n    const { setSelectedNodeIds, startDrag } = useStore()\n\n    const handleStartDrag = useCallback(\n        (event: MouseEvent) => {\n            setSelectedNodeIds([node.id])\n            startDrag(node.id, [event.clientX, event.clientY])\n        },\n        [setSelectedNodeIds, node.id, startDrag]\n    )\n\n    return (\n        <NodeContainer\n            onMouseDown={handleStartDrag}\n            category={nodeService.category}\n            isSelected={node.isSelected}\n            style={{\n                transform: `translate(${node.x}px,${node.y}px)`,\n                width: node.width,\n            }}\n        >\n            <NodeHeader>\n                <NodeName>{node.name}</NodeName>\n                {nodeService.hasOutput && (\n                    <PortWidget\n                        type=\"source\"\n                        elementId={node.id}\n                        x={node.x + node.width}\n                        y={node.y + 12}\n                        category={nodeService.category}\n                    />\n                )}\n            </NodeHeader>\n            {!hasCustomWidget && <PropertiesWidget properties={node.properties} />}\n            {/* @ts-ignore */}\n            {hasCustomWidget && createElement(nodeService.widget!, { node, registry })}\n        </NodeContainer>\n    )\n})\n\nconst NodeContainer = styled.div<{\n    category: string\n    isSelected: boolean\n}>`\n    pointer-events: all;\n    user-select: none;\n    background-color: transparent;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n    position: absolute;\n    box-shadow: ${props =>\n        props.isSelected\n            ? `0 0 0 2px ${getCategoryColor(props.category, props.theme)}`\n            : `0 0 0 1px ${props.theme.colors.nodeBorder}`};\n    cursor: move;\n    font-size: 12px;\n\n    &:hover {\n        box-shadow: ${props =>\n            props.isSelected\n                ? `0 0 0 2px ${getCategoryColor(props.category, props.theme)}`\n                : `0 0 0 1px ${getCategoryColor(props.category, props.theme)}`};\n    }\n`\n\nconst NodeHeader = styled.header`\n    position: relative;\n    background-color: ${props => transparentize(0.15, props.theme.colors.topDepthBackground)};\n    width: 100%;\n    height: 24px;\n    padding: 0 12px 0 9px;\n`\n\nconst NodeName = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    font-weight: 600;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n","import styled from 'styled-components'\nimport { ResolvedNode } from '../store'\nimport { NodeWidget } from './NodeWidget'\n\nexport const NodesLayer = ({ nodes }: { nodes: ResolvedNode[] }) => {\n    return (\n        <Layer>\n            {nodes.map(node => (\n                <NodeWidget key={node.id} node={node} />\n            ))}\n        </Layer>\n    )\n}\n\nconst Layer = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n`\n","import { PropsWithChildren } from 'react'\nimport styled from 'styled-components'\n\nconst Button = styled.div`\n    width: 64px;\n    height: 64px;\n    cursor: pointer;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n    color: #777777;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 22px;\n\n    &:hover {\n        background-color: #222222;\n        color: #eeeeee;\n    }\n`\n\nexport const SidebarButton = ({\n    children,\n    onClick,\n}: PropsWithChildren<{\n    onClick: () => void\n}>) => {\n    return <Button onClick={onClick}>{children}</Button>\n}\n","import { useMemo } from 'react'\nimport styled from 'styled-components'\nimport registry from '../registry'\nimport { useCreateNode } from '../store'\nimport { NodeService } from '../services_registry'\nimport { getCategoryColor } from '../theming'\n\nconst NodeType = ({ type, onCreate }: { type: NodeService; onCreate: () => void }) => {\n    const createNode = useCreateNode()\n\n    return (\n        <NodeTypeItem\n            onClick={() => {\n                createNode(type.type)\n                onCreate()\n            }}\n        >\n            <NodeTypeTitle category={type.category}>{type.type}</NodeTypeTitle>\n            {type.description && <NodeTypeDescription>{type.description}</NodeTypeDescription>}\n        </NodeTypeItem>\n    )\n}\n\nconst Category = ({\n    category,\n    onCreate,\n}: {\n    category: {\n        category: string\n        types: NodeService[]\n    }\n    onCreate: () => void\n}) => {\n    return (\n        <div>\n            <CategoryTitle category={category.category}>{category.category}</CategoryTitle>\n            {category.types.map(type => (\n                <NodeType key={type.type} type={type} onCreate={onCreate} />\n            ))}\n        </div>\n    )\n}\n\nexport const NodeSelector = ({ onCreate }: { onCreate: () => void }) => {\n    const categories = useMemo(() => registry.getNodeServiceCategories(), [])\n\n    return (\n        <Container>\n            {categories.map(category => (\n                // @ts-ignore\n                <Category key={category.category} category={category} onCreate={onCreate} />\n            ))}\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    max-height: 600px;\n    overflow-y: auto;\n`\n\nconst CategoryTitle = styled.h3<{\n    category: string\n}>`\n    padding: 9px 12px;\n    margin: 0;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n    font-size: 16px;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n`\n\nconst NodeTypeItem = styled.div`\n    padding: 12px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.lightBorder};\n    font-size: 14px;\n    cursor: pointer;\n\n    &:last-child {\n        border-bottom: none;\n    }\n\n    &:hover {\n        background-color: ${props => props.theme.colors.mediumDepthBackground};\n    }\n`\n\nconst NodeTypeTitle = styled.h4<{\n    category: string\n}>`\n    margin: 0;\n    padding: 0;\n    font-size: 14px;\n    font-weight: 600;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n`\n\nconst NodeTypeDescription = styled.div`\n    font-weight: 400;\n    font-size: 12px;\n    margin-top: 6px;\n    color: ${props => props.theme.colors.textLight};\n`\n","import { useState, memo, useCallback } from 'react'\nimport { MdLibraryAdd } from 'react-icons/md'\nimport { Modal, ModalTitle } from './Modal'\nimport { SidebarButton } from './SidebarButton'\nimport { NodeSelector } from './NodeSelector'\n\nexport const AddNodeButton = memo(() => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    const handleOpen = useCallback(() => {\n        setIsOpen(true)\n    }, [setIsOpen])\n\n    const handleClose = useCallback(() => {\n        setIsOpen(false)\n    }, [setIsOpen])\n\n    return (\n        <>\n            <SidebarButton onClick={handleOpen}>\n                <MdLibraryAdd />\n            </SidebarButton>\n            {isOpen && (\n                <Modal onCloseRequest={handleClose} maxWidth={600}>\n                    <ModalTitle>\n                        <MdLibraryAdd /> Add new node\n                    </ModalTitle>\n                    <NodeSelector onCreate={handleClose} />\n                </Modal>\n            )}\n        </>\n    )\n})\n","import { useCallback, useState, memo } from 'react'\nimport { MdNoteAdd } from 'react-icons/md'\nimport { useLoadGraph } from '../store'\nimport { ConfirmButtons } from './ui/ConfirmButtons'\nimport { Modal, ModalTitle } from './Modal'\nimport { SidebarButton } from './SidebarButton'\n\nexport const NewGraph = memo(() => {\n    const [isOpen, setIsOpen] = useState(false)\n    const loadGraph = useLoadGraph()\n\n    const handleNewGraph = useCallback(() => {\n        loadGraph({ nodes: [], links: [] })\n        setIsOpen(false)\n    }, [loadGraph, setIsOpen])\n\n    return (\n        <>\n            <SidebarButton\n                onClick={() => {\n                    setIsOpen(true)\n                }}\n            >\n                <MdNoteAdd />\n            </SidebarButton>\n            {isOpen && (\n                <Modal\n                    onCloseRequest={() => {\n                        setIsOpen(false)\n                    }}\n                    maxWidth={300}\n                >\n                    <ModalTitle>\n                        <MdNoteAdd /> Create new graph?\n                    </ModalTitle>\n                    <ConfirmButtons\n                        onConfirm={handleNewGraph}\n                        onCancel={() => {\n                            setIsOpen(false)\n                        }}\n                    />\n                </Modal>\n            )}\n        </>\n    )\n})\n","import { fileOpen, fileSave } from 'browser-nativefs'\nimport { ResolvedLink, ResolvedNode, serializeElements } from './store'\n\nexport const saveAsJSON = async (nodes: ResolvedNode[], links: ResolvedLink[]) => {\n    const serialized = serializeElements(nodes, links)\n    const stringified = JSON.stringify(\n        {\n            type: 'nivo-graph',\n            version: 'beta',\n            ...serialized,\n        },\n        null,\n        2\n    )\n\n    const blob = new Blob([stringified], {\n        type: 'application/json',\n    })\n\n    const fileHandle = await fileSave(\n        blob,\n        {\n            fileName: 'graph',\n            description: 'Nivo graph',\n            extensions: ['.json'],\n        },\n        null //appState.fileHandle\n    )\n\n    return { fileHandle }\n}\n\nexport const parseFileContent = async (blob: Blob | File) => {\n    let content: string\n    if ('text' in Blob) {\n        content = await blob.text()\n    } else {\n        content = await new Promise(resolve => {\n            const reader = new FileReader()\n            reader.readAsText(blob, 'utf8')\n            reader.onloadend = () => {\n                if (reader.readyState === FileReader.DONE) {\n                    resolve(reader.result as string)\n                }\n            }\n        })\n    }\n\n    return JSON.parse(content)\n}\n\nexport const loadFromJSON = async () => {\n    const blob = await fileOpen({\n        description: 'Nivo graph files',\n        extensions: ['.json', '.nivo'],\n        mimeTypes: ['application/json'],\n    })\n\n    const content = await parseFileContent(blob)\n    if (content.type !== 'nivo-graph') {\n        throw new Error('graph file is invalid')\n    }\n\n    return content\n}\n","import { MdSave } from 'react-icons/md'\nimport { ResolvedLink, ResolvedNode } from '../store'\nimport { saveAsJSON } from '../fs'\nimport { SidebarButton } from './SidebarButton'\n\ninterface SaveProps {\n    nodes: ResolvedNode[]\n    links: ResolvedLink[]\n}\n\nexport const SaveGraph = ({ nodes, links }: SaveProps) => {\n    const handleSave = () => {\n        saveAsJSON(nodes, links)\n    }\n\n    return (\n        <SidebarButton onClick={handleSave}>\n            <MdSave />\n        </SidebarButton>\n    )\n}\n","import { MdFolderOpen } from 'react-icons/md'\nimport { loadFromJSON } from '../fs'\nimport { useStore } from '../store'\nimport { SidebarButton } from './SidebarButton'\nimport { useCallback } from 'react'\n\nexport const OpenGraph = () => {\n    const { loadGraph } = useStore()\n\n    const handleOpen = useCallback(() => {\n        loadFromJSON().then(graph => {\n            loadGraph(graph)\n        })\n    }, [loadGraph])\n\n    return (\n        <SidebarButton onClick={handleOpen}>\n            <MdFolderOpen />\n        </SidebarButton>\n    )\n}\n","import { useState } from 'react'\nimport styled from 'styled-components'\nimport { MdSettings } from 'react-icons/md'\nimport { themes } from '../theming'\nimport { SidebarButton } from './SidebarButton'\nimport { Modal, ModalTitle } from './Modal'\nimport { useStore } from '../store'\n\nexport const Settings = () => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    const { settings, setSettings } = useStore()\n\n    return (\n        <>\n            <SidebarButton\n                onClick={() => {\n                    setIsOpen(true)\n                }}\n            >\n                <MdSettings />\n            </SidebarButton>\n            {isOpen && (\n                <Modal\n                    onCloseRequest={() => {\n                        setIsOpen(false)\n                    }}\n                    maxWidth={500}\n                >\n                    <ModalTitle>\n                        <MdSettings /> Settings\n                    </ModalTitle>\n                    <Container>\n                        <span>Theme</span>\n                        <select\n                            value={settings.themeId}\n                            onChange={event => {\n                                setSettings({\n                                    themeId: event.target.value,\n                                })\n                            }}\n                        >\n                            {themes.map(theme => {\n                                return (\n                                    <option key={theme.id} value={theme.id}>\n                                        {theme.name}\n                                    </option>\n                                )\n                            })}\n                        </select>\n                    </Container>\n                </Modal>\n            )}\n        </>\n    )\n}\n\nconst Container = styled.div`\n    padding: 12px;\n    display: grid;\n    grid-template-columns: 90px 1fr;\n`\n","import styled from 'styled-components'\nimport { ResolvedLink, ResolvedNode } from '../store'\nimport { AddNodeButton } from './AddNodeButton'\nimport { NewGraph } from './NewGraph'\nimport { SaveGraph } from './SaveGraph'\nimport { OpenGraph } from './OpenGraph'\nimport { Settings } from './Settings'\n\nexport const Sidebar = ({ nodes, links }: { nodes: ResolvedNode[]; links: ResolvedLink[] }) => {\n    return (\n        <Container>\n            <AddNodeButton />\n            <SaveGraph nodes={nodes} links={links} />\n            <OpenGraph />\n            <NewGraph />\n            <Settings />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    position: fixed;\n    top: 46px;\n    left: 0;\n    width: 64px;\n    height: 100%;\n    background: ${props => props.theme.colors.topDepthBackground};\n`\n","import chordExample from './chord.json'\nimport seriesExample from './series.json'\n\nexport const examples = [\n    {\n        name: 'Chord diagram',\n        data: chordExample,\n    },\n    {\n        name: 'XY series charts',\n        data: seriesExample,\n    },\n]\n","import styled from 'styled-components'\nimport { FaExternalLinkAlt } from 'react-icons/fa'\nimport { examples } from '../examples'\nimport { useStore } from '../store'\nimport { useCallback } from 'react'\n\nconst ExampleItem = ({\n    example,\n    onLoad,\n}: {\n    example: {\n        name: string\n        data: any\n    }\n    onLoad: () => void\n}) => {\n    const { loadGraph } = useStore()\n\n    const handleLoad = useCallback(() => {\n        loadGraph(example.data)\n        onLoad()\n    }, [loadGraph, example.data, onLoad])\n\n    return (\n        <ExampleItemContainer onClick={handleLoad}>\n            {example.name}\n            <FaExternalLinkAlt />\n        </ExampleItemContainer>\n    )\n}\n\nconst ExampleItemContainer = styled.div`\n    display: flex;\n    padding: 6px 9px 6px 12px;\n    align-items: center;\n    background-color: #000000;\n    border-radius: 2px;\n    color: ${props => props.theme.colors.accentColor};\n    cursor: pointer;\n    margin: 0 12px 9px 0;\n\n    svg {\n        margin-left: 12px;\n    }\n\n    &:hover {\n        box-shadow: 0 0 0 2px pink;\n    }\n`\n\nexport const ExampleLoader = ({ onLoad }: { onLoad: () => void }) => {\n    return (\n        <Container>\n            {examples.map(example => (\n                <ExampleItem key={example.name} example={example} onLoad={onLoad} />\n            ))}\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    margin: 12px 0 3px;\n`\n","import { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, ModalTitle } from './Modal'\nimport { ExampleLoader } from './ExampleLoader'\n\nexport const Welcome = () => {\n    const [isOpen, setIsOpen] = useState(true)\n\n    const handleClose = useCallback(() => {\n        setIsOpen(false)\n    }, [setIsOpen])\n\n    return (\n        <>\n            {isOpen && (\n                <Modal onCloseRequest={handleClose} maxWidth={500}>\n                    <ModalTitle>Welcome</ModalTitle>\n                    <Message>\n                        <p>\n                            Welcome to the new nivo graph editor! This application is currently an\n                            early prototype, so things might (and will) break ¯\\_(ツ)_/¯, sorry for\n                            that.\n                        </p>\n                        <p>\n                            The motivation behind this project is to provide a way to visually\n                            create charts, without code, allowing people without too much technical\n                            background to easily use nivo charts.\n                        </p>\n                        <p>In order to get started, you can have a look at one of the example:</p>\n                        <ExampleLoader onLoad={handleClose} />\n                        <p>Otherwise, you can just start form scratch and craft your own chart.</p>\n                        <div\n                            style={{\n                                display: 'flex',\n                                justifyContent: 'center',\n                                margin: '12px 0',\n                            }}\n                        >\n                            <span\n                                onClick={handleClose}\n                                style={{\n                                    padding: '9px 12px',\n                                    backgroundColor: '#000',\n                                    borderRadius: '2px',\n                                    cursor: 'pointer',\n                                }}\n                            >\n                                Start from scratch\n                            </span>\n                        </div>\n                        <p>\n                            We hope you'll enjoy using this tool as much as we enjoy building it!\n                            &lt;3\n                        </p>\n                    </Message>\n                </Modal>\n            )}\n        </>\n    )\n}\n\nconst Message = styled.div`\n    padding: 12px 12px 0;\n    font-size: 12px;\n\n    p {\n        margin: 0 0 12px;\n    }\n`\n","import { MouseEvent, useCallback } from 'react'\nimport styled, { ThemeProvider } from 'styled-components'\nimport { useStore, useSelectedNodes, useGraph } from './store'\nimport { useCurrentTheme, GlobalStyle } from './theming'\nimport {\n    AppHeader,\n    AppFooter,\n    NodesLayer,\n    LinkingLayer,\n    LinksLayer,\n    NodeInfoPanel,\n    Sidebar,\n    Welcome,\n} from './components'\n\nexport const App = () => {\n    const store = useStore()\n    const theme = useCurrentTheme()\n    const { nodes, links } = useGraph()\n    const selectedNodes = useSelectedNodes()\n\n    const { dragging, updateDrag, stopDrag, linking, updateLinking, stopLinking } = store\n    const handleMouseMove = useCallback(\n        (event: MouseEvent) => {\n            if (dragging.isDragging) {\n                updateDrag([event.clientX, event.clientY])\n            }\n            if (linking.isLinking) {\n                updateLinking([event.clientX, event.clientY])\n            }\n        },\n        [dragging.isDragging, updateDrag, linking.isLinking, updateLinking]\n    )\n    const handleMouseOut = useCallback(\n        (event: MouseEvent) => {\n            if (dragging.isDragging) {\n                stopDrag()\n            }\n            if (linking.isLinking) {\n                stopLinking()\n            }\n        },\n        [dragging.isDragging, stopDrag, linking.isLinking, stopLinking]\n    )\n\n    return (\n        <ThemeProvider theme={theme}>\n            <GlobalStyle />\n            <AppHeader />\n            <Sidebar nodes={nodes} links={links} />\n            <Canvas\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseOut}\n                onMouseLeave={handleMouseOut}\n            >\n                <LinksLayer links={links} />\n                <NodesLayer nodes={nodes} />\n                <LinkingLayer />\n            </Canvas>\n            <InfoPanel>\n                {selectedNodes.length === 1 && <NodeInfoPanel node={selectedNodes[0]} />}\n            </InfoPanel>\n            <AppFooter />\n            <Welcome />\n        </ThemeProvider>\n    )\n}\n\nconst Canvas = styled.div`\n    position: fixed;\n    top: 46px;\n    bottom: 52px;\n    left: 64px;\n    width: calc(100% - 364px);\n    height: calc(100% - 82px);\n    background: ${props => props.theme.colors.background};\n    overflow: hidden;\n`\n\nconst InfoPanel = styled.div`\n    position: fixed;\n    top: 46px;\n    right: 0;\n    width: 300px;\n    height: 100%;\n    background: ${props => props.theme.colors.topDepthBackground};\n    overflow-y: auto;\n`\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import styled from 'styled-components'\n\nexport const Input = styled.input`\n    border: none;\n    padding: 3px 6px;\n    border-radius: 2px;\n    font-family: inherit;\n    background-color: ${props => props.theme.colors.inputBackground};\n    color: ${props => props.theme.colors.inputText};\n    font-size: 12px;\n    cursor: pointer;\n\n    &:focus {\n        outline: 0;\n        background-color: #bbbbbb;\n        color: #000000;\n        cursor: auto;\n    }\n`\n"],"sourceRoot":""}