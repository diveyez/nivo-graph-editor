{"version":3,"sources":["services_registry.ts","registry.ts","components/widgets/LinkWidget.tsx","components/widgets/PortWidget.tsx","components/widgets/PropertyWidget.tsx","components/widgets/PropertiesWidget.tsx","components/widgets/NodeWidget.tsx","store/generateElementId.ts","store/types.ts","store/store.ts","store/linking.ts","store/nodes.ts","services/index.ts","services/properties/index.ts","services/properties/AnglePropertyService.tsx","services/properties/BlendModePropertyService.tsx","services/properties/ChoicesPropertyService.tsx","services/properties/CustomPropertyService.tsx","services/properties/MatrixPropertyService/index.ts","services/properties/NumberPropertyService/index.ts","services/properties/RefPropertyService.tsx","services/properties/TextPropertyService.tsx","services/nodes/AreaBumpNodeService.tsx","services/nodes/AxisNodeService.ts","services/nodes/BlendModeNodeService.ts","services/nodes/CanvasNodeService.tsx","services/nodes/ChordNodeService.tsx","services/nodes/ColorSchemeNodeService.ts","services/nodes/LineNodeService.tsx","services/nodes/MarginNodeService.tsx","services/nodes/NivoThemeNodeService.tsx","services/nodes/SankeyDataNodeService.tsx","services/nodes/SankeyNodeService.tsx","services/nodes/ScatterPlotNodeService.tsx","services/nodes/SeriesXYNodeService.tsx","services/nodes/SerieXYNodeService.ts","services/nodes/MatrixNodeService.tsx","services/nodes/ValueLinksNodeService.tsx","services/properties/ArrayStringPropertyService/ArrayStringPropertyControl.tsx","services/properties/ArrayStringPropertyService/ArrayStringPropertyService.tsx","services/properties/ArrayValueLinkPropertyService/ArrayValueLinkPropertyControl.tsx","services/properties/ArrayValueLinkPropertyService/ArrayValueLinkPropertyService.tsx","services/properties/ArrayXYPropertyService/ArrayXYPropertyControl.tsx","services/properties/ArrayXYPropertyService/ArrayXYPropertyService.tsx","services/properties/MatrixPropertyService/MatrixPropertyControl.tsx","services/properties/MatrixPropertyService/MatrixPropertyService.tsx","services/properties/NumberPropertyService/NumberPropertyService.tsx","services/properties/NumberPropertyService/NumberPropertyControl.tsx","theming/GlobalStyle.tsx","theming/helpers.ts","theming/themes/blueTheme.ts","theming/themes/index.ts","theming/themes/darkTheme.ts","theming/themes/lightTheme.ts","theming/hooks.ts","components/ui/Input.tsx","components/AppFooter.tsx","components/AppHeader.tsx","components/LinkingLayer.tsx","components/LinksLayer.tsx","components/NodeInfoPanel/NodeName.tsx","utils/useDocumentEventListener.ts","components/ui/ConfirmButtons.tsx","components/Modal.tsx","components/NodeInfoPanel/NodeControls.tsx","components/NodeInfoPanel/PropertyItem.tsx","components/NodeInfoPanel/NodeInfoPanel.tsx","components/NodesLayer.tsx","components/NodeSelector.tsx","components/sidebar/SidebarButton.tsx","components/sidebar/AddNodeButton.tsx","components/sidebar/NewGraph.tsx","fs.ts","components/sidebar/SaveGraph.tsx","components/sidebar/OpenGraph.tsx","components/sidebar/Settings.tsx","components/sidebar/Sidebar.tsx","examples/index.ts","components/ExampleLoader.tsx","components/Welcome.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["ServiceRegistry","properties","nodes","propertyServices","nodeServices","this","nodeType","nodeService","Error","grouped","Object","entries","groupBy","sortBy","group","map","category","types","propertyType","propertyService","propertySpec","getPropertyService","type","elementType","id","generateElementId","accepts","hasOutput","data","undefined","options","create","property","ownValue","input","getValue","getNodeService","resolved","forEach","name","servicesRegistry","service","lineGenerator","d3Line","curve","curveBasis","UNLINK_BUTTON_SIZE","LinkWidget","link","discreteLinks","useSettings","source","target","sourceElementType","sourceX","x","sourceY","y","sourceWidth","width","sourceHeight","height","targetX","targetY","targetHeight","useMemo","sourcePosition","targetPosition","xDistance","center","xOffset","Math","max","min","abs","points","push","path","useState","isHover","setIsHover","handleHover","useCallback","handleOut","unlink","useStore","sourceId","targetId","handleUnlink","registry","Container","Path","d","Circle","cx","cy","r","CapturePath","onMouseEnter","onMouseLeave","UnlinkButton","onClick","styled","g","props","theme","colors","discreteLink","getCategoryColor","div","background","circle","PortWidget","memo","elementId","useLinking","linkingType","isLinking","potentialId","useLinkingActions","startLinking","setLinkingPotentialPort","resetLinkingPotentialPort","handleLinking","event","stopPropagation","anchor","initial","clientX","clientY","handleMouseEnter","handleMouseLeave","onMouseDown","isHighlighted","style","left","Port","PORT_SIZE","CONTAINER_SIZE","css","PropertyWidget","PropertyContainer","PropertyName","length","transparentize","nodeBackground","text","span","PropertiesWidget","createElement","widget","NodeWidget","node","hasCustomWidget","setSelectedNodeIds","startDrag","handleStartDrag","NodeContainer","isSelected","transform","NodeHeader","NodeName","nodeBorder","header","topDepthBackground","uuidV4","isProperty","element","isNode","isLink","updateNodePosition","elements","nodeId","offset","find","includes","set","settings","themeId","setSettings","partialSettings","state","selectedNodeIds","createNode","newNode","replace","factory","newProperties","newProperty","createProperty","hydrate","removeNode","propertyIds","filter","nodeAndPropertyIds","updateNode","patch","updateProperty","propertyId","loadGraph","graph","links","drag","isDragging","dragging","updateDrag","position","stopDrag","linking","previous","updateLinking","currentElement","potentialElement","findLinkingPotentialPort","stopLinking","settingsSelector","setSettingsSelector","useSetSettings","loadGraphSelector","useLoadGraph","createNodeSelector","useCreateNode","updateNodeSelector","useUpdateNode","removeNodeSelector","useRemoveNode","setSelectedNodeIdsSelector","useSetSelectedNodeIds","linkingSelector","shallow","unlinkSelector","useUnlink","serializeProperties","serialize","serializeElements","useGraph","resolvedNodes","propertiesByNodeId","resolvedProperties","resolvedLinks","propertyNode","dependencies","values","resolveGraph","useSelectedNodes","AnglePropertyService","spec","serialized","control","value","onChange","console","log","BlendModePropertyService","ChoicesPropertyService","choices","choice","label","CustomPropertyService","renderer","RefPropertyService","resolvePropertyValue","TextPropertyService","AreaBumpNodeService","description","spacing","xPadding","resolvePropertyValues","isInteractive","AxisNodeService","tickSize","tickPadding","tickRotation","legend","legendOffset","BlendModeNodeService","blendMode","CanvasNodeService","content","backgroundColor","overflow","ChordNodeService","controlType","step","keys","innerRadiusRatio","innerRadiusOffset","Array","isArray","matrix","ColorSchemeNodeService","scheme","LineNodeService","MarginNodeService","top","right","bottom","NivoThemeNodeService","fontFamily","fontSize","textColor","grid","line","stroke","tooltip","container","color","borderRadius","boxShadow","padding","SankeyDataNodeService","propertyValues","nodeIds","SankeyNodeService","layout","align","ScatterPlotNodeService","SeriesXYNodeService","SerieXYNodeService","MatrixNodeService","ValueLinksNodeService","Grid","RemoveButton","accentColor","AddItemButton","ArrayStringPropertyService","setValue","item","index","itemIndex","handleChange","size","_","i","handleRemove","ControlGroup","ToIcon","ControlAddItemButton","ArrayValueLinkPropertyService","key","Number","placeholder","ControlContainer","ArrayXYPropertyService","SizeContainer","MatrixWrapper","MatrixContainer","columns","rows","MatrixPropertyService","xSize","ySize","valueUpdate","handleSizeChange","newXSize","newYSize","newValue","slice","newRowIndex","from","fill","row","newRow","newColumnIndex","rowIndex","cell","columnIndex","targetRowIndex","targetColumnIndex","handleValueChange","NumberPropertyService","partialOptions","GlobalStyle","createGlobalStyle","categories","blueTheme","mediumDepthBackground","badgeBackground","inputBackground","inputText","textLight","border","lightBorder","success","overlay","axis_grid","charts","colors_theming","dimensions","render","themes","useCurrentTheme","Input","AppFooter","toggleDiscreteLinks","SettingItem","SettingItemButton","footer","AppHeader","Header","ICON_SIZE","LinkingLayer","iconPosition","icon","pointerEvents","Line","strokeLinecap","x1","x2","y1","y2","Icon","isValid","LinksLayer","currentName","isEditing","setIsEditing","setName","inputRef","useRef","useEffect","current","focus","eventType","listener","handleEscape","document","addEventListener","removeEventListener","Name","ref","onKeyPress","ConfirmButtons","confirmLabel","onConfirm","cancelLabel","onCancel","Button","Modal","children","maxWidth","onCloseRequest","createPortal","role","aria-modal","onKeyDown","Background","Content","body","ModalTitle","h2","NodeControls","isRemoving","setIsRemoving","initRemoval","cancelRemoval","handleRemoveNode","Control","Relation","ownId","parentName","goToRelation","RelationContainer","RelationName","UnlinkIcon","PropertyItem","hasInput","PropertyHeader","h4","NodeInfoPanel","handleClose","Id","Close","Properties","NodeValueTitle","$$typeof","NodeValue","JSON","stringify","pre","NodesLayer","Layer","NodeType","onCreate","NodeTypeItem","NodeTypeTitle","NodeTypeDescription","Category","CategoryTitle","NodeSelector","getNodeServiceCategories","searchTerm","setSearchTerm","handleSearchTermChange","clearSearch","filtered","indexOf","SearchBox","SearchInput","SearchIcon","hasSearchTerm","NoResult","h3","SidebarButton","AddNodeButton","isOpen","setIsOpen","handleOpen","NewGraph","handleNewGraph","saveAsJSON","a","stringified","version","blob","Blob","fileSave","fileName","extensions","fileHandle","parseFileContent","Promise","resolve","reader","FileReader","readAsText","onloadend","readyState","DONE","result","parse","loadFromJSON","fileOpen","mimeTypes","SaveGraph","OpenGraph","then","Settings","Sidebar","examples","ExampleItem","example","onLoad","handleLoad","ExampleItemContainer","ExampleLoader","Welcome","Message","display","justifyContent","margin","cursor","App","store","selectedNodes","handleMouseMove","handleMouseOut","Canvas","onMouseMove","onMouseUp","InfoPanel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bfa47939.chunk.js","sourcesContent":["import { groupBy, sortBy } from 'lodash'\nimport {\n    CreateProperty,\n    generateElementId,\n    Property,\n    PropertySpec,\n    ResolvedNode,\n    ResolvedProperty,\n} from './store'\nimport { NodeType, NodeServiceMap, PropertyType, PropertyServiceMap } from './registry'\n\nexport interface NodeService<Type extends NodeType = NodeType, Data = any> {\n    type: Type\n    category: string\n    description?: string\n    hasOutput: boolean\n    properties: PropertySpec[]\n    factory: (data?: Partial<Data>) => Data\n    getValue: (node: ResolvedNode<Type>) => any\n    widget?: (props: { node: ResolvedNode<Type> }) => JSX.Element\n}\n\nexport interface PropertyService<\n    Type extends PropertyType = PropertyType,\n    Data = any,\n    Options = any,\n    Value = any,\n    SerializedValue = Value\n> {\n    type: Type\n    create: (propertySpec: PropertySpec<Type, Data, Options>) => PropertySpec<Type, Data, Options>\n    getValue: (property: ResolvedProperty<Type, Data, Options>) => Value\n    serialize: (property: ResolvedProperty<Type, Data, Options>) => SerializedValue\n    hydrate: (\n        property: Property<Type, Data, Options>,\n        serializedValue: SerializedValue\n    ) => Property<Type, Data, Options>\n    widget?: (props: { property: Property<Type, Data, Options> }) => JSX.Element\n    control?: (props: { property: Property<Type, Data, Options> }) => JSX.Element\n}\n\nexport class ServiceRegistry {\n    private readonly propertyServices: PropertyServiceMap\n    private readonly nodeServices: NodeServiceMap\n\n    constructor(properties: PropertyServiceMap, nodes: NodeServiceMap) {\n        this.propertyServices = properties\n        this.nodeServices = nodes\n    }\n\n    getNodeService(nodeType: NodeType): NodeServiceMap[NodeType] {\n        const nodeService = this.nodeServices[nodeType]\n        if (!nodeService) {\n            throw new Error(`no node service defined for: ${nodeType}`)\n        }\n\n        return nodeService\n    }\n\n    getNodeServiceCategories() {\n        const grouped = Object.entries(groupBy(this.nodeServices, 'category'))\n        const sorted = sortBy(grouped, group => group[0])\n\n        return sorted.map(group => ({\n            category: group[0],\n            types: sortBy(group[1], 'type'),\n        }))\n    }\n\n    getPropertyService<Type extends PropertyType = PropertyType>(\n        propertyType: Type\n    ): PropertyServiceMap[Type] {\n        const propertyService = this.propertyServices[propertyType]\n        if (!propertyService) {\n            throw new Error(`no property service defined for: ${propertyType}`)\n        }\n\n        return propertyService\n    }\n\n    createProperty(propertySpec: PropertySpec) {\n        const propertyService = this.getPropertyService(propertySpec.type)\n\n        const property: CreateProperty = {\n            elementType: 'property',\n            id: generateElementId(),\n            accepts: [],\n            hasOutput: false,\n            data: undefined,\n            options: {},\n            // @ts-ignore\n            ...propertyService.create(propertySpec),\n        }\n\n        return property\n    }\n\n    resolvePropertyValue<Type extends PropertyType = PropertyType>(\n        property: ResolvedProperty<Type>,\n        ownValue?: any\n    ) {\n        const { input } = property\n        if (!input) {\n            return ownValue\n        }\n\n        if (input.elementType === 'property') {\n            // @ts-ignore\n            return this.getPropertyService(input.type).getValue(input, this)\n        }\n\n        if (input.elementType === 'node') {\n            // @ts-ignore\n            return this.getNodeService(input.type).getValue(input, this)\n        }\n    }\n\n    resolvePropertyValues(properties: ResolvedProperty[]) {\n        const resolved: any = {}\n        properties.forEach(property => {\n            resolved[property.name] = this.getPropertyService(property.type)\n                // @ts-ignore\n                .getValue(property, this)\n        })\n\n        return resolved\n    }\n}\n","import { ServiceRegistry } from './services_registry'\nimport * as service from './services'\n\nconst propertyServiceMap = {\n    'property:angle': service.AnglePropertyService,\n    'property:array_string': service.ArrayStringPropertyService,\n    'property:array_value_link': service.ArrayValueLinkPropertyService,\n    'property:array_xy': service.ArrayXYPropertyService,\n    'property:choices': service.ChoicesPropertyService,\n    'property:blend_mode': service.BlendModePropertyService,\n    'property:custom': service.CustomPropertyService,\n    'property:matrix': service.MatrixPropertyService,\n    'property:number': service.NumberPropertyService,\n    'property:ref': service.RefPropertyService,\n    'property:text': service.TextPropertyService,\n}\nexport type PropertyServiceMap = typeof propertyServiceMap\nexport type PropertyType = keyof PropertyServiceMap\n\nconst nodeServiceMap = {\n    'node:area_bump': service.AreaBumpNodeService,\n    'node:axis': service.AxisNodeService,\n    'node:blend_mode': service.BlendModeNodeService,\n    'node:canvas': service.CanvasNodeService,\n    'node:chord': service.ChordNodeService,\n    'node:color_scheme': service.ColorSchemeNodeService,\n    'node:line': service.LineNodeService,\n    'node:margin': service.MarginNodeService,\n    'node:matrix': service.MatrixNodeService,\n    'node:nivo_theme': service.NivoThemeNodeService,\n    'node:sankey_data': service.SankeyDataNodeService,\n    'node:sankey': service.SankeyNodeService,\n    'node:scatterplot': service.ScatterPlotNodeService,\n    'node:serie_xy': service.SerieXYNodeService,\n    'node:series_xy': service.SeriesXYNodeService,\n    'node:value_links': service.ValueLinksNodeService,\n}\nexport type NodeServiceMap = typeof nodeServiceMap\nexport type NodeType = keyof NodeServiceMap\n\nconst servicesRegistry = new ServiceRegistry(propertyServiceMap, nodeServiceMap)\n\nexport default servicesRegistry\n","import { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { line as d3Line, curveBasis } from 'd3-shape'\nimport { FaTimes } from 'react-icons/fa'\nimport { ResolvedLink, useSettings, useStore } from '../../store'\nimport { getCategoryColor } from '../../theming'\nimport registry from '../../registry'\n\nconst lineGenerator = d3Line().curve(curveBasis)\n\nconst UNLINK_BUTTON_SIZE = 18\n\nexport const LinkWidget = ({ link }: { link: ResolvedLink }) => {\n    const { discreteLinks } = useSettings()\n    const { source, target } = link\n\n    const sourceElementType = source.elementType\n\n    const sourceX = source.x\n    const sourceY = source.y\n    const sourceWidth = source.width\n    const sourceHeight = source.height\n\n    const targetX = target.x\n    const targetY = target.y\n    const targetHeight = target.height\n\n    const [path, center] = useMemo(() => {\n        if (\n            sourceX === undefined ||\n            sourceY === undefined ||\n            sourceWidth === undefined ||\n            sourceHeight === undefined ||\n            targetX === undefined ||\n            targetY === undefined ||\n            targetHeight === undefined\n        ) {\n            return [null, null]\n        }\n\n        const sourcePosition: [number, number] = [\n            sourceX + sourceWidth,\n            sourceY + (sourceElementType === 'property' ? sourceHeight / 2 : 12),\n        ]\n        const targetPosition: [number, number] = [targetX, targetY + targetHeight / 2]\n\n        const xDistance = targetPosition[0] - sourcePosition[0]\n        const yDistance = targetPosition[1] - sourcePosition[1]\n\n        const center: [number, number] = [\n            sourcePosition[0] + xDistance / 2,\n            sourcePosition[1] + yDistance / 2,\n        ]\n\n        const xOffset = Math.max(6, Math.min(42, Math.abs(xDistance) * 0.2))\n\n        const points: [number, number][] = [sourcePosition]\n        points.push([sourcePosition[0] + xOffset, sourcePosition[1]])\n        points.push(center)\n        points.push([targetPosition[0] - xOffset, targetPosition[1]])\n        points.push(targetPosition)\n\n        return [lineGenerator(points), center]\n    }, [\n        sourceElementType,\n        sourceX,\n        sourceY,\n        sourceWidth,\n        sourceHeight,\n        targetX,\n        targetY,\n        targetHeight,\n    ])\n\n    const [isHover, setIsHover] = useState(false)\n    const handleHover = useCallback(() => {\n        setIsHover(true)\n    }, [setIsHover])\n    const handleOut = useCallback(() => {\n        setIsHover(false)\n    }, [setIsHover])\n\n    const { unlink } = useStore()\n    const sourceId = source.id\n    const targetId = target.id\n    const handleUnlink = useCallback(() => {\n        unlink(sourceId, targetId)\n    }, [unlink, sourceId, targetId])\n\n    if (!path || !center) {\n        return null\n    }\n\n    let category: string = 'default'\n    if (source.elementType === 'property') {\n        if (source.category) {\n            category = source.category\n        }\n    } else if (source.elementType === 'node') {\n        const nodeService = registry.getNodeService(source.type)\n        if (nodeService) {\n            category = nodeService.category\n        }\n    }\n\n    return (\n        <Container category={category} discreteLinks={discreteLinks}>\n            <Path d={path} isHover={isHover} />\n            {!isHover && <Circle cx={center[0]} cy={center[1]} r={4} />}\n            <CapturePath d={path} onMouseEnter={handleHover} onMouseLeave={handleOut} />\n            {isHover && (\n                <foreignObject\n                    x={center[0] - UNLINK_BUTTON_SIZE / 2}\n                    y={center[1] - UNLINK_BUTTON_SIZE / 2}\n                    width={UNLINK_BUTTON_SIZE}\n                    height={UNLINK_BUTTON_SIZE}\n                >\n                    <UnlinkButton\n                        onMouseEnter={handleHover}\n                        onMouseLeave={handleOut}\n                        onClick={handleUnlink}\n                    >\n                        <FaTimes />\n                    </UnlinkButton>\n                </foreignObject>\n            )}\n        </Container>\n    )\n}\n\nconst Container = styled.g<{\n    discreteLinks: boolean\n    category: string\n}>`\n    color: ${props =>\n        props.discreteLinks\n            ? props.theme.colors.discreteLink\n            : getCategoryColor(props.category, props.theme)};\n`\n\nconst CapturePath = styled.path`\n    pointer-events: all;\n    fill: none;\n    stroke: rgba(255, 255, 255, 0);\n    stroke-width: 8px;\n`\n\nconst Path = styled.path<{\n    isHover: boolean\n}>`\n    fill: none;\n    stroke: currentColor;\n    stroke-width: ${props => (props.isHover ? 3 : 1)}px;\n`\n\nconst UnlinkButton = styled.div`\n    pointer-events: all;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${UNLINK_BUTTON_SIZE}px;\n    height: ${UNLINK_BUTTON_SIZE}px;\n    border-radius: ${UNLINK_BUTTON_SIZE / 2}px;\n    cursor: pointer;\n    background-color: ${props => props.theme.colors.background};\n    border: 2px solid currentColor;\n    font-size: 10px;\n`\n\nconst Circle = styled.circle`\n    fill: ${props => props.theme.colors.background};\n    stroke: currentColor;\n    stroke-width: 2px;\n`\n","import { useCallback, MouseEvent, memo } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ElementId, useLinkingActions, useLinking } from '../../store'\nimport { getCategoryColor } from '../../theming'\n\nconst CONTAINER_SIZE = 20\nconst PORT_SIZE = 10\n\nexport const PortWidget = memo(\n    ({\n        type,\n        elementId,\n        x,\n        y,\n        category = 'default',\n    }: {\n        type: 'source' | 'target'\n        elementId: ElementId\n        x: number\n        y: number\n        category?: string\n    }) => {\n        const { type: linkingType, isLinking, potentialId } = useLinking()\n        const {\n            startLinking,\n            setLinkingPotentialPort,\n            resetLinkingPotentialPort,\n        } = useLinkingActions()\n\n        const handleLinking = useCallback(\n            (event: MouseEvent) => {\n                event.stopPropagation()\n\n                startLinking({\n                    elementId,\n                    type,\n                    anchor: [x, y],\n                    initial: [event.clientX, event.clientY],\n                })\n            },\n            [startLinking, elementId, type, x, y]\n        )\n\n        const handleMouseEnter = useCallback(() => {\n            setLinkingPotentialPort(elementId, type)\n        }, [setLinkingPotentialPort, elementId, type])\n\n        const handleMouseLeave = useCallback(() => {\n            resetLinkingPotentialPort()\n        }, [resetLinkingPotentialPort])\n\n        return (\n            <Container\n                onMouseDown={handleLinking}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n                isLinking={isLinking}\n                isHighlighted={potentialId === elementId && linkingType !== type}\n                style={{\n                    left: type === 'target' ? 0 : '100%',\n                }}\n            >\n                <Port category={category} />\n            </Container>\n        )\n    }\n)\n\nconst Port = styled.div<{\n    category: string\n}>`\n    pointer-events: all;\n    width: ${PORT_SIZE}px;\n    height: ${PORT_SIZE}px;\n    border-radius: ${PORT_SIZE / 2}px;\n    background: ${props => props.theme.colors.background};\n    border: 2px solid ${props => getCategoryColor(props.category, props.theme)};\n    transition: transform 200ms;\n`\n\nconst Container = styled.div<{\n    isLinking: boolean\n    isHighlighted: boolean\n}>`\n    pointer-events: all;\n    position: absolute;\n    top: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${CONTAINER_SIZE}px;\n    height: ${CONTAINER_SIZE}px;\n    margin-top: -${CONTAINER_SIZE / 2}px;\n    margin-left: -${CONTAINER_SIZE / 2}px;\n    cursor: crosshair;\n\n    ${Port} {\n        transform: scale(${props => (props.isHighlighted ? 1.6 : 1)});\n    }\n\n    ${props =>\n        !props.isLinking\n            ? css`\n                  &:hover {\n                      transform: scale(1.6);\n                  }\n              `\n            : undefined};\n`\n","import { memo } from 'react'\nimport styled from 'styled-components'\nimport { transparentize } from 'polished'\nimport { Property } from '../../store'\nimport { PortWidget } from './PortWidget'\n\nexport const PropertyWidget = memo(({ property }: { property: Property }) => {\n    return (\n        <PropertyContainer>\n            <PropertyName>{property.name}</PropertyName>\n            {property.accepts.length > 0 && (\n                <PortWidget\n                    type=\"target\"\n                    elementId={property.id}\n                    x={property.x}\n                    y={property.y + property.height / 2}\n                    category={property.category}\n                />\n            )}\n            {property.hasOutput && (\n                <PortWidget\n                    type=\"source\"\n                    elementId={property.id}\n                    x={property.x + property.width}\n                    y={property.y + property.height / 2}\n                    category={property.category}\n                />\n            )}\n        </PropertyContainer>\n    )\n})\n\nconst PropertyContainer = styled.div`\n    position: relative;\n    height: 20px;\n    user-select: none;\n    display: flex;\n    align-items: center;\n    padding: 0 12px;\n    background-color: ${props => transparentize(0.15, props.theme.colors.nodeBackground)};\n    color: ${props => props.theme.colors.text};\n    font-size: 11px;\n`\n\nconst PropertyName = styled.span`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    font-weight: 600;\n`\n","import { createElement, memo } from 'react'\nimport { ResolvedProperty } from '../../store'\nimport registry from '../../registry'\nimport { PropertyWidget } from './PropertyWidget'\n\nexport const PropertiesWidget = memo(({ properties }: { properties: ResolvedProperty[] }) => {\n    return (\n        <>\n            {properties.map(property => {\n                const propertyService = registry.getPropertyService(property.type)\n\n                if (!('widget' in propertyService)) {\n                    return <PropertyWidget key={property.name} property={property} />\n                }\n\n                // @ts-ignore\n                return createElement(propertyService.widget, { property })\n            })}\n        </>\n    )\n})\n","import { createElement, useCallback, MouseEvent, memo } from 'react'\nimport styled from 'styled-components'\nimport { transparentize } from 'polished'\nimport { ResolvedNode, useStore } from '../../store'\nimport registry from '../../registry'\nimport { getCategoryColor } from '../../theming'\nimport { PropertiesWidget } from './PropertiesWidget'\nimport { PortWidget } from './PortWidget'\n\nexport const NodeWidget = memo(({ node }: { node: ResolvedNode }) => {\n    const nodeService = registry.getNodeService(node.type)\n    const hasCustomWidget = 'widget' in nodeService\n    const { setSelectedNodeIds, startDrag } = useStore()\n\n    const handleStartDrag = useCallback(\n        (event: MouseEvent) => {\n            setSelectedNodeIds([node.id])\n            startDrag(node.id, [event.clientX, event.clientY])\n        },\n        [setSelectedNodeIds, node.id, startDrag]\n    )\n\n    return (\n        <NodeContainer\n            onMouseDown={handleStartDrag}\n            category={nodeService.category}\n            isSelected={node.isSelected}\n            style={{\n                transform: `translate(${node.x}px,${node.y}px)`,\n                width: node.width,\n            }}\n        >\n            <NodeHeader>\n                <NodeName>{node.name}</NodeName>\n                {nodeService.hasOutput && (\n                    <PortWidget\n                        type=\"source\"\n                        elementId={node.id}\n                        x={node.x + node.width}\n                        y={node.y + 12}\n                        category={nodeService.category}\n                    />\n                )}\n            </NodeHeader>\n            {!hasCustomWidget && <PropertiesWidget properties={node.properties} />}\n            {/* @ts-ignore */}\n            {hasCustomWidget && createElement(nodeService.widget!, { node, registry })}\n        </NodeContainer>\n    )\n})\n\nconst NodeContainer = styled.div<{\n    category: string\n    isSelected: boolean\n}>`\n    pointer-events: all;\n    user-select: none;\n    background-color: transparent;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n    position: absolute;\n    box-shadow: ${props =>\n        props.isSelected\n            ? `0 0 0 2px ${getCategoryColor(props.category, props.theme)}`\n            : `0 0 0 1px ${props.theme.colors.nodeBorder}`};\n    cursor: move;\n    font-size: 12px;\n\n    &:hover {\n        box-shadow: ${props =>\n            props.isSelected\n                ? `0 0 0 2px ${getCategoryColor(props.category, props.theme)}`\n                : `0 0 0 1px ${getCategoryColor(props.category, props.theme)}`};\n    }\n`\n\nconst NodeHeader = styled.header`\n    position: relative;\n    background-color: ${props => transparentize(0.15, props.theme.colors.topDepthBackground)};\n    width: 100%;\n    height: 24px;\n    padding: 0 12px 0 9px;\n`\n\nconst NodeName = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    font-weight: 600;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n","import { v4 as uuidV4 } from 'uuid'\nimport { ElementId } from './types'\n\nexport const generateElementId = (): ElementId => uuidV4()\n","import { PropertyType, NodeType } from '../registry'\n\nexport type ElementId = string\n\nexport interface CreateProperty<\n    Type extends PropertyType = PropertyType,\n    Data = any,\n    Options = any\n> {\n    elementType: 'property'\n    id: ElementId\n    type: Type\n    category: string\n    name: string\n    accepts: string[]\n    hasOutput: boolean\n    data: Data\n    options: Options\n}\n\nexport type PropertySpec<\n    Type extends PropertyType = PropertyType,\n    Data = any,\n    Options = any\n> = Pick<CreateProperty<Type, Data, Options>, 'type' | 'category' | 'name'> &\n    Partial<\n        Omit<\n            CreateProperty<Type, Data, Options>,\n            'elementType' | 'type' | 'category' | 'name' | 'id'\n        >\n    >\n\nexport interface Property<Type extends PropertyType = PropertyType, Data = any, Options = any>\n    extends CreateProperty<Type, Data, Options> {\n    nodeId: ElementId\n    x: number\n    y: number\n    width: number\n    height: number\n}\n\nexport interface ResolvedProperty<\n    Type extends PropertyType = PropertyType,\n    Data = any,\n    Options = any\n> extends Property<Type, Data, Options> {\n    node: ResolvedNode\n    dependencies: (ResolvedNode | ResolvedProperty)[]\n    input?: ResolvedNode | ResolvedProperty<Type>\n}\n\nexport const isProperty = <Type extends PropertyType = PropertyType>(\n    element: Element\n): element is Property<Type> => element.elementType === 'property'\n\nexport interface Node<Type extends NodeType = NodeType, Data = any> {\n    elementType: 'node'\n    type: Type\n    id: ElementId\n    x: number\n    y: number\n    width: number\n    name: string\n    data: Data\n    height: number\n    properties: ElementId[]\n}\n\nexport interface ResolvedNode<Type extends NodeType = NodeType>\n    extends Omit<Node<Type>, 'properties'> {\n    isSelected: boolean\n    properties: ResolvedProperty[]\n}\n\nexport interface SerializedNode<Type extends NodeType = NodeType> {\n    id: ElementId\n    type: Type\n    name: string\n    x: number\n    y: number\n    width: number\n}\n\nexport interface SerializedElements {\n    nodes: SerializedNode[]\n    links: any[]\n}\n\nexport const isNode = (element: Element): element is Node => element.elementType === 'node'\n\nexport interface Link {\n    id: ElementId\n    elementType: 'link'\n    sourceId: ElementId\n    targetId: ElementId\n}\n\nexport const isLink = (element: Element): element is Link => element.elementType === 'link'\n\nexport interface ResolvedLink extends Link {\n    source: ResolvedNode | ResolvedProperty\n    target: ResolvedNode | ResolvedProperty\n}\n\nexport type Element = Node | Property | Link\n\nexport interface AppSettings {\n    themeId: string\n    discreteLinks: boolean\n}\n\nexport type State = {\n    settings: AppSettings\n    setSettings: (partialSettings: Partial<AppSettings>) => void\n    // flat representation of all nodes/properties/links\n    elements: Element[]\n    selectedNodeIds: ElementId[]\n    setSelectedNodeIds: (ids: ElementId[]) => void\n    createNode: (type: NodeType) => void\n    updateNode: (id: ElementId, patch: any) => void\n    removeNode: (id: ElementId) => void\n    updateProperty: (propertyId: ElementId, patch: any) => void\n    loadGraph: (graph: any) => void\n    //\n    // DRAGGING\n    //\n    dragging: {\n        isDragging: boolean\n        elementId: ElementId | null\n        initial: [number, number]\n        offset: [number, number]\n    }\n    startDrag: (elementId: ElementId, initial: [number, number]) => void\n    updateDrag: (position: [number, number]) => void\n    stopDrag: () => void\n    //\n    // LINKING\n    //\n    linking: {\n        isLinking: boolean\n        elementId?: ElementId\n        elementType?: string\n        accepts: string[]\n        potentialId?: ElementId\n        type: 'source' | 'target'\n        anchor: [number, number]\n        position: [number, number]\n        previous: [number, number]\n    }\n    startLinking: (props: {\n        elementId?: ElementId\n        type: 'source' | 'target'\n        anchor: [number, number]\n        initial: [number, number]\n    }) => void\n    updateLinking: (position: [number, number]) => void\n    setLinkingPotentialPort: (elementId: ElementId, type: 'source' | 'target') => void\n    resetLinkingPotentialPort: () => void\n    stopLinking: () => void\n    link: (sourceId: ElementId, targetId: ElementId) => void\n    unlink: (sourceId: ElementId, targetId: ElementId) => void\n}\n","import { useMemo } from 'react'\nimport create from 'zustand'\nimport shallow from 'zustand/shallow'\nimport {\n    Element,\n    ElementId,\n    State,\n    Node,\n    ResolvedNode,\n    isNode,\n    Property,\n    ResolvedProperty,\n    isProperty,\n    Link,\n    ResolvedLink,\n    isLink,\n    SerializedElements,\n} from './types'\nimport { generateElementId } from './generateElementId'\nimport registry, { NodeType } from '../registry'\nimport { findLinkingPotentialPort } from './linking'\n\nconst DEFAULT_NODE_HEADER_HEIGHT = 24\nconst PROPERTY_HEIGHT = 20\n\nconst updateNodePosition = (\n    elements: Element[],\n    nodeId: ElementId | null,\n    offset: [number, number]\n): Element[] => {\n    if (nodeId === null) {\n        return elements\n    }\n\n    const node: Node | undefined = elements.find(\n        element => isNode(element) && element.id === nodeId\n    ) as any\n    if (!node) {\n        return elements\n    }\n\n    return elements.map(element => {\n        if (\n            (isNode(element) && element.id === node.id) ||\n            (isProperty(element) && node.properties.includes(element.id))\n        ) {\n            return {\n                ...element,\n                x: element.x + offset[0],\n                y: element.y + offset[1],\n            }\n        }\n\n        return element\n    })\n}\n\nexport const useStore = create<State>(set => ({\n    settings: {\n        themeId: 'dark',\n        discreteLinks: false,\n    },\n    setSettings: partialSettings =>\n        set(state => {\n            return {\n                settings: {\n                    ...state.settings,\n                    ...partialSettings,\n                },\n            }\n        }),\n    elements: [],\n    selectedNodeIds: [],\n    setSelectedNodeIds: selectedNodeIds => set(() => ({ selectedNodeIds })),\n    createNode: (type: NodeType) =>\n        set(state => {\n            const nodeService = registry.getNodeService(type)\n\n            const newNode: Node = {\n                elementType: 'node',\n                id: generateElementId(),\n                type: type,\n                name: nodeService.type.replace('node:', '').replace('_', ' '),\n                x: 100,\n                y: 100,\n                width: 120,\n                height: 100,\n                properties: [],\n                data: nodeService.factory(),\n            }\n\n            const newProperties: Property[] = []\n            nodeService.properties.forEach(property => {\n                const propertyService = registry.getPropertyService(property.type)\n\n                let newProperty: Property = {\n                    ...registry.createProperty(property),\n                    nodeId: newNode.id,\n                    x: newNode.x,\n                    y:\n                        newNode.y +\n                        DEFAULT_NODE_HEADER_HEIGHT +\n                        newProperties.length * PROPERTY_HEIGHT,\n                    height: PROPERTY_HEIGHT,\n                    width: newNode.width,\n                }\n\n                if (newNode.data[property.name] !== undefined) {\n                    // @ts-ignore\n                    newProperty = propertyService.hydrate(newProperty, newNode.data[property.name])\n                }\n\n                newProperties.push(newProperty)\n            })\n\n            newNode.properties = newProperties.map(property => property.id)\n\n            return {\n                elements: [...state.elements, ...newProperties, newNode],\n                selectedNodeIds: [newNode.id],\n            }\n        }),\n    removeNode: id =>\n        set(state => {\n            const propertyIds = state.elements\n                .filter(element => element.elementType === 'property' && element.nodeId === id)\n                .map(property => property.id)\n            const nodeAndPropertyIds = [id, ...propertyIds]\n\n            return {\n                elements: state.elements.filter(element => {\n                    if (element.elementType === 'link') {\n                        return (\n                            !nodeAndPropertyIds.includes(element.sourceId) &&\n                            !nodeAndPropertyIds.includes(element.targetId)\n                        )\n                    }\n\n                    return !nodeAndPropertyIds.includes(element.id)\n                }),\n            }\n        }),\n    updateNode: (id, patch) =>\n        set(state => {\n            const updatedElements = state.elements.map(element => {\n                if (!isNode(element) || element.id !== id) {\n                    return element\n                }\n\n                return {\n                    ...element,\n                    ...patch,\n                }\n            })\n\n            return {\n                elements: updatedElements,\n            }\n        }),\n    updateProperty: (propertyId, patch) =>\n        set(state => {\n            const updatedElements = state.elements.map(element => {\n                if (!isProperty(element) || element.id !== propertyId) {\n                    return element\n                }\n\n                return {\n                    ...element,\n                    ...patch,\n                }\n            })\n\n            return {\n                elements: updatedElements,\n            }\n        }),\n    loadGraph: graph =>\n        set(state => {\n            const elements: any[] = []\n\n            graph.nodes.forEach((node: any) => {\n                const nodeService = registry.getNodeService(node.type)\n                const propertyIds: ElementId[] = []\n\n                nodeService.properties.forEach(property => {\n                    const propertyService = registry.getPropertyService(property.type)\n\n                    const propertyId = node.data[property.name]\n                        ? node.data[property.name].id\n                        : generateElementId()\n\n                    let newProperty: Property = {\n                        ...registry.createProperty(property),\n                        id: propertyId,\n                        nodeId: node.id,\n                        x: node.x,\n                        y:\n                            DEFAULT_NODE_HEADER_HEIGHT +\n                            node.y +\n                            propertyIds.length * PROPERTY_HEIGHT,\n                        width: node.width,\n                        height: PROPERTY_HEIGHT,\n                    }\n\n                    if (node.data[property.name]) {\n                        newProperty = propertyService.hydrate(\n                            // @ts-ignore\n                            newProperty,\n                            node.data[property.name].data\n                        )\n                    }\n\n                    elements.push(newProperty)\n                    propertyIds.push(newProperty.id)\n                })\n\n                elements.push({\n                    elementType: 'node',\n                    id: node.id,\n                    type: node.type,\n                    name: node.name || node.type.replace('_', ' '),\n                    x: node.x,\n                    y: node.y,\n                    width: node.width,\n                    height: DEFAULT_NODE_HEADER_HEIGHT + propertyIds.length * PROPERTY_HEIGHT,\n                    properties: propertyIds,\n                })\n            })\n\n            graph.links.forEach((link: any) => {\n                elements.push({\n                    elementType: 'link',\n                    id: link.id,\n                    sourceId: link.sourceId,\n                    targetId: link.targetId,\n                })\n            })\n\n            return {\n                selectedNodeIds: [],\n                elements,\n                drag: {\n                    isDragging: false,\n                    elementId: null,\n                    initial: [0, 0],\n                    offset: [0, 0],\n                },\n            }\n        }),\n    //\n    // dragging\n    //\n    dragging: {\n        isDragging: false,\n        elementId: null,\n        initial: [0, 0],\n        offset: [0, 0],\n    },\n    startDrag: (elementId, initial) =>\n        set(state => {\n            return {\n                dragging: {\n                    isDragging: true,\n                    elementId: elementId,\n                    initial,\n                    offset: [0, 0],\n                },\n            }\n        }),\n    updateDrag: position =>\n        set(state => {\n            const offset: [number, number] = [\n                position[0] - state.dragging.initial[0],\n                position[1] - state.dragging.initial[1],\n            ]\n\n            return {\n                dragging: {\n                    ...state.dragging,\n                    offset,\n                    initial: [position[0], position[1]],\n                },\n                elements: updateNodePosition(state.elements, state.dragging.elementId, offset),\n            }\n        }),\n    stopDrag: () =>\n        set(() => {\n            return {\n                dragging: {\n                    isDragging: false,\n                    elementId: null,\n                    initial: [0, 0],\n                    offset: [0, 0],\n                },\n            }\n        }),\n    //\n    // linking\n    //\n    linking: {\n        isLinking: false,\n        elementId: undefined,\n        accepts: [],\n        type: 'source',\n        anchor: [0, 0],\n        position: [0, 0],\n        previous: [0, 0],\n    },\n    startLinking: ({ elementId, type, anchor, initial }) =>\n        set(state => {\n            const element = state.elements.find(element => element.id === elementId)\n            let elementType: string | undefined = undefined\n            if (element && 'type' in element) {\n                elementType = element.type\n            }\n\n            let accepts: string[] = []\n            if (element && 'accepts' in element) {\n                accepts = element.accepts\n            }\n\n            return {\n                linking: {\n                    isLinking: true,\n                    elementId,\n                    elementType,\n                    accepts,\n                    type,\n                    anchor,\n                    position: anchor,\n                    previous: initial,\n                },\n            }\n        }),\n    updateLinking: position =>\n        set(state => {\n            const offset = [\n                position[0] - state.linking.previous[0],\n                position[1] - state.linking.previous[1],\n            ]\n\n            return {\n                linking: {\n                    ...state.linking,\n                    position: [\n                        state.linking.position[0] + offset[0],\n                        state.linking.position[1] + offset[1],\n                    ],\n                    previous: position,\n                },\n            }\n        }),\n    setLinkingPotentialPort: (elementId, type) =>\n        set(state => {\n            const potentialId = findLinkingPotentialPort(\n                state.linking,\n                state.elements,\n                elementId,\n                type\n            )\n            if (!potentialId) {\n                return {}\n            }\n\n            return {\n                linking: {\n                    ...state.linking,\n                    potentialId,\n                },\n            }\n        }),\n    resetLinkingPotentialPort: () =>\n        set(state => {\n            return {\n                linking: {\n                    ...state.linking,\n                    potentialId: undefined,\n                },\n            }\n        }),\n    stopLinking: () =>\n        set(state => {\n            let elements = state.elements\n            if (state.linking.elementId !== undefined && state.linking.potentialId !== undefined) {\n                const link: Link = {\n                    id: generateElementId(),\n                    elementType: 'link',\n                    sourceId:\n                        state.linking.type === 'source'\n                            ? state.linking.elementId\n                            : state.linking.potentialId,\n                    targetId:\n                        state.linking.type === 'source'\n                            ? state.linking.potentialId\n                            : state.linking.elementId,\n                }\n\n                elements = [...elements, link]\n            }\n\n            return {\n                elements,\n                linking: {\n                    isLinking: false,\n                    accepts: [],\n                    type: 'source',\n                    anchor: [0, 0],\n                    position: [0, 0],\n                    previous: [0, 0],\n                },\n            }\n        }),\n    link: (sourceId: ElementId, targetId: ElementId) =>\n        set(state => {\n            const link: Link = {\n                id: generateElementId(),\n                elementType: 'link',\n                sourceId,\n                targetId,\n            }\n\n            return {\n                elements: [...state.elements, link],\n            }\n        }),\n    unlink: (sourceId: ElementId, targetId: ElementId) =>\n        set(state => {\n            return {\n                elements: state.elements.filter(element => {\n                    return (\n                        !isLink(element) ||\n                        element.sourceId !== sourceId ||\n                        element.targetId !== targetId\n                    )\n                }),\n            }\n        }),\n}))\n\nconst settingsSelector = (state: State) => state.settings\nexport const useSettings = () => useStore(settingsSelector)\n\nconst setSettingsSelector = (state: State) => state.setSettings\nexport const useSetSettings = () => useStore(setSettingsSelector)\n\nconst loadGraphSelector = (state: State) => state.loadGraph\nexport const useLoadGraph = () => useStore(loadGraphSelector)\n\nconst createNodeSelector = (state: State) => state.createNode\nexport const useCreateNode = () => useStore(createNodeSelector)\n\nconst updateNodeSelector = (state: State) => state.updateNode\nexport const useUpdateNode = () => useStore(updateNodeSelector)\n\nconst removeNodeSelector = (state: State) => state.removeNode\nexport const useRemoveNode = () => useStore(removeNodeSelector)\n\nconst setSelectedNodeIdsSelector = (state: State) => state.setSelectedNodeIds\nexport const useSetSelectedNodeIds = () => useStore(setSelectedNodeIdsSelector)\n\nconst linkingSelector = (state: State) => state.linking\nexport const useLinking = () => useStore(linkingSelector)\n\nexport const useLinkingActions = () =>\n    useStore(\n        state => ({\n            startLinking: state.startLinking,\n            updateLinking: state.updateLinking,\n            setLinkingPotentialPort: state.setLinkingPotentialPort,\n            resetLinkingPotentialPort: state.resetLinkingPotentialPort,\n        }),\n        shallow\n    )\n\nconst linkSelector = (state: State) => state.link\nexport const useLink = () => useStore(linkSelector)\n\nconst unlinkSelector = (state: State) => state.unlink\nexport const useUnlink = () => useStore(unlinkSelector)\n\nconst serializeProperties = (properties: ResolvedProperty[]) => {\n    const props: any = {}\n    properties.forEach(property => {\n        props[property.name] = {\n            id: property.id,\n            // @ts-ignore\n            data: registry.getPropertyService(property.type).serialize(property),\n        }\n    })\n\n    return props\n}\n\nexport const serializeElements = (\n    nodes: ResolvedNode[],\n    links: ResolvedLink[]\n): SerializedElements => {\n    return {\n        nodes: nodes.map(node => {\n            return {\n                id: node.id,\n                type: node.type,\n                name: node.name,\n                x: node.x,\n                y: node.y,\n                width: node.width,\n                data: serializeProperties(node.properties),\n            }\n        }),\n        links: links.map(link => {\n            return {\n                id: link.id,\n                sourceId: link.source.id,\n                targetId: link.target.id,\n            }\n        }),\n    }\n}\n\nconst resolveGraph = (elements: Element[]) => {\n    const resolvedNodes: Record<ElementId, ResolvedNode> = {}\n    const propertiesByNodeId: Record<ElementId, ElementId[]> = {}\n    const resolvedProperties: Record<ElementId, ResolvedProperty> = {}\n    const resolvedLinks: Record<ElementId, ResolvedLink> = {}\n\n    const nodes = elements.filter(isNode)\n    const properties = elements.filter(isProperty)\n    const links = elements.filter(isLink)\n\n    // first pass to resolve nodes without resolving\n    // their properties.\n    nodes.forEach(node => {\n        propertiesByNodeId[node.id] = node.properties\n\n        resolvedNodes[node.id] = {\n            ...node,\n            isSelected: false,\n            properties: [],\n        }\n    })\n\n    // first pass to resolve properties without resolving\n    // dependencies.\n    properties.forEach(property => {\n        const propertyNode = resolvedNodes[property.nodeId]\n        if (!propertyNode) {\n            throw new Error(`unable to find property node: ${property.nodeId}`)\n        }\n\n        resolvedProperties[property.id] = {\n            ...property,\n            node: propertyNode,\n            dependencies: [],\n        }\n    })\n\n    // assign resolved properties to nodes.\n    Object.values(resolvedNodes).forEach(node => {\n        if (node.id in propertiesByNodeId) {\n            propertiesByNodeId[node.id].forEach(propertyId => {\n                const property = resolvedProperties[propertyId]\n                if (!property) {\n                    throw new Error(`unable to find property: ${propertyId}`)\n                }\n\n                node.properties.push(property)\n            })\n        }\n    })\n\n    links.forEach(link => {\n        const source: ResolvedNode | ResolvedProperty =\n            resolvedNodes[link.sourceId] || resolvedProperties[link.sourceId]\n        if (!source) {\n            throw new Error(`unable to find link source: ${link.sourceId}`)\n        }\n\n        const target: ResolvedNode | ResolvedProperty =\n            resolvedNodes[link.targetId] || resolvedProperties[link.targetId]\n        if (!target) {\n            throw new Error(`unable to find link target: ${link.sourceId}`)\n        }\n\n        // @ts-ignore\n        if (target.elementType === 'property') {\n            // @ts-ignore\n            target.input = source\n        }\n\n        resolvedLinks[link.id] = {\n            ...link,\n            source,\n            target,\n        }\n    })\n\n    return {\n        nodes: Object.values(resolvedNodes),\n        properties: Object.values(resolvedProperties),\n        links: Object.values(resolvedLinks),\n    }\n}\n\nexport const useGraph = () => {\n    const { elements, selectedNodeIds } = useStore()\n\n    const graph = useMemo(() => resolveGraph(elements), [elements])\n\n    useMemo(() => {\n        graph.nodes.forEach(node => {\n            node.isSelected = selectedNodeIds.includes(node.id)\n        })\n    }, [graph, selectedNodeIds])\n\n    return graph\n}\n","import { ElementId, State } from './types'\n\n/**\n * Find eligible port depending on current element,\n * which can be either a node or a property.\n *\n * The following conditions must be met:\n * - should currently be linking\n * - current element ID should be different from target\n * - should be from a source to a target or the other way\n * - element should have a defined type\n * - target element should contain source type in its\n *   accepts list\n *\n * @todo: prevent circular dependencies\n */\nexport const findLinkingPotentialPort = (\n    linking: State['linking'],\n    elements: State['elements'],\n    elementId: ElementId,\n    type: 'source' | 'target'\n) => {\n    if (\n        // no current linking\n        !linking.isLinking ||\n        // source & target are identical\n        elementId === linking.elementId ||\n        // both are sources or targets\n        linking.type === type ||\n        // no element type so we cannot define\n        // eligible elements\n        !linking.elementType\n    )\n        return\n\n    const currentElement = elements.find(element => element.id === linking.elementId)\n    const potentialElement = elements.find(element => element.id === elementId)\n    if (!currentElement || !potentialElement) return\n\n    const source = type === 'target' ? currentElement : potentialElement\n    const target = type === 'target' ? potentialElement : currentElement\n\n    const link = elements.find(\n        element =>\n            element.elementType === 'link' &&\n            element.sourceId === source.id &&\n            element.targetId === target.id\n    )\n    if (link) return\n\n    if (!('type' in source) || !('accepts' in target)) return\n    if (target.accepts.includes(source.type)) {\n        return elementId\n    }\n}\n","import { State, isNode, Element, ElementId, Node, isProperty } from './types'\nimport { useGraph, useStore } from './store'\n\nexport const updateNodePosition = (\n    elements: Element[],\n    nodeId: ElementId | null,\n    offset: [number, number]\n): Element[] => {\n    if (nodeId === null) {\n        return elements\n    }\n\n    const node: Node | undefined = elements.find(\n        element => isNode(element) && element.id === nodeId\n    ) as any\n    if (!node) {\n        return elements\n    }\n\n    return elements.map(element => {\n        if (\n            (isNode(element) && element.id === node.id) ||\n            (isProperty(element) && node.properties.includes(element.id))\n        ) {\n            return {\n                ...element,\n                x: element.x + offset[0],\n                y: element.y + offset[1],\n            }\n        }\n\n        return element\n    })\n}\n\nconst nodesSelector = (state: State) => state.elements.filter(isNode)\nexport const useNodes = () => useStore(nodesSelector)\n\nexport const useSelectedNodes = () => {\n    const state = useStore()\n    const { nodes } = useGraph()\n\n    if (state.selectedNodeIds.length === 0) {\n        return []\n    }\n\n    return nodes.filter(node => state.selectedNodeIds.includes(node.id))\n}\n","export * from './nodes'\nexport * from './properties'\n","export * from './AnglePropertyService'\nexport * from './ArrayStringPropertyService'\nexport * from './ArrayValueLinkPropertyService'\nexport * from './ArrayXYPropertyService'\nexport * from './BlendModePropertyService'\nexport * from './ChoicesPropertyService'\nexport * from './CustomPropertyService'\nexport * from './MatrixPropertyService'\nexport * from './NumberPropertyService'\nexport * from './RefPropertyService'\nexport * from './TextPropertyService'\n","import { ChangeEvent } from 'react'\nimport { PropertyService } from '../../services_registry'\nimport { Input } from '../../components/ui'\n\nexport const anglePropertyType = 'property:angle'\nexport type AnglePropertyType = typeof anglePropertyType\n\nexport const AnglePropertyService: PropertyService<AnglePropertyType, number, any, number> = {\n    type: anglePropertyType,\n    create: spec => ({\n        ...spec,\n        data: spec.data !== undefined ? spec.data : 0,\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ({ property }) => {\n        const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            console.log(event.target.value)\n        }\n\n        return <Input type=\"number\" value={property.data} onChange={handleChange} />\n    },\n}\n","import { PropertyService } from '../../services_registry'\n\nconst blendModeChoices = [\n    { label: 'normal', value: 'normal' },\n    { label: 'multiply', value: 'multiply' },\n    { label: 'screen', value: 'screen' },\n    { label: 'overlay', value: 'overlay' },\n    { label: 'darken', value: 'darken' },\n    { label: 'lighten', value: 'lighten' },\n    { label: 'color-dodge', value: 'color-dodge' },\n    { label: 'color-burn', value: 'color-burn' },\n    { label: 'hard-light', value: 'hard-light' },\n    { label: 'soft-light', value: 'soft-light' },\n    { label: 'difference', value: 'difference' },\n    { label: 'exclusion', value: 'exclusion' },\n    { label: 'hue', value: 'hue' },\n    { label: 'saturation', value: 'saturation' },\n    { label: 'color', value: 'color' },\n    { label: 'luminosity', value: 'luminosity' },\n]\n\nexport const BlendModePropertyService: PropertyService<\n    'property:blend_mode',\n    string,\n    {},\n    string\n> = {\n    type: 'property:blend_mode',\n    create: spec => ({\n        ...spec,\n        data: 'normal',\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: () => <div>BlendModePropertyControl</div>,\n}\n","import { ChangeEvent } from 'react'\nimport { PropertyService } from '../../services_registry'\nimport { useStore, Property } from '../../store'\n\nexport type ChoicePropertyOptions = {\n    choices: {\n        label: string\n        value: string | number\n    }[]\n}\n\nexport const ChoicesPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:choices', string, ChoicePropertyOptions>\n}) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n        updateProperty(property.id, {\n            data: event.target.value,\n        })\n    }\n\n    return (\n        <select value={property.data} onChange={handleChange}>\n            {property.options.choices.map(choice => {\n                return (\n                    <option key={choice.value} value={choice.value}>\n                        {choice.label}\n                    </option>\n                )\n            })}\n        </select>\n    )\n}\n\nexport const ChoicesPropertyService: PropertyService<\n    'property:choices',\n    string,\n    ChoicePropertyOptions,\n    string\n> = {\n    type: 'property:choices',\n    create: spec => ({\n        ...spec,\n        data: '',\n        options: spec.options || {\n            choices: [],\n        },\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ChoicesPropertyControl,\n}\n","import { PropertyService } from '../../services_registry'\nimport { createElement } from 'react'\n\nexport type CustomPropertyOptions = {\n    renderer: any\n}\n\nexport const CustomPropertyService: PropertyService<\n    'property:custom',\n    undefined,\n    CustomPropertyOptions,\n    undefined\n> = {\n    type: 'property:custom',\n    create: spec => spec,\n    getValue: () => undefined,\n    serialize: () => undefined,\n    hydrate: property => property,\n    widget: ({ property }) => createElement(property.options.renderer, { property }),\n}\n","export * from './MatrixPropertyService'\nexport * from './types'\n","export * from './NumberPropertyService'\nexport * from './types'\n","import { PropertyService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport const RefPropertyService: PropertyService<'property:ref', never, never, undefined> = {\n    type: 'property:ref',\n    create: spec => spec,\n    getValue: property => registry.resolvePropertyValue(property, undefined),\n    // refs are managed by links\n    serialize: () => undefined,\n    hydrate: property => property,\n}\n","import { ChangeEvent } from 'react'\nimport { PropertyService } from '../../services_registry'\nimport { Property, useStore } from '../../store'\nimport { Input } from '../../components/ui'\n\nconst TextPropertyControl = ({ property }: { property: Property<'property:text', string> }) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        updateProperty(property.id, {\n            data: event.target.value,\n        })\n    }\n\n    return <Input type=\"text\" value={property.data} onChange={handleChange} />\n}\n\nexport const TextPropertyService: PropertyService<'property:text', string, never, string> = {\n    type: 'property:text',\n    create: spec => ({\n        ...spec,\n        data: spec.data || '',\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: TextPropertyControl,\n}\n","import { AreaBump } from '@nivo/bump'\nimport { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport type AreaBumpNodeType = 'node:area_bump'\n\nexport interface AreaBumpNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: any\n    spacing: number\n    xPadding: number\n    colors?: any\n    blendMode?: string\n    borderColor?: any\n    axisTop?: any\n    axisBottom?: any\n}\n\nexport const AreaBumpNodeService: NodeService<AreaBumpNodeType, AreaBumpNodeData> = {\n    type: 'node:area_bump',\n    category: 'charts',\n    description: `An AreaBump chart from @nivo/bump package.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'data',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:series_xy'],\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'spacing',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'xPadding',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            name: 'blendMode',\n            type: 'property:blend_mode',\n            category: 'colors_theming',\n            accepts: ['node:blend_mode'],\n        },\n        {\n            name: 'borderColor',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: [],\n        },\n        {\n            name: 'axisTop',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisBottom',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n            spacing: data?.spacing ?? 3,\n            xPadding: data?.xPadding ?? 0.6,\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        return <AreaBump {...props} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport type AxisNodeType = 'node:axis'\n\nexport interface AxisNodeData {\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    legend?: string\n    legendOffset: number\n}\n\nexport const AxisNodeService: NodeService<AxisNodeType, AxisNodeData> = {\n    type: 'node:axis',\n    category: 'axis_grid',\n    description: `X or Y axis to be used in various chart types.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'tickSize',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'tickPadding',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'tickRotation',\n            type: 'property:angle',\n            category: 'dimensions',\n            accepts: ['property:angle'],\n            hasOutput: true,\n        },\n        {\n            name: 'legend',\n            type: 'property:text',\n            category: 'data',\n            accepts: ['property:text'],\n            hasOutput: true,\n        },\n        {\n            name: 'legendOffset',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            tickSize: data?.tickSize ?? 5,\n            tickPadding: data?.tickPadding ?? 5,\n            tickRotation: data?.tickRotation ?? 0,\n            legend: data?.legend,\n            legendOffset: data?.legendOffset ?? 0,\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport type BlendModeNodeType = 'node:blend_mode'\n\nexport interface BlendModeNodeData {\n    blendMode: string\n}\n\nexport const BlendModeNodeService: NodeService<BlendModeNodeType, BlendModeNodeData> = {\n    type: 'node:blend_mode',\n    category: 'colors_theming',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'blendMode',\n            type: 'property:blend_mode',\n            category: 'colors_theming',\n            accepts: ['property:blend_mode'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            blendMode: data?.blendMode ?? 'normal',\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties).blendMode\n    },\n}\n","import { ResolvedNode } from '../../store'\nimport { NodeService } from '../../services_registry'\nimport { PropertiesWidget } from '../../components/widgets'\nimport registry from '../../registry'\n\nconst CanvasNodeWidget = ({ node }: { node: ResolvedNode }) => {\n    const props = registry.resolvePropertyValues(node.properties)\n\n    return (\n        <>\n            <PropertiesWidget properties={node.properties} />\n            <div\n                style={{\n                    width: props.width,\n                    height: props.height,\n                    backgroundColor: '#000000',\n                    overflow: 'hidden',\n                }}\n            >\n                {props.content}\n            </div>\n        </>\n    )\n}\n\nexport interface CanvasNodeData {\n    content?: any\n    width: number\n    height: number\n}\n\nexport const CanvasNodeService: NodeService<'node:canvas', CanvasNodeData> = {\n    type: 'node:canvas',\n    category: 'render',\n    description: `A canvas to render a React node.`,\n    hasOutput: false,\n    properties: [\n        {\n            name: 'content',\n            type: 'property:ref',\n            category: 'render',\n            accepts: [\n                'node:area_bump',\n                'node:chord',\n                'node:line',\n                'node:sankey',\n                'node:scatterplot',\n            ],\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            content: undefined,\n            width: data?.width ?? 300,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: () => ({}),\n    widget: CanvasNodeWidget,\n}\n","import { Chord } from '@nivo/chord'\nimport { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface ChordNodeData {\n    matrix?: any\n    keys?: any\n    width: number\n    height: number\n    margin?: any\n    innerRadiusRatio: number\n    innerRadiusOffset: number\n    theme?: any\n    colors?: any\n}\n\nexport const ChordNodeService: NodeService<'node:chord', ChordNodeData> = {\n    type: 'node:chord',\n    category: 'charts',\n    description: `An Chord diagram from @nivo/chord package.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'matrix',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:matrix'],\n        },\n        {\n            name: 'keys',\n            type: 'property:array_string',\n            category: 'data',\n            accepts: ['property:array_string'],\n            hasOutput: true,\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'innerRadiusRatio',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n            options: {\n                controlType: 'range',\n                min: 0,\n                max: 1,\n                step: 0.01,\n            },\n        },\n        {\n            name: 'innerRadiusOffset',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n            options: {\n                controlType: 'range',\n                min: 0,\n                max: 1,\n                step: 0.01,\n            },\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            keys: data?.keys ?? [],\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n            innerRadiusRatio: data?.innerRadiusRatio ?? 0.9,\n            innerRadiusOffset: data?.innerRadiusOffset ?? 0,\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        // check if the chart can be rendered\n        if (!Array.isArray(props.matrix) || !Array.isArray(props.keys) || props.keys.length === 0) {\n            return <div />\n        }\n\n        return <Chord {...props} isInteractive={true} />\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nconst schemeChoices = [\n    { label: 'nivo', value: 'nivo' },\n    { label: 'Category 10', value: 'category10' },\n    { label: 'Accent', value: 'accent' },\n    { label: 'Dark 2', value: 'dark2' },\n    { label: 'Paired', value: 'paired' },\n    { label: 'Pastel 1', value: 'pastel1' },\n    { label: 'Pastel 2', value: 'pastel2' },\n    { label: 'Set 1', value: 'set1' },\n    { label: 'Set 2', value: 'set2' },\n    { label: 'Set 3', value: 'set3' },\n    { label: 'Brown - Blue Green', value: 'brown_blueGreen' },\n    { label: 'Purple Red - Green', value: 'purpleRed_green' },\n    { label: 'Pink - Yellow Green', value: 'pink_yellowGreen' },\n    { label: 'Purple - Orange', value: 'purple_orange' },\n    { label: 'Red - Blue', value: 'red_blue' },\n    { label: 'Red - Grey', value: 'red_grey' },\n    { label: 'Red - Yellow - Blue', value: 'red_yellow_blue' },\n    { label: 'Red - Yellow - Green', value: 'red_yellow_green' },\n    { label: 'Spectral', value: 'spectral' },\n]\n\nexport interface ColorSchemeNodeData {\n    scheme: string\n}\n\nexport const ColorSchemeNodeService: NodeService<'node:color_scheme', ColorSchemeNodeData> = {\n    type: 'node:color_scheme',\n    category: 'colors_theming',\n    description: `A predefined color scheme to be used with nivo charts.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'scheme',\n            type: 'property:choices',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n            hasOutput: true,\n            options: {\n                choices: schemeChoices,\n            },\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            scheme: data?.scheme ?? 'nivo',\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n}\n","import { Line } from '@nivo/line'\nimport { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface LineNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: number\n    colors?: any\n    axisTop?: any\n    axisRight?: any\n    axisBottom?: any\n    axisLeft?: any\n}\n\nexport const LineNodeService: NodeService<'node:line', LineNodeData> = {\n    type: 'node:line',\n    category: 'charts',\n    description: `A Line chart from @nivo/line package.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'data',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:series_xy'],\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            name: 'axisTop',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisRight',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisBottom',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisLeft',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        return <Line {...props} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface MarginNodeData {\n    top: number\n    right: number\n    bottom: number\n    left: number\n}\n\nexport const MarginNodeService: NodeService<'node:margin', MarginNodeData> = {\n    type: 'node:margin',\n    category: 'dimensions',\n    description: `Top/right/bottom/left margins for charts.`,\n    hasOutput: true,\n    properties: [\n        {\n            type: 'property:number',\n            category: 'dimensions',\n            name: 'top',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            category: 'dimensions',\n            name: 'right',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            category: 'dimensions',\n            name: 'bottom',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            category: 'dimensions',\n            name: 'left',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            top: data?.top ?? 0,\n            right: data?.right ?? 0,\n            bottom: data?.bottom ?? 0,\n            left: data?.left ?? 0,\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n}\n","import { NodeService } from '../../services_registry'\n\nexport const NivoThemeNodeService: NodeService<'node:nivo_theme', {}> = {\n    type: 'node:nivo_theme',\n    category: 'colors_theming',\n    description: `A theme object to be used with nivo charts.`,\n    hasOutput: true,\n    properties: [],\n    factory: () => ({}),\n    getValue: () => {\n        return {\n            fontFamily: `'IBM Plex Mono', monospace`,\n            fontSize: 11,\n            textColor: '#dddddd',\n            grid: {\n                line: {\n                    stroke: '#333333',\n                },\n            },\n            tooltip: {\n                container: {\n                    background: '#222222',\n                    color: 'inherit',\n                    fontSize: 'inherit',\n                    borderRadius: '2px',\n                    boxShadow: '0 1px 2px rgba(0, 0, 0, 0.25)',\n                    padding: '5px 9px',\n                },\n            },\n        }\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface SankeyDataNodeData {\n    nodes: string[]\n    links: {\n        source: string\n        target: string\n        value: number\n    }[]\n}\n\nexport const SankeyDataNodeService: NodeService<'node:sankey_data', SankeyDataNodeData> = {\n    type: 'node:sankey_data',\n    category: 'data',\n    description: 'Nodes & Links to be used with a sankey diagram.',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'nodes',\n            type: 'property:array_string',\n            category: 'data',\n            accepts: ['property:array_string'],\n            hasOutput: true,\n        },\n        {\n            name: 'links',\n            type: 'property:array_value_link',\n            category: 'data',\n            accepts: ['node:value_links'],\n            hasOutput: true,\n        },\n    ],\n    // @ts-ignore\n    factory: (data = {}) => {\n        return {\n            // @ts-ignore\n            nodes: data?.nodes ? data.nodes.map(id => ({ id })) : [],\n            // @ts-ignore\n            links: data?.links ?? [],\n        }\n    },\n    getValue: ({ properties }) => {\n        const propertyValues = registry.resolvePropertyValues(properties)\n\n        const links = propertyValues.links\n        const nodeIds: string[] = propertyValues.nodes\n\n        const filteredLinks = links.filter((link: any) => {\n            return nodeIds.includes(link.source) && nodeIds.includes(link.target)\n        })\n\n        return {\n            links: filteredLinks,\n            nodes: nodeIds.map(id => ({ id })),\n        }\n    },\n}\n","import { Sankey } from '@nivo/sankey'\nimport { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface SankeyNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: number\n    layout?: 'vertical' | 'horizontal'\n    align?: 'center' | 'justify' | 'start' | 'end'\n    colors?: any\n    axisTop?: any\n    axisRight?: any\n    axisBottom?: any\n    axisLeft?: any\n}\n\nexport const SankeyNodeService: NodeService<'node:sankey', SankeyNodeData> = {\n    type: 'node:sankey',\n    category: 'charts',\n    description: `A Sankey diagram from @nivo/sankey package.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'data',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:sankey_data'],\n        },\n        {\n            name: 'width',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'height',\n            type: 'property:number',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'layout',\n            type: 'property:choices',\n            category: 'layout',\n            options: {\n                choices: [\n                    { label: 'Horizontal', value: 'horizontal' },\n                    { label: 'Vertical', value: 'vertical' },\n                ],\n            },\n        },\n        {\n            name: 'align',\n            type: 'property:choices',\n            category: 'layout',\n            options: {\n                choices: [\n                    { label: 'Center', value: 'center' },\n                    { label: 'Justify', value: 'justify' },\n                    { label: 'Start', value: 'start' },\n                    { label: 'End', value: 'end' },\n                ],\n            },\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            name: 'linkBlendMode',\n            type: 'property:text',\n            category: 'colors_theming',\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n            layout: data?.layout ?? 'horizontal',\n            align: data?.align ?? 'justify',\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        if (!props.data) {\n            return <div />\n        }\n\n        return <Sankey {...props} />\n    },\n}\n","import { ScatterPlot } from '@nivo/scatterplot'\nimport { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface ScatterPlotNodeData {\n    data?: any\n    width: number\n    height: number\n    margin?: any\n    colors?: any\n    borderColor?: any\n    axisTop?: any\n    axisRight?: any\n    axisBottom?: any\n    axisLeft?: any\n}\n\nexport const ScatterPlotNodeService: NodeService<'node:scatterplot', ScatterPlotNodeData> = {\n    type: 'node:scatterplot',\n    category: 'charts',\n    description: `A ScatterPlot chart from @nivo/scatterplot package.`,\n    hasOutput: true,\n    properties: [\n        {\n            name: 'data',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:series_xy'],\n        },\n        {\n            type: 'property:number',\n            name: 'width',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            type: 'property:number',\n            name: 'height',\n            category: 'dimensions',\n            accepts: ['property:number'],\n            hasOutput: true,\n        },\n        {\n            name: 'margin',\n            type: 'property:ref',\n            category: 'dimensions',\n            accepts: ['node:margin'],\n        },\n        {\n            name: 'theme',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:nivo_theme'],\n        },\n        {\n            name: 'colors',\n            type: 'property:ref',\n            category: 'colors_theming',\n            accepts: ['node:color_scheme'],\n        },\n        {\n            name: 'borderColor',\n            type: 'property:ref',\n            category: 'colors_theming',\n        },\n        {\n            name: 'axisTop',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisRight',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisBottom',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n        {\n            name: 'axisLeft',\n            type: 'property:ref',\n            category: 'axis_grid',\n            accepts: ['node:axis'],\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            width: data?.width ?? 420,\n            height: data?.height ?? 240,\n        }\n    },\n    getValue: ({ properties }) => {\n        const props = registry.resolvePropertyValues(properties)\n\n        return <ScatterPlot {...props} isInteractive={false} />\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nconst SeriesXYNodeWidget = () => {\n    return <div>Custom</div>\n}\n\nexport const SeriesXYNodeService: NodeService<'node:series_xy', any> = {\n    type: 'node:series_xy',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'serie_0',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:serie_xy'],\n        },\n        {\n            name: 'serie_1',\n            type: 'property:ref',\n            category: 'data',\n            accepts: ['node:serie_xy'],\n        },\n    ],\n    factory: () => {\n        return {}\n    },\n    //widget: SeriesXYNodeWidget,\n    getValue: node => {\n        return node.properties.map(property => {\n            const propertyService = registry.getPropertyService(property.type)\n\n            // @ts-ignore\n            return propertyService.getValue(property, registry)\n        })\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface SerieXYNodeData {\n    id: string\n    data: {\n        x: number\n        y: number\n    }[]\n}\n\nexport const SerieXYNodeService: NodeService<'node:serie_xy', SerieXYNodeData> = {\n    type: 'node:serie_xy',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'id',\n            type: 'property:text',\n            category: 'data',\n            accepts: ['property:text'],\n            hasOutput: true,\n        },\n        {\n            name: 'data',\n            type: 'property:array_xy',\n            category: 'data',\n            accepts: ['property:array_xy'],\n            hasOutput: true,\n        },\n    ],\n    factory: (data = {}) => {\n        return {\n            id: data?.id ?? '',\n            data: data?.data ?? [],\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties)\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface MatrixNodeData {\n    data: number[][]\n}\n\nexport const MatrixNodeService: NodeService<'node:matrix', MatrixNodeData> = {\n    type: 'node:matrix',\n    category: 'data',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'matrix',\n            type: 'property:matrix',\n            category: 'data',\n            accepts: ['property:matrix'],\n        },\n    ],\n    factory: data => {\n        return {\n            data: data?.data || [],\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties).matrix || []\n    },\n}\n","import { NodeService } from '../../services_registry'\nimport registry from '../../registry'\n\nexport interface ValueLinksNodeData {\n    links: {\n        source: string\n        target: string\n        value: number\n    }[]\n}\n\nexport const ValueLinksNodeService: NodeService<'node:value_links', ValueLinksNodeData> = {\n    type: 'node:value_links',\n    category: 'data',\n    description:\n        'An array of links between a source and a target plus a value bound to this relationship.',\n    hasOutput: true,\n    properties: [\n        {\n            name: 'links',\n            type: 'property:array_value_link',\n            category: 'data',\n            accepts: ['property:array_value_link'],\n            hasOutput: true,\n        },\n    ],\n    // @ts-ignore\n    factory: (data = {}) => {\n        return {\n            // @ts-ignore\n            nodes: data?.nodes ? data.nodes.map(id => ({ id })) : [],\n            // @ts-ignore\n            links: data?.links ?? [],\n        }\n    },\n    getValue: ({ properties }) => {\n        return registry.resolvePropertyValues(properties).links\n    },\n}\n","import { ChangeEvent, Fragment, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { FiPlus } from 'react-icons/fi'\nimport { FaTimes } from 'react-icons/fa'\nimport { Property, useStore } from '../../../store'\nimport { Input } from '../../../components/ui'\n\nexport const ArrayStringPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:array_string', string[]>\n}) => {\n    const { updateProperty } = useStore()\n\n    const setValue = useCallback(\n        (value: string[]) => {\n            updateProperty(property.id, { data: value })\n        },\n        [updateProperty, property.id]\n    )\n\n    const handleChange = (itemIndex: number, event: ChangeEvent<HTMLInputElement>) => {\n        setValue(\n            property.data.map((item, index) => {\n                if (index !== itemIndex) return item\n\n                return event.target.value\n            })\n        )\n    }\n\n    const handleAdd = () => {\n        setValue([...property.data, ''])\n    }\n\n    const handleRemove = (index: number) => {\n        setValue(property.data.filter((_, i) => i !== index))\n    }\n\n    return (\n        <>\n            <Grid>\n                {property.data.map((item, index) => {\n                    return (\n                        <Fragment key={index}>\n                            <span>[{index}]</span>\n                            <Input\n                                type=\"text\"\n                                value={item}\n                                onChange={event => handleChange(index, event)}\n                                size={4}\n                            />\n                            <RemoveButton\n                                onClick={() => {\n                                    handleRemove(index)\n                                }}\n                            >\n                                <FaTimes />\n                            </RemoveButton>\n                        </Fragment>\n                    )\n                })}\n                <AddItemButton onClick={handleAdd}>\n                    <FiPlus /> Add item\n                </AddItemButton>\n            </Grid>\n        </>\n    )\n}\n\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: 28px 1fr 20px;\n    grid-column-gap: 6px;\n    grid-row-gap: 6px;\n    margin-bottom: 9px;\n    align-items: center;\n    font-size: 12px;\n`\n\nconst RemoveButton = styled.span`\n    width: 20px;\n    height: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 12px;\n    border-radius: 2px;\n    cursor: pointer;\n    color: #777777;\n\n    &:hover {\n        background-color: #333333;\n        color: ${props => props.theme.colors.accentColor};\n    }\n`\n\nconst AddItemButton = styled.div`\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    grid-column-start: 2;\n\n    svg {\n        margin-right: 9px;\n    }\n`\n","import { PropertyService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { ArrayStringPropertyControl } from './ArrayStringPropertyControl'\n\nexport const ArrayStringPropertyService: PropertyService<\n    'property:array_string',\n    string[],\n    never,\n    string[]\n> = {\n    type: 'property:array_string',\n    create: spec => ({\n        ...spec,\n        data: spec.data || [],\n    }),\n    getValue: property => {\n        return registry.resolvePropertyValue(property, property.data)\n    },\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ArrayStringPropertyControl,\n}\n","import { ChangeEvent } from 'react'\nimport styled from 'styled-components'\nimport { FiPlus } from 'react-icons/fi'\nimport { FaArrowRight } from 'react-icons/fa'\nimport { Property, useStore } from '../../../store'\nimport { ArrayValueLinkPropertyType } from './ArrayValueLinkPropertyService'\nimport { Input } from '../../../components/ui'\n\nexport const ArrayValueLinkPropertyControl = ({\n    property,\n}: {\n    property: Property<\n        ArrayValueLinkPropertyType,\n        {\n            source: string\n            target: string\n            value: number\n        }[]\n    >\n}) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (\n        itemIndex: number,\n        key: 'source' | 'target' | 'value',\n        event: ChangeEvent<HTMLInputElement>\n    ) => {\n        updateProperty(property.id, {\n            data: property.data.map((item, index) => {\n                if (index !== itemIndex) {\n                    return item\n                }\n\n                let value: string | number = event.target.value\n                if (key === 'value') {\n                    value = Number(value)\n                }\n\n                return {\n                    ...item,\n                    [key]: value,\n                }\n            }),\n        })\n    }\n\n    const handleAdd = () => {\n        updateProperty(property.id, {\n            data: [\n                ...property.data,\n                {\n                    source: '',\n                    target: '',\n                    value: 0,\n                },\n            ],\n        })\n    }\n\n    return (\n        <>\n            {property.data.map((item, index) => {\n                return (\n                    <ControlGroup key={index}>\n                        <Input\n                            type=\"text\"\n                            placeholder=\"source\"\n                            value={item.source}\n                            onChange={event => handleChange(index, 'source', event)}\n                        />\n                        <ToIcon>\n                            <FaArrowRight />\n                        </ToIcon>\n                        <Input\n                            type=\"text\"\n                            placeholder=\"target\"\n                            value={item.target}\n                            onChange={event => handleChange(index, 'target', event)}\n                        />\n                        <Input\n                            type=\"number\"\n                            value={item.value}\n                            onChange={event => handleChange(index, 'value', event)}\n                        />\n                    </ControlGroup>\n                )\n            })}\n            <ControlAddItemButton onClick={handleAdd}>\n                <FiPlus /> Add item\n            </ControlAddItemButton>\n        </>\n    )\n}\n\nconst ControlGroup = styled.div`\n    display: grid;\n    grid-template-columns: minmax(0, 1fr) 40px minmax(0, 1fr);\n    grid-row-gap: 4px;\n    font-size: 12px;\n    align-items: center;\n    margin-bottom: 9px;\n\n    input[type='number'] {\n        width: 60px;\n    }\n`\n\nconst ToIcon = styled.span`\n    display: flex;\n    justify-content: center;\n`\n\nconst ControlAddItemButton = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 3;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n\n    svg {\n        margin-right: 9px;\n    }\n`\n","import { PropertyService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { ArrayValueLinkPropertyControl } from './ArrayValueLinkPropertyControl'\n\nexport const arrayValueLinkPropertyType = 'property:array_value_link'\nexport type ArrayValueLinkPropertyType = typeof arrayValueLinkPropertyType\n\nexport const ArrayValueLinkPropertyService: PropertyService<\n    ArrayValueLinkPropertyType,\n    {\n        source: string\n        target: string\n        value: number\n    }[],\n    {},\n    {\n        source: string\n        target: string\n        value: number\n    }[]\n> = {\n    type: arrayValueLinkPropertyType,\n    create: spec => ({\n        ...spec,\n        data: spec.data || [],\n    }),\n    getValue: property => {\n        return registry.resolvePropertyValue(property, property.data)\n    },\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ArrayValueLinkPropertyControl,\n}\n","import { ChangeEvent, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { FiPlus } from 'react-icons/fi'\nimport { Property, useStore } from '../../../store'\nimport { ArrayXYPropertyType } from './ArrayXYPropertyService'\n\nexport const ArrayXYPropertyControl = ({\n    property,\n}: {\n    property: Property<\n        ArrayXYPropertyType,\n        {\n            x: number\n            y: number\n        }[]\n    >\n}) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (\n        itemIndex: number,\n        key: 'x' | 'y',\n        event: ChangeEvent<HTMLInputElement>\n    ) => {\n        updateProperty(property.id, {\n            data: property.data.map((item, index) => {\n                if (index !== itemIndex) {\n                    return item\n                }\n\n                return {\n                    ...item,\n                    [key]: Number(event.target.value),\n                }\n            }),\n        })\n    }\n\n    const handleAdd = () => {\n        updateProperty(property.id, {\n            data: [\n                ...property.data,\n                {\n                    x: 0,\n                    y: 0,\n                },\n            ],\n        })\n    }\n\n    return (\n        <ControlContainer>\n            {property.data.map((item, index) => {\n                return (\n                    <Fragment key={index}>\n                        x:{' '}\n                        <input\n                            type=\"number\"\n                            value={item.x}\n                            onChange={event => handleChange(index, 'x', event)}\n                            size={4}\n                        />\n                        y:{' '}\n                        <input\n                            type=\"number\"\n                            value={item.y}\n                            onChange={event => handleChange(index, 'y', event)}\n                        />\n                    </Fragment>\n                )\n            })}\n            <ControlAddItemButton onClick={handleAdd}>\n                <FiPlus /> Add item\n            </ControlAddItemButton>\n        </ControlContainer>\n    )\n}\n\nconst ControlContainer = styled.div`\n    display: grid;\n    grid-template-columns: 20px auto 20px auto;\n    grid-row-gap: 6px;\n\n    input {\n        width: 52px;\n    }\n`\n\nconst ControlAddItemButton = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 5;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n\n    svg {\n        margin-right: 9px;\n    }\n`\n","import { PropertyService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { ArrayXYPropertyControl } from './ArrayXYPropertyControl'\n\nexport const arrayXYPropertyType = 'property:array_xy'\nexport type ArrayXYPropertyType = typeof arrayXYPropertyType\n\nexport const ArrayXYPropertyService: PropertyService<\n    ArrayXYPropertyType,\n    {\n        x: number\n        y: number\n    }[],\n    {},\n    {\n        x: number\n        y: number\n    }[]\n> = {\n    type: arrayXYPropertyType,\n    create: spec => ({\n        ...spec,\n        data: spec.data || [],\n    }),\n    getValue: property => {\n        return registry.resolvePropertyValue(property, property.data)\n    },\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: ArrayXYPropertyControl,\n}\n","import { ChangeEvent, Fragment } from 'react'\nimport styled from 'styled-components'\nimport { Property, useStore } from '../../../store'\nimport { Input } from '../../../components/ui'\n\nexport const MatrixPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:matrix', number[][]>\n}) => {\n    const { updateProperty } = useStore()\n\n    const value = property.data\n\n    let xSize = 0\n    let ySize = 0\n    if (value.length > 0) {\n        ySize = value.length\n        if (Array.isArray(value[0])) {\n            xSize = value[0].length\n        }\n    }\n\n    const setValue = (valueUpdate: number[][]) => {\n        updateProperty(property.id, {\n            data: valueUpdate,\n        })\n    }\n\n    const handleSizeChange = (newXSize: number, newYSize: number) => {\n        let newValue = value.slice(0, newYSize)\n        for (let newRowIndex = 0; newRowIndex < newYSize - ySize; newRowIndex++) {\n            newValue.push(Array.from({ length: newXSize }).fill(0) as number[])\n        }\n        newValue = newValue.map(row => {\n            const newRow = row.slice(0, newXSize)\n            for (let newColumnIndex = 0; newColumnIndex < newXSize - xSize; newColumnIndex++) {\n                newRow.push(0)\n            }\n\n            return newRow\n        })\n\n        setValue(newValue)\n    }\n\n    const handleValueChange = (\n        targetRowIndex: number,\n        targetColumnIndex: number,\n        event: ChangeEvent<HTMLInputElement>\n    ) => {\n        setValue(\n            value.map((row, rowIndex) => {\n                if (targetRowIndex !== rowIndex) {\n                    return row\n                }\n\n                return row.map((cell, columnIndex) => {\n                    if (targetColumnIndex !== columnIndex) {\n                        return cell\n                    }\n\n                    return Number(event.target.value)\n                })\n            })\n        )\n    }\n\n    return (\n        <>\n            <SizeContainer>\n                x size\n                <Input\n                    type=\"number\"\n                    value={xSize}\n                    onChange={event => handleSizeChange(Number(event.target.value), ySize)}\n                />\n                y size\n                <Input\n                    type=\"number\"\n                    value={ySize}\n                    onChange={event => handleSizeChange(xSize, Number(event.target.value))}\n                />\n            </SizeContainer>\n            <MatrixWrapper>\n                <MatrixContainer columns={xSize} rows={ySize}>\n                    {value.map((row, rowIndex) => {\n                        return (\n                            <Fragment key={rowIndex}>\n                                {row.map((cell, columnIndex) => (\n                                    <Input\n                                        key={columnIndex}\n                                        type=\"number\"\n                                        value={cell}\n                                        onChange={event =>\n                                            handleValueChange(rowIndex, columnIndex, event)\n                                        }\n                                    />\n                                ))}\n                            </Fragment>\n                        )\n                    })}\n                </MatrixContainer>\n            </MatrixWrapper>\n        </>\n    )\n}\n\nconst SizeContainer = styled.div`\n    display: grid;\n    grid-template-columns: minmax(0, 1fr) minmax(0, 2fr) minmax(0, 1fr) minmax(0, 2fr);\n    grid-column-gap: 9px;\n    align-items: center;\n    font-size: 12px;\n    white-space: nowrap;\n    margin-bottom: 9px;\n`\n\nconst MatrixWrapper = styled.div`\n    overflow-x: scroll;\n`\n\nconst MatrixContainer = styled.div<{\n    columns: number\n    rows: number\n}>`\n    display: grid;\n    grid-template-columns: repeat(${props => props.columns}, minmax(50px, 1fr));\n    grid-template-rows: repeat(${props => props.rows}, 1fr);\n    grid-column-gap: 4px;\n    grid-row-gap: 4px;\n`\n","import { PropertyService } from '../../../services_registry'\nimport { MatrixPropertyControl } from './MatrixPropertyControl'\n\nexport const MatrixPropertyService: PropertyService<\n    'property:matrix',\n    number[][],\n    never,\n    number[][]\n> = {\n    type: 'property:matrix',\n    create: spec => ({\n        ...spec,\n        data: spec.data || [],\n    }),\n    getValue: property => property.data,\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: MatrixPropertyControl,\n}\n","import { PropertyService } from '../../../services_registry'\nimport registry from '../../../registry'\nimport { NumberPropertyOptions } from './types'\nimport { NumberPropertyControl } from './NumberPropertyControl'\n\nexport const NumberPropertyService: PropertyService<\n    'property:number',\n    number,\n    NumberPropertyOptions,\n    number\n> = {\n    type: 'property:number',\n    create: ({ options: partialOptions = {}, ...spec }) => {\n        const options = {\n            controlType: partialOptions.controlType || 'number',\n            min: partialOptions.min !== undefined ? partialOptions.min : undefined,\n            max: partialOptions.max !== undefined ? partialOptions.max : undefined,\n            step: partialOptions.step || 1,\n        }\n\n        return {\n            ...spec,\n            options,\n        }\n    },\n    getValue: property => {\n        return registry.resolvePropertyValue(property, property.data)\n    },\n    serialize: property => property.data,\n    hydrate: (property, serialized) => ({\n        ...property,\n        data: serialized,\n    }),\n    control: NumberPropertyControl,\n}\n","import { ChangeEvent } from 'react'\nimport { Property, useStore } from '../../../store'\nimport { Input } from '../../../components/ui'\nimport { NumberPropertyOptions } from './types'\n\nexport const NumberPropertyControl = ({\n    property,\n}: {\n    property: Property<'property:number', number, NumberPropertyOptions>\n}) => {\n    const { updateProperty } = useStore()\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        updateProperty(property.id, {\n            data: Number(event.target.value),\n        })\n    }\n\n    if (property.options.controlType === 'number') {\n        return (\n            <Input\n                type=\"number\"\n                value={property.data}\n                onChange={handleChange}\n                min={property.options.min}\n                max={property.options.max}\n                step={property.options.step}\n            />\n        )\n    }\n\n    return (\n        <Input\n            type=\"range\"\n            value={property.data}\n            onChange={handleChange}\n            min={property.options.min}\n            max={property.options.max}\n            step={property.options.step}\n        />\n    )\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n    body {\n        margin: 0;\n        font-family: 'IBM Plex Mono', monospace;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        font-size: 14px;\n        color: ${props => props.theme.colors.text};\n    }\n    \n    code {\n        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n    }\n    \n    * {\n        box-sizing: border-box;\n    }\n    \n    .App {\n        position: fixed;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n`\n","import { DefaultTheme } from 'styled-components'\n\nexport const getCategoryColor = (category: string, theme: DefaultTheme) => {\n    if (category in theme.colors.categories) {\n        return theme.colors.categories[category as keyof DefaultTheme['colors']['categories']]\n    }\n\n    return theme.colors.accentColor\n}\n","import { DefaultTheme } from 'styled-components'\nimport { transparentize } from 'polished'\n\nexport const blueTheme: DefaultTheme = {\n    colors: {\n        background: '#2256ff',\n        mediumDepthBackground: '#2256ff',\n        topDepthBackground: '#173dba',\n        nodeBackground: '#2256ff',\n        badgeBackground: '#333333',\n        inputBackground: '#ffffff',\n        inputText: '#173dba',\n        text: '#ffffff',\n        textLight: '#ffffff',\n        accentColor: '#ffffff',\n        border: '#ffffff',\n        lightBorder: 'rgba(255, 255, 255, 0.15)',\n        nodeBorder: '#ffffff',\n        success: '#00d919',\n        overlay: transparentize(0.1, '#2256ff'),\n        discreteLink: '#7287d6',\n        categories: {\n            axis_grid: '#ffffff',\n            charts: '#ffffff',\n            colors_theming: '#ffffff',\n            data: '#ffffff',\n            dimensions: '#ffffff',\n            render: '#ffffff',\n        },\n    },\n}\n","import { blueTheme } from './blueTheme'\nimport { darkTheme } from './darkTheme'\nimport { lightTheme } from './lightTheme'\n\nexport const themes = [\n    {\n        id: 'dark',\n        name: 'Dark theme',\n        theme: darkTheme,\n    },\n    {\n        id: 'light',\n        name: 'Light theme',\n        theme: lightTheme,\n    },\n    {\n        id: 'blue',\n        name: 'Blue theme',\n        theme: blueTheme,\n    },\n]\n","import { DefaultTheme } from 'styled-components'\nimport { transparentize } from 'polished'\n\nexport const darkTheme: DefaultTheme = {\n    colors: {\n        background: '#292929',\n        mediumDepthBackground: '#111111',\n        topDepthBackground: '#000000',\n        nodeBackground: '#202020',\n        badgeBackground: '#333333',\n        inputBackground: '#333333',\n        inputText: '#eeeeee',\n        text: '#eeeeee',\n        textLight: '#aaaaaa',\n        accentColor: 'pink',\n        border: '#555555',\n        lightBorder: '#222222',\n        nodeBorder: '#111111',\n        success: '#65f7cf',\n        overlay: transparentize(0.2, '#333333'),\n        discreteLink: '#444444',\n        categories: {\n            axis_grid: '#837ec4',\n            charts: '#f19494',\n            colors_theming: '#e37e49',\n            data: '#759d61',\n            dimensions: '#608cb7',\n            render: '#d78080',\n        },\n    },\n}\n","import { DefaultTheme } from 'styled-components'\nimport { transparentize } from 'polished'\n\nexport const lightTheme: DefaultTheme = {\n    colors: {\n        background: '#ececec',\n        mediumDepthBackground: '#f5f3f3',\n        topDepthBackground: '#ffffff',\n        nodeBackground: '#f2f2f2',\n        badgeBackground: '#eeeeee',\n        inputBackground: '#eeeeee',\n        inputText: '#444444',\n        text: '#333333',\n        textLight: '#777777',\n        accentColor: '#1a8cc3',\n        border: '#dddddd',\n        lightBorder: '#eeeeee',\n        nodeBorder: '#cccccc',\n        success: '#0ab537',\n        overlay: transparentize(0.3, '#eeeeee'),\n        discreteLink: '#cccccc',\n        categories: {\n            axis_grid: '#60399b',\n            charts: '#006dcd',\n            colors_theming: '#d2702d',\n            data: '#3da914',\n            dimensions: '#288fa5',\n            render: '#c3931a',\n        },\n    },\n}\n","import { useMemo } from 'react'\nimport { useSettings } from '../store'\nimport { themes } from './themes'\n\nexport const useCurrentTheme = () => {\n    const { themeId } = useSettings()\n\n    return useMemo(() => {\n        const theme = themes.find(theme => theme.id === themeId)\n        if (!theme) {\n            throw new Error(`no theme found matching id: ${themeId}`)\n        }\n\n        return theme.theme\n    }, [themeId])\n}\n","import styled from 'styled-components'\n\nexport const Input = styled.input`\n    border: none;\n    padding: 3px 6px;\n    border-radius: 2px;\n    font-family: inherit;\n    background-color: ${props => props.theme.colors.inputBackground};\n    color: ${props => props.theme.colors.inputText};\n    font-size: 12px;\n    cursor: pointer;\n\n    &[type='number'] {\n        text-align: right;\n    }\n\n    &:focus {\n        outline: 0;\n        background-color: #bbbbbb;\n        color: #000000;\n        cursor: auto;\n    }\n`\n","import { memo, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { useSettings, useSetSettings } from '../store'\n\nexport const AppFooter = memo(() => {\n    const settings = useSettings()\n    const setSettings = useSetSettings()\n\n    const { discreteLinks } = settings\n    const toggleDiscreteLinks = useCallback(\n        () =>\n            setSettings({\n                discreteLinks: !discreteLinks,\n            }),\n        [setSettings, discreteLinks]\n    )\n\n    return (\n        <Container>\n            <SettingItem onClick={toggleDiscreteLinks}>\n                <span>discrete links</span>\n                <SettingItemButton>{discreteLinks ? 'on' : 'off'}</SettingItemButton>\n            </SettingItem>\n        </Container>\n    )\n})\n\nconst Container = styled.footer`\n    position: fixed;\n    display: flex;\n    align-items: center;\n    left: 64px;\n    bottom: 0;\n    width: calc(100% - 364px);\n    height: 36px;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n`\n\nconst SettingItem = styled.div`\n    user-select: none;\n    display: flex;\n    align-items: center;\n    height: 100%;\n    padding: 0 12px;\n    font-size: 11px;\n    color: ${props => props.theme.colors.textLight};\n    border-right: 1px solid ${props => props.theme.colors.lightBorder};\n    cursor: pointer;\n\n    &:hover {\n        background-color: ${props => props.theme.colors.topDepthBackground};\n        color: ${props => props.theme.colors.text};\n    }\n`\n\nconst SettingItemButton = styled.span`\n    padding: 3px 0;\n    display: flex;\n    justify-content: center;\n    width: 32px;\n    margin-left: 6px;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n    border-radius: 2px;\n    font-weight: 600;\n`\n","import styled from 'styled-components'\n\nexport const AppHeader = () => {\n    return <Header>{/*<Title>nivo graph editor</Title>*/}</Header>\n}\n\nconst Header = styled.header`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 46px;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n    display: flex;\n    align-items: center;\n    padding-left: 64px;\n`\n\n/*\nconst Title = styled.h1`\n    margin: 0;\n    padding: 0;\n    font-size: 14px;\n    color: ${props => props.theme.colors.accentColor};\n    text-transform: uppercase;\n`\n*/\n","import styled from 'styled-components'\nimport { FaChevronRight, FaCheck } from 'react-icons/fa'\nimport { useStore } from '../store'\nimport { ReactNode } from 'react'\n\nconst ICON_SIZE = 24\nconst ICON_SPACING = 16\n\nexport const LinkingLayer = () => {\n    const { linking } = useStore()\n\n    if (!linking.isLinking) {\n        return null\n    }\n\n    let iconPosition: [number, number]\n    if (linking.type === 'source') {\n        iconPosition = [linking.position[0] + ICON_SPACING, linking.position[1] - ICON_SIZE / 2]\n    } else {\n        iconPosition = [\n            linking.position[0] - ICON_SIZE - ICON_SPACING,\n            linking.position[1] - ICON_SIZE / 2,\n        ]\n    }\n\n    let icon: ReactNode = <FaChevronRight />\n    if (linking.potentialId) {\n        icon = <FaCheck />\n    }\n\n    return (\n        <svg\n            style={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                pointerEvents: 'none',\n            }}\n        >\n            <Line\n                strokeLinecap=\"round\"\n                x1={linking.anchor[0]}\n                x2={linking.position[0]}\n                y1={linking.anchor[1]}\n                y2={linking.position[1]}\n            />\n            <Circle cx={linking.position[0]} cy={linking.position[1]} r={4} />\n            <foreignObject x={iconPosition[0]} y={iconPosition[1]} width={24} height={24}>\n                <Icon isValid={!!linking.potentialId}>{icon}</Icon>\n            </foreignObject>\n        </svg>\n    )\n}\n\nconst Line = styled.line`\n    stroke-width: 3px;\n    stroke: ${props => props.theme.colors.accentColor};\n`\n\nconst Circle = styled.circle`\n    fill: ${props => props.theme.colors.accentColor};\n`\n\nconst Icon = styled.div<{\n    isValid: boolean\n}>`\n    width: ${ICON_SIZE}px;\n    height: ${ICON_SIZE}px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n    color: ${props =>\n        props.isValid ? props.theme.colors.success : props.theme.colors.accentColor};\n    border: 2px solid\n        ${props => (props.isValid ? props.theme.colors.success : props.theme.colors.accentColor)};\n    border-radius: ${ICON_SIZE / 2}px;\n    font-size: 12px;\n`\n","import { ResolvedLink } from '../store'\nimport { LinkWidget } from './widgets'\n\nexport const LinksLayer = ({ links }: { links: ResolvedLink[] }) => {\n    return (\n        <svg\n            style={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                pointerEvents: 'none',\n            }}\n        >\n            {links.map(link => (\n                <LinkWidget key={link.id} link={link} />\n            ))}\n        </svg>\n    )\n}\n","import {\n    ChangeEvent,\n    KeyboardEvent as ReactKeyboardEvent,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    memo,\n} from 'react'\nimport styled from 'styled-components'\nimport { MdEdit } from 'react-icons/md'\nimport { ElementId, useUpdateNode } from '../../store'\nimport { useDocumentEventListener } from '../../utils/useDocumentEventListener'\n\nexport const NodeName = memo(({ id, name: currentName }: { id: ElementId; name: string }) => {\n    const [isEditing, setIsEditing] = useState(false)\n    const [name, setName] = useState(currentName)\n    const updateNode = useUpdateNode()\n    const inputRef = useRef<HTMLInputElement | null>(null)\n\n    useEffect(() => {\n        if (isEditing && inputRef.current) {\n            inputRef.current?.focus()\n        }\n    }, [isEditing, inputRef])\n\n    useEffect(() => {\n        setName(currentName)\n        setIsEditing(false)\n    }, [currentName, setName, setIsEditing])\n\n    const handleChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            setName(event.target.value)\n        },\n        [setName]\n    )\n\n    const handleEnter = (event: ReactKeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            updateNode(id, { name })\n            setIsEditing(false)\n        }\n    }\n\n    const handleEscape = useCallback(\n        (event: KeyboardEvent) => {\n            if (event.key === 'Escape') {\n                setIsEditing(false)\n            }\n        },\n        [setIsEditing]\n    )\n    useDocumentEventListener('keydown', handleEscape)\n\n    return (\n        <Container\n            onClick={() => {\n                if (!isEditing) {\n                    setIsEditing(true)\n                }\n            }}\n        >\n            {!isEditing && (\n                <>\n                    <Name>{currentName}</Name>\n                    <Icon>\n                        <MdEdit />\n                    </Icon>\n                </>\n            )}\n            {isEditing && (\n                <Input\n                    ref={inputRef}\n                    onKeyPress={handleEnter}\n                    type=\"text\"\n                    value={name}\n                    onChange={handleChange}\n                />\n            )}\n        </Container>\n    )\n})\n\nconst Icon = styled.span`\n    margin-left: 12px;\n    width: 24px;\n    height: 24px;\n    border-radius: 3px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #333333;\n    color: #999999;\n    cursor: pointer;\n    flex-shrink: 0;\n`\n\nconst Input = styled.input`\n    width: calc(100% - 32px);\n    height: 32px;\n    border: none;\n    padding: 5px 9px;\n    border-radius: 2px;\n    font-weight: 800;\n    font-family: inherit;\n    background-color: #aaaaaa;\n    font-size: 14px;\n\n    &:focus {\n        outline: 0;\n    }\n`\n\nconst Name = styled.span`\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n\nconst Container = styled.div`\n    height: 32px;\n    padding: 0;\n    margin: 0 32px 9px 0;\n    font-size: 16px;\n    font-weight: 800;\n    display: flex;\n    align-items: center;\n`\n","import { useEffect } from 'react'\n\n/**\n * This hook can be used to attach event listener to the document,\n * it will take care of removing/updating the listener if it changes,\n * and will also remove the listener when the component it's attached\n * to is unmounted.\n */\nexport const useDocumentEventListener = <K extends keyof DocumentEventMap>(\n    eventType: K,\n    listener: (this: Document, event: DocumentEventMap[K]) => any\n) => {\n    useEffect(() => {\n        document.addEventListener(eventType, listener)\n\n        return () => {\n            document.removeEventListener(eventType, listener)\n        }\n    }, [listener])\n}\n","import styled from 'styled-components'\nimport { ReactNode } from 'react'\n\nexport const ConfirmButtons = ({\n    confirmLabel = 'yes',\n    onConfirm,\n    cancelLabel = 'no',\n    onCancel,\n}: {\n    confirmLabel?: ReactNode\n    onConfirm: () => void\n    cancelLabel?: ReactNode\n    onCancel: () => void\n}) => {\n    return (\n        <Container>\n            <Button onClick={onConfirm}>{confirmLabel}</Button>\n            <Button onClick={onCancel}>{cancelLabel}</Button>\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    padding: 16px;\n    display: flex;\n    justify-content: center;\n`\n\nconst Button = styled.span`\n    padding: 9px 12px;\n    background-color: #000000;\n    border-radius: 2px;\n    margin-left: 12px;\n    cursor: pointer;\n    width: 80px;\n    text-align: center;\n\n    &:first-child {\n        margin-left: 0;\n    }\n`\n","import { ReactNode, KeyboardEvent } from 'react'\nimport { createPortal } from 'react-dom'\nimport styled from 'styled-components'\n\nexport const Modal = ({\n    children,\n    maxWidth,\n    onCloseRequest,\n}: {\n    children: ReactNode\n    maxWidth?: number\n    onCloseRequest(): void\n}) => {\n    const handleKeydown = (event: KeyboardEvent) => {}\n\n    return createPortal(\n        <Container role=\"dialog\" aria-modal=\"true\" onKeyDown={handleKeydown}>\n            <Background onClick={onCloseRequest} />\n            <Content maxWidth={maxWidth}>{children}</Content>\n        </Container>,\n        document.body\n    )\n}\n\nconst Container = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: auto;\n    padding: 12px;\n`\n\nconst Background = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 1;\n    background-color: ${props => props.theme.colors.overlay};\n`\n\nconst Content = styled.div<{\n    maxWidth?: number\n}>`\n    position: relative;\n    z-index: 2;\n    width: 100%;\n    background: ${props => props.theme.colors.topDepthBackground};\n    backdrop-filter: none;\n    max-width: ${props => (props.maxWidth ? `${props.maxWidth}px` : 'none')};\n    max-height: 100%;\n    overflow-y: scroll;\n    box-shadow: 0 0 0 5px ${props => props.theme.colors.border};\n`\n\nexport const ModalTitle = styled.h2`\n    margin: 0;\n    padding: 9px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n\n    svg {\n        color: ${props => props.theme.colors.accentColor};\n        margin-right: 12px;\n    }\n`\n","import { memo, useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { FiTrash2 } from 'react-icons/fi'\nimport { ResolvedNode, useRemoveNode } from '../../store'\nimport { ConfirmButtons } from '../ui/ConfirmButtons'\nimport { Modal, ModalTitle } from '../Modal'\n\nexport const NodeControls = memo(({ node }: { node: ResolvedNode }) => {\n    const nodeId = node.id\n\n    const removeNode = useRemoveNode()\n\n    const [isRemoving, setIsRemoving] = useState(false)\n\n    const initRemoval = useCallback(() => {\n        setIsRemoving(true)\n    }, [setIsRemoving])\n\n    const cancelRemoval = useCallback(() => {\n        setIsRemoving(false)\n    }, [setIsRemoving])\n\n    const handleRemoveNode = useCallback(() => {\n        removeNode(nodeId)\n    }, [removeNode, nodeId])\n\n    return (\n        <Container>\n            <Control onClick={initRemoval}>\n                <FiTrash2 />\n            </Control>\n            {isRemoving && (\n                <Modal onCloseRequest={cancelRemoval} maxWidth={500}>\n                    <ModalTitle>\n                        <FiTrash2 /> Remove node: {node.name}?\n                    </ModalTitle>\n                    <ConfirmButtons onConfirm={handleRemoveNode} onCancel={cancelRemoval} />\n                </Modal>\n            )}\n        </Container>\n    )\n})\n\nconst Container = styled.div`\n    height: 33px;\n    width: 100%;\n    display: flex;\n    justify-content: flex-end;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n`\n\nconst Control = styled.span`\n    width: 33px;\n    height: 32px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    border-left: 1px solid ${props => props.theme.colors.lightBorder};\n    font-size: 16px;\n\n    &:hover {\n        background-color: #222222;\n    }\n`\n","import { createElement, useCallback, memo } from 'react'\nimport styled from 'styled-components'\nimport { FaTimes } from 'react-icons/fa'\nimport { ElementId, ResolvedProperty, useSetSelectedNodeIds, useUnlink } from '../../store'\nimport registry from '../../registry'\n\nconst Relation = memo(\n    ({\n        ownId,\n        elementId,\n        nodeId,\n        name,\n        parentName,\n    }: {\n        ownId: ElementId\n        elementId: ElementId\n        nodeId: ElementId\n        name: string\n        parentName?: string\n    }) => {\n        const setSelectedNodeIds = useSetSelectedNodeIds()\n        const unlink = useUnlink()\n\n        const goToRelation = useCallback(() => {\n            setSelectedNodeIds([nodeId])\n        }, [setSelectedNodeIds, nodeId])\n\n        const handleUnlink = useCallback(() => {\n            unlink(elementId, ownId)\n        }, [unlink, ownId, elementId])\n\n        return (\n            <RelationContainer>\n                <RelationName onClick={goToRelation}>\n                    {parentName && <span>{parentName}.</span>}\n                    {name}\n                </RelationName>\n                <UnlinkIcon onClick={handleUnlink}>\n                    <FaTimes />\n                </UnlinkIcon>\n            </RelationContainer>\n        )\n    }\n)\n\nexport const PropertyItem = memo(({ property }: { property: ResolvedProperty }) => {\n    const propertyService = registry.getPropertyService(property.type)\n\n    const hasInput = property.input !== undefined\n\n    return (\n        <Container>\n            <PropertyHeader>\n                <PropertyName>{property.name}</PropertyName>\n                {hasInput && (\n                    <Relation\n                        ownId={property.id}\n                        elementId={property.input!.id}\n                        nodeId={\n                            property.input!.elementType === 'node'\n                                ? property.input!.id\n                                : (property.input! as any).node.id\n                        }\n                        name={property.input!.name}\n                        parentName={\n                            property.input!.elementType === 'property'\n                                ? (property.input! as any).node.name\n                                : undefined\n                        }\n                    />\n                )}\n            </PropertyHeader>\n            {!hasInput && 'control' in propertyService && propertyService.control !== undefined && (\n                <ControlContainer>\n                    {/* @ts-ignore */}\n                    {createElement(propertyService.control, { property })}\n                </ControlContainer>\n            )}\n        </Container>\n    )\n})\n\nconst Container = styled.div`\n    padding: 9px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.lightBorder};\n\n    &:last-child {\n        border-bottom: none;\n    }\n`\n\nconst PropertyHeader = styled.div`\n    display: grid;\n    grid-template-columns: 40% 60%;\n    align-items: center;\n`\n\nconst PropertyName = styled.h4`\n    margin: 0;\n    padding: 0;\n`\n\nconst RelationContainer = styled.div`\n    display: flex;\n    align-items: center;\n    height: 24px;\n    border-radius: 2px;\n    color: ${props => props.theme.colors.accentColor};\n`\n\nconst RelationName = styled.span`\n    padding: 0 6px;\n    height: 100%;\n    flex-grow: 1;\n    line-height: 24px;\n    cursor: pointer;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    background-color: ${props => props.theme.colors.badgeBackground};\n    font-weight: 600;\n    font-size: 11px;\n\n    &:hover {\n        background-color: #444444;\n    }\n`\n\nconst UnlinkIcon = styled.span`\n    width: 24px;\n    height: 24px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-shrink: 0;\n    background-color: #444444;\n    border-radius: 0 2px 2px 0;\n    font-size: 10px;\n    cursor: pointer;\n\n    &:hover {\n        background-color: #555555;\n    }\n`\n\nconst ControlContainer = styled.div`\n    margin-top: 6px;\n`\n","import { memo, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { MdClose } from 'react-icons/md'\nimport registry from '../../registry'\nimport { ResolvedNode, useSetSelectedNodeIds } from '../../store'\nimport { NodeName } from './NodeName'\nimport { NodeControls } from './NodeControls'\nimport { PropertyItem } from './PropertyItem'\n\nexport const NodeInfoPanel = memo(({ node }: { node: ResolvedNode }) => {\n    const nodeService = registry.getNodeService(node.type)\n    const setSelectedNodeIds = useSetSelectedNodeIds()\n    // @ts-ignore\n    const value: any = nodeService.getValue(node, registry)\n\n    const handleClose = useCallback(() => {\n        setSelectedNodeIds([])\n    }, [setSelectedNodeIds])\n\n    return (\n        <div>\n            <Header>\n                <NodeName id={node.id} name={node.name} />\n                <Id>{node.type}</Id>\n                <Close onClick={handleClose}>\n                    <MdClose />\n                </Close>\n            </Header>\n            <NodeControls node={node} />\n            <Properties>\n                {node.properties.map(property => (\n                    <PropertyItem key={property.id} property={property} />\n                ))}\n            </Properties>\n            {value !== undefined && (\n                <>\n                    <NodeValueTitle>Node value</NodeValueTitle>\n                    {!value.$$typeof && <NodeValue>{JSON.stringify(value, null, '  ')}</NodeValue>}\n                    {value.$$typeof && (\n                        <NodeValue>{JSON.stringify(value.props, null, '  ')}</NodeValue>\n                    )}\n                </>\n            )}\n        </div>\n    )\n})\n\nconst Header = styled.header`\n    padding: 9px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n    position: relative;\n`\n\nconst Id = styled.div`\n    font-size: 12px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`\n\nconst Close = styled.span`\n    position: absolute;\n    width: 32px;\n    height: 32px;\n    top: 9px;\n    right: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    font-size: 18px;\n    color: #999999;\n\n    &:hover {\n        color: #eeeeee;\n    }\n`\n\nconst Properties = styled.div``\n\nconst NodeValueTitle = styled.h4`\n    border-top: 1px solid ${props => props.theme.colors.border};\n    padding: 6px 12px;\n    margin: 0;\n`\n\nconst NodeValue = styled.pre`\n    padding: 12px;\n    font-size: 12px;\n    margin: 0;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n`\n","import styled from 'styled-components'\nimport { ResolvedNode } from '../store'\nimport { NodeWidget } from './widgets'\n\nexport const NodesLayer = ({ nodes }: { nodes: ResolvedNode[] }) => {\n    return (\n        <Layer>\n            {nodes.map(node => (\n                <NodeWidget key={node.id} node={node} />\n            ))}\n        </Layer>\n    )\n}\n\nconst Layer = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n`\n","import { ChangeEvent, useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { FaSearch, FaTimes } from 'react-icons/fa'\nimport registry from '../registry'\nimport { useCreateNode } from '../store'\nimport { NodeService } from '../services_registry'\nimport { getCategoryColor } from '../theming'\n\nconst NodeType = ({ type, onCreate }: { type: NodeService; onCreate: () => void }) => {\n    const createNode = useCreateNode()\n\n    return (\n        <NodeTypeItem\n            onClick={() => {\n                createNode(type.type)\n                onCreate()\n            }}\n        >\n            <NodeTypeTitle category={type.category}>\n                {type.type.replace('node:', '').replace('_', ' ')}\n            </NodeTypeTitle>\n            {type.description && <NodeTypeDescription>{type.description}</NodeTypeDescription>}\n        </NodeTypeItem>\n    )\n}\n\nconst Category = ({\n    category,\n    onCreate,\n}: {\n    category: {\n        category: string\n        types: NodeService[]\n    }\n    onCreate: () => void\n}) => {\n    return (\n        <div>\n            <CategoryTitle category={category.category}>\n                {category.category.replace('_', ' ')}\n            </CategoryTitle>\n            {category.types.map(type => (\n                <NodeType key={type.type} type={type} onCreate={onCreate} />\n            ))}\n        </div>\n    )\n}\n\nexport const NodeSelector = ({ onCreate }: { onCreate: () => void }) => {\n    const categories = useMemo(() => registry.getNodeServiceCategories(), [])\n    const [searchTerm, setSearchTerm] = useState('')\n\n    const handleSearchTermChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            setSearchTerm(event.target.value)\n        },\n        [setSearchTerm]\n    )\n\n    const clearSearch = useCallback(() => {\n        setSearchTerm('')\n    }, [setSearchTerm])\n\n    const filtered = useMemo(() => {\n        if (!searchTerm) {\n            return categories\n        }\n\n        return categories\n            .map(category => {\n                return {\n                    ...category,\n                    types: category.types.filter(type => {\n                        return type.type.indexOf(searchTerm) !== -1\n                    }),\n                }\n            })\n            .filter(category => category.types.length > 0)\n    }, [categories, searchTerm])\n\n    return (\n        <>\n            <SearchBox>\n                <SearchInput\n                    type=\"text\"\n                    placeholder=\"search node type\"\n                    value={searchTerm}\n                    onChange={handleSearchTermChange}\n                />\n                <SearchIcon\n                    hasSearchTerm={!!searchTerm}\n                    onClick={searchTerm ? clearSearch : undefined}\n                >\n                    {searchTerm ? <FaTimes /> : <FaSearch />}\n                </SearchIcon>\n            </SearchBox>\n            <Container>\n                {filtered.length === 0 && (\n                    <NoResult>\n                        No node found matching: \"<strong>{searchTerm}</strong>\"\n                    </NoResult>\n                )}\n                {filtered.map(category => (\n                    // @ts-ignore\n                    <Category key={category.category} category={category} onCreate={onCreate} />\n                ))}\n            </Container>\n        </>\n    )\n}\n\nconst NoResult = styled.div`\n    padding: 16px 12px;\n    color: ${props => props.theme.colors.textLight};\n\n    strong {\n        color: ${props => props.theme.colors.text};\n        font-weight: 600;\n    }\n`\n\nconst SearchBox = styled.div`\n    position: relative;\n    height: 39px;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n`\n\nconst SearchInput = styled.input`\n    background-color: ${props => props.theme.colors.inputBackground};\n    color: ${props => props.theme.colors.inputText};\n    width: 100%;\n    height: 100%;\n    border: none;\n    padding: 9px 12px 9px 40px;\n    font-size: 14px;\n    font-family: inherit;\n\n    &:focus {\n        outline: none;\n    }\n`\n\nconst SearchIcon = styled.span<{\n    hasSearchTerm: boolean\n}>`\n    position: absolute;\n    z-index: 1;\n    top: 0;\n    left: 0;\n    font-size: ${props => (props.hasSearchTerm ? 12 : 16)}px;\n    color: ${props => props.theme.colors.inputText};\n    opacity: ${props => (props.hasSearchTerm ? 0.6 : 0.4)};\n    width: 38px;\n    height: 38px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: ${props => (props.hasSearchTerm ? 'pointer' : 'auto')};\n`\n\nconst Container = styled.div`\n    height: 600px;\n    overflow-y: auto;\n`\n\nconst CategoryTitle = styled.h3<{\n    category: string\n}>`\n    padding: 9px 12px;\n    margin: 0;\n    background-color: ${props => props.theme.colors.mediumDepthBackground};\n    font-size: 16px;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n`\n\nconst NodeTypeItem = styled.div`\n    padding: 12px 12px;\n    border-bottom: 1px solid ${props => props.theme.colors.lightBorder};\n    font-size: 14px;\n    cursor: pointer;\n\n    &:last-child {\n        border-bottom: none;\n    }\n\n    &:hover {\n        background-color: ${props => props.theme.colors.mediumDepthBackground};\n    }\n`\n\nconst NodeTypeTitle = styled.h4<{\n    category: string\n}>`\n    margin: 0;\n    padding: 0;\n    font-size: 14px;\n    font-weight: 600;\n    color: ${props => getCategoryColor(props.category, props.theme)};\n`\n\nconst NodeTypeDescription = styled.div`\n    font-weight: 400;\n    font-size: 12px;\n    margin-top: 6px;\n    color: ${props => props.theme.colors.textLight};\n`\n","import { PropsWithChildren } from 'react'\nimport styled from 'styled-components'\n\nconst Button = styled.div`\n    width: 64px;\n    height: 64px;\n    cursor: pointer;\n    background-color: ${props => props.theme.colors.topDepthBackground};\n    color: ${props => props.theme.colors.textLight};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 22px;\n\n    &:hover {\n        background-color: #222222;\n        color: ${props => props.theme.colors.text};\n    }\n`\n\nexport const SidebarButton = ({\n    children,\n    onClick,\n}: PropsWithChildren<{\n    onClick: () => void\n}>) => {\n    return <Button onClick={onClick}>{children}</Button>\n}\n","import { useState, memo, useCallback } from 'react'\nimport { MdLibraryAdd } from 'react-icons/md'\nimport { Modal, ModalTitle } from '../Modal'\nimport { NodeSelector } from '../NodeSelector'\nimport { SidebarButton } from './SidebarButton'\n\nexport const AddNodeButton = memo(() => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    const handleOpen = useCallback(() => {\n        setIsOpen(true)\n    }, [setIsOpen])\n\n    const handleClose = useCallback(() => {\n        setIsOpen(false)\n    }, [setIsOpen])\n\n    return (\n        <>\n            <SidebarButton onClick={handleOpen}>\n                <MdLibraryAdd />\n            </SidebarButton>\n            {isOpen && (\n                <Modal onCloseRequest={handleClose} maxWidth={600}>\n                    <ModalTitle>\n                        <MdLibraryAdd /> Add new node\n                    </ModalTitle>\n                    <NodeSelector onCreate={handleClose} />\n                </Modal>\n            )}\n        </>\n    )\n})\n","import { useCallback, useState, memo } from 'react'\nimport { MdNoteAdd } from 'react-icons/md'\nimport { useLoadGraph } from '../../store'\nimport { ConfirmButtons } from '../ui/ConfirmButtons'\nimport { Modal, ModalTitle } from '../Modal'\nimport { SidebarButton } from './SidebarButton'\n\nexport const NewGraph = memo(() => {\n    const [isOpen, setIsOpen] = useState(false)\n    const loadGraph = useLoadGraph()\n\n    const handleNewGraph = useCallback(() => {\n        loadGraph({ nodes: [], links: [] })\n        setIsOpen(false)\n    }, [loadGraph, setIsOpen])\n\n    return (\n        <>\n            <SidebarButton\n                onClick={() => {\n                    setIsOpen(true)\n                }}\n            >\n                <MdNoteAdd />\n            </SidebarButton>\n            {isOpen && (\n                <Modal\n                    onCloseRequest={() => {\n                        setIsOpen(false)\n                    }}\n                    maxWidth={300}\n                >\n                    <ModalTitle>\n                        <MdNoteAdd /> Create new graph?\n                    </ModalTitle>\n                    <ConfirmButtons\n                        onConfirm={handleNewGraph}\n                        onCancel={() => {\n                            setIsOpen(false)\n                        }}\n                    />\n                </Modal>\n            )}\n        </>\n    )\n})\n","import { fileOpen, fileSave } from 'browser-nativefs'\nimport { ResolvedLink, ResolvedNode, serializeElements } from './store'\n\nexport const saveAsJSON = async (nodes: ResolvedNode[], links: ResolvedLink[]) => {\n    const serialized = serializeElements(nodes, links)\n    const stringified = JSON.stringify(\n        {\n            type: 'nivo-graph',\n            version: 'beta',\n            ...serialized,\n        },\n        null,\n        2\n    )\n\n    const blob = new Blob([stringified], {\n        type: 'application/json',\n    })\n\n    const fileHandle = await fileSave(\n        blob,\n        {\n            fileName: 'graph',\n            description: 'Nivo graph',\n            extensions: ['.json'],\n        },\n        null //appState.fileHandle\n    )\n\n    return { fileHandle }\n}\n\nexport const parseFileContent = async (blob: Blob | File) => {\n    let content: string\n    if ('text' in Blob) {\n        content = await blob.text()\n    } else {\n        content = await new Promise(resolve => {\n            const reader = new FileReader()\n            reader.readAsText(blob, 'utf8')\n            reader.onloadend = () => {\n                if (reader.readyState === FileReader.DONE) {\n                    resolve(reader.result as string)\n                }\n            }\n        })\n    }\n\n    return JSON.parse(content)\n}\n\nexport const loadFromJSON = async () => {\n    const blob = await fileOpen({\n        description: 'Nivo graph files',\n        extensions: ['.json', '.nivo'],\n        mimeTypes: ['application/json'],\n    })\n\n    const content = await parseFileContent(blob)\n    if (content.type !== 'nivo-graph') {\n        throw new Error('graph file is invalid')\n    }\n\n    return content\n}\n","import { MdSave } from 'react-icons/md'\nimport { ResolvedLink, ResolvedNode } from '../../store'\nimport { saveAsJSON } from '../../fs'\nimport { SidebarButton } from './SidebarButton'\n\ninterface SaveProps {\n    nodes: ResolvedNode[]\n    links: ResolvedLink[]\n}\n\nexport const SaveGraph = ({ nodes, links }: SaveProps) => {\n    const handleSave = () => {\n        saveAsJSON(nodes, links)\n    }\n\n    return (\n        <SidebarButton onClick={handleSave}>\n            <MdSave />\n        </SidebarButton>\n    )\n}\n","import { useCallback } from 'react'\nimport { MdFolderOpen } from 'react-icons/md'\nimport { loadFromJSON } from '../../fs'\nimport { useStore } from '../../store'\nimport { SidebarButton } from './SidebarButton'\n\nexport const OpenGraph = () => {\n    const { loadGraph } = useStore()\n\n    const handleOpen = useCallback(() => {\n        loadFromJSON().then(graph => {\n            loadGraph(graph)\n        })\n    }, [loadGraph])\n\n    return (\n        <SidebarButton onClick={handleOpen}>\n            <MdFolderOpen />\n        </SidebarButton>\n    )\n}\n","import { memo, useState } from 'react'\nimport styled from 'styled-components'\nimport { MdSettings } from 'react-icons/md'\nimport { themes } from '../../theming'\nimport { useSetSettings, useSettings } from '../../store'\nimport { Modal, ModalTitle } from '../Modal'\nimport { SidebarButton } from './SidebarButton'\n\nexport const Settings = memo(() => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    const settings = useSettings()\n    const setSettings = useSetSettings()\n\n    return (\n        <>\n            <SidebarButton\n                onClick={() => {\n                    setIsOpen(true)\n                }}\n            >\n                <MdSettings />\n            </SidebarButton>\n            {isOpen && (\n                <Modal\n                    onCloseRequest={() => {\n                        setIsOpen(false)\n                    }}\n                    maxWidth={500}\n                >\n                    <ModalTitle>\n                        <MdSettings /> Settings\n                    </ModalTitle>\n                    <Container>\n                        <span>Theme</span>\n                        <select\n                            value={settings.themeId}\n                            onChange={event => {\n                                setSettings({\n                                    themeId: event.target.value,\n                                })\n                            }}\n                        >\n                            {themes.map(theme => {\n                                return (\n                                    <option key={theme.id} value={theme.id}>\n                                        {theme.name}\n                                    </option>\n                                )\n                            })}\n                        </select>\n                    </Container>\n                </Modal>\n            )}\n        </>\n    )\n})\n\nconst Container = styled.div`\n    padding: 12px;\n    display: grid;\n    grid-template-columns: 90px 1fr;\n`\n","import styled from 'styled-components'\nimport { ResolvedLink, ResolvedNode } from '../../store'\nimport { AddNodeButton } from './AddNodeButton'\nimport { NewGraph } from './NewGraph'\nimport { SaveGraph } from './SaveGraph'\nimport { OpenGraph } from './OpenGraph'\nimport { Settings } from './Settings'\n\nexport const Sidebar = ({ nodes, links }: { nodes: ResolvedNode[]; links: ResolvedLink[] }) => {\n    return (\n        <Container>\n            <AddNodeButton />\n            <SaveGraph nodes={nodes} links={links} />\n            <OpenGraph />\n            <NewGraph />\n            <Settings />\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    position: fixed;\n    top: 46px;\n    left: 0;\n    width: 64px;\n    height: 100%;\n    background: ${props => props.theme.colors.topDepthBackground};\n`\n","import chordExample from './chord.json'\nimport sankeyExample from './sankey.json'\nimport seriesExample from './series.json'\n\nexport const examples = [\n    {\n        name: 'Chord diagram',\n        data: chordExample,\n    },\n    {\n        name: 'Sankey diagram',\n        data: sankeyExample,\n    },\n    {\n        name: 'XY series charts',\n        data: seriesExample,\n    },\n]\n","import styled from 'styled-components'\nimport { FaExternalLinkAlt } from 'react-icons/fa'\nimport { examples } from '../examples'\nimport { useStore } from '../store'\nimport { useCallback } from 'react'\n\nconst ExampleItem = ({\n    example,\n    onLoad,\n}: {\n    example: {\n        name: string\n        data: any\n    }\n    onLoad: () => void\n}) => {\n    const { loadGraph } = useStore()\n\n    const handleLoad = useCallback(() => {\n        loadGraph(example.data)\n        onLoad()\n    }, [loadGraph, example.data, onLoad])\n\n    return (\n        <ExampleItemContainer onClick={handleLoad}>\n            {example.name}\n            <FaExternalLinkAlt />\n        </ExampleItemContainer>\n    )\n}\n\nconst ExampleItemContainer = styled.div`\n    display: flex;\n    padding: 6px 9px 6px 12px;\n    align-items: center;\n    background-color: #000000;\n    border-radius: 2px;\n    color: ${props => props.theme.colors.accentColor};\n    cursor: pointer;\n    margin: 0 12px 9px 0;\n\n    svg {\n        margin-left: 12px;\n    }\n\n    &:hover {\n        box-shadow: 0 0 0 2px pink;\n    }\n`\n\nexport const ExampleLoader = ({ onLoad }: { onLoad: () => void }) => {\n    return (\n        <Container>\n            {examples.map(example => (\n                <ExampleItem key={example.name} example={example} onLoad={onLoad} />\n            ))}\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    margin: 12px 0 3px;\n`\n","import { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, ModalTitle } from './Modal'\nimport { ExampleLoader } from './ExampleLoader'\n\nexport const Welcome = () => {\n    const [isOpen, setIsOpen] = useState(true)\n\n    const handleClose = useCallback(() => {\n        setIsOpen(false)\n    }, [setIsOpen])\n\n    return (\n        <>\n            {isOpen && (\n                <Modal onCloseRequest={handleClose} maxWidth={500}>\n                    <ModalTitle>Welcome</ModalTitle>\n                    <Message>\n                        <p>\n                            Welcome to the new nivo graph editor! This application is currently an\n                            early prototype, so things might (and will) break ¯\\_(ツ)_/¯, sorry for\n                            that.\n                        </p>\n                        <p>\n                            The motivation behind this project is to provide a way to visually\n                            create charts, without code, allowing people without too much technical\n                            background to easily use nivo charts.\n                        </p>\n                        <p>In order to get started, you can have a look at one of the example:</p>\n                        <ExampleLoader onLoad={handleClose} />\n                        <p>Otherwise, you can just start form scratch and craft your own chart.</p>\n                        <div\n                            style={{\n                                display: 'flex',\n                                justifyContent: 'center',\n                                margin: '12px 0',\n                            }}\n                        >\n                            <span\n                                onClick={handleClose}\n                                style={{\n                                    padding: '9px 12px',\n                                    backgroundColor: '#000',\n                                    borderRadius: '2px',\n                                    cursor: 'pointer',\n                                }}\n                            >\n                                Start from scratch\n                            </span>\n                        </div>\n                        <p>\n                            We hope you'll enjoy using this tool as much as we enjoy building it!\n                            &lt;3\n                        </p>\n                    </Message>\n                </Modal>\n            )}\n        </>\n    )\n}\n\nconst Message = styled.div`\n    padding: 12px 12px 0;\n    font-size: 12px;\n\n    p {\n        margin: 0 0 12px;\n    }\n`\n","import { MouseEvent, useCallback } from 'react'\nimport styled, { ThemeProvider } from 'styled-components'\nimport { useStore, useSelectedNodes, useGraph } from './store'\nimport { useCurrentTheme, GlobalStyle } from './theming'\nimport {\n    AppHeader,\n    AppFooter,\n    NodesLayer,\n    LinkingLayer,\n    LinksLayer,\n    NodeInfoPanel,\n    Sidebar,\n    Welcome,\n} from './components'\n\nexport const App = () => {\n    const store = useStore()\n    const theme = useCurrentTheme()\n    const { nodes, links } = useGraph()\n    const selectedNodes = useSelectedNodes()\n\n    const { dragging, updateDrag, stopDrag, linking, updateLinking, stopLinking } = store\n    const handleMouseMove = useCallback(\n        (event: MouseEvent) => {\n            if (dragging.isDragging) {\n                updateDrag([event.clientX, event.clientY])\n            }\n            if (linking.isLinking) {\n                updateLinking([event.clientX, event.clientY])\n            }\n        },\n        [dragging.isDragging, updateDrag, linking.isLinking, updateLinking]\n    )\n    const handleMouseOut = useCallback(\n        (event: MouseEvent) => {\n            if (dragging.isDragging) {\n                stopDrag()\n            }\n            if (linking.isLinking) {\n                stopLinking()\n            }\n        },\n        [dragging.isDragging, stopDrag, linking.isLinking, stopLinking]\n    )\n\n    return (\n        <ThemeProvider theme={theme}>\n            <GlobalStyle />\n            <AppHeader />\n            <Sidebar nodes={nodes} links={links} />\n            <Canvas\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseOut}\n                onMouseLeave={handleMouseOut}\n            >\n                <LinksLayer links={links} />\n                <NodesLayer nodes={nodes} />\n                <LinkingLayer />\n            </Canvas>\n            <InfoPanel>\n                {selectedNodes.length === 1 && <NodeInfoPanel node={selectedNodes[0]} />}\n            </InfoPanel>\n            <AppFooter />\n            <Welcome />\n        </ThemeProvider>\n    )\n}\n\nconst Canvas = styled.div`\n    position: fixed;\n    top: 46px;\n    bottom: 52px;\n    left: 64px;\n    width: calc(100% - 364px);\n    height: calc(100% - 82px);\n    background: ${props => props.theme.colors.background};\n    overflow: hidden;\n`\n\nconst InfoPanel = styled.div`\n    position: fixed;\n    top: 46px;\n    right: 0;\n    width: 300px;\n    height: 100%;\n    background: ${props => props.theme.colors.topDepthBackground};\n    overflow-y: auto;\n`\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}